var Editor=function(){this.DEFAULT_CAMERA=new THREE.PerspectiveCamera(50,1,0.1,10000);this.DEFAULT_CAMERA.name='Camera';this.DEFAULT_CAMERA.position.set(20,10,20);this.DEFAULT_CAMERA.lookAt(new THREE.Vector3());this.project_uuid="";var Signal=signals.Signal;this.signals={editScript:new Signal(),startPlayer:new Signal(),stopPlayer:new Signal(),showModal:new Signal(),editorCleared:new Signal(),savingStarted:new Signal(),savingFinished:new Signal(),themeChanged:new Signal(),transformModeChanged:new Signal(),snapChanged:new Signal(),spaceChanged:new Signal(),rendererChanged:new Signal(),sceneBackgroundChanged:new Signal(),sceneFogChanged:new Signal(),sceneGraphChanged:new Signal(),cameraChanged:new Signal(),geometryChanged:new Signal(),objectSelected:new Signal(),objectFocused:new Signal(),objectAdded:new Signal(),objectChanged:new Signal(),objectRemoved:new Signal(),helperAdded:new Signal(),helperRemoved:new Signal(),materialChanged:new Signal(),scriptAdded:new Signal(),scriptChanged:new Signal(),scriptRemoved:new Signal(),windowResize:new Signal(),showGridChanged:new Signal(),refreshSidebarObject3D:new Signal(),historyChanged:new Signal()};this.config=new Config('threejs-editor');this.history=new History(this);this.storage=new Storage();this.loader=new Loader(this);this.camera=this.DEFAULT_CAMERA.clone();this.scene=new THREE.Scene();this.scene.name='Scene';this.scene.background=new THREE.Color(0xaaaaaa);this.scene.length=0;this.scene.wingspan=0;this.scene.height=0;this.scene.x_max=0;this.scene.x_min=0;this.scene.y_max=0;this.scene.y_min=0;this.scene.z_max=0;this.scene.z_min=0;this.scene.z_short=0;this.scene.y_short=0;this.scene.antennaSnapping=false;this.scene.x_short=[0,0,0,0];this.scene.y_short=[0,0,0,0];this.scene.z_short=[0,0,0,0];this.scene.menu=[null,null,null,null];this.scene.posi=[0,0,0,0];this.scene.rota=[0,0,0,0];this.scene.scal=[0,0,0,0];this.sceneHelpers=new THREE.Scene();this.object={};this.geometries={};this.materials={};this.textures={};this.scripts={};this.selected=null;this.helpers={};};Editor.prototype={setTheme:function(value){document.getElementById('theme').href=value;this.signals.themeChanged.dispatch(value);},setScene:function(scene){this.scene.uuid=scene.uuid;this.scene.name=scene.name;if(scene.background!==null)this.scene.background=scene.background.clone();if(scene.fog!==null)this.scene.fog=scene.fog.clone();this.scene.userData=JSON.parse(JSON.stringify(scene.userData));this.signals.sceneGraphChanged.active=false;while(scene.children.length>0){this.addObject(scene.children[0]);}
this.signals.sceneGraphChanged.active=true;this.signals.sceneGraphChanged.dispatch();},setAntennaSnapping:function(checkboxValue){this.scene.antennaSnapping=checkboxValue;},getAntennaSnapping:function(){return this.scene.antennaSnapping;},addObject:function(object){var scope=this;object.traverse(function(child){if(child.geometry!==undefined)scope.addGeometry(child.geometry);if(child.material!==undefined)scope.addMaterial(child.material);scope.addHelper(child);});this.scene.add(object);this.signals.objectAdded.dispatch(object);this.signals.sceneGraphChanged.dispatch();},moveObject:function(object,parent,before){if(parent===undefined){parent=this.scene;}
parent.add(object);if(before!==undefined){var index=parent.children.indexOf(before);parent.children.splice(index,0,object);parent.children.pop();}
this.signals.sceneGraphChanged.dispatch();},nameObject:function(object,name){object.name=name;this.signals.sceneGraphChanged.dispatch();},removeObject:function(object){if(object.parent===null)return;var scope=this;object.traverse(function(child){scope.removeHelper(child);});object.parent.remove(object);this.signals.objectRemoved.dispatch(object);this.signals.sceneGraphChanged.dispatch();},addGeometry:function(geometry){this.geometries[geometry.uuid]=geometry;},setGeometryName:function(geometry,name){geometry.name=name;this.signals.sceneGraphChanged.dispatch();},addMaterial:function(material){this.materials[material.uuid]=material;},setMaterialName:function(material,name){material.name=name;this.signals.sceneGraphChanged.dispatch();},addTexture:function(texture){this.textures[texture.uuid]=texture;},addHelper:function(){var geometry=new THREE.SphereBufferGeometry(2,4,2);var material=new THREE.MeshBasicMaterial({color:0xff0000,visible:false});return function(object){var helper;if(object instanceof THREE.Camera){helper=new THREE.CameraHelper(object,1);}else if(object instanceof THREE.PointLight){helper=new THREE.PointLightHelper(object,1);}else if(object instanceof THREE.DirectionalLight){helper=new THREE.DirectionalLightHelper(object,1);}else if(object instanceof THREE.SpotLight){helper=new THREE.SpotLightHelper(object,1);}else if(object instanceof THREE.HemisphereLight){helper=new THREE.HemisphereLightHelper(object,1);}else if(object instanceof THREE.SkinnedMesh){helper=new THREE.SkeletonHelper(object);}else{return;}
var picker=new THREE.Mesh(geometry,material);picker.name='picker';picker.userData.object=object;helper.add(picker);this.sceneHelpers.add(helper);this.helpers[object.id]=helper;this.signals.helperAdded.dispatch(helper);};}(),removeHelper:function(object){if(this.helpers[object.id]!==undefined){var helper=this.helpers[object.id];helper.parent.remove(helper);delete this.helpers[object.id];this.signals.helperRemoved.dispatch(helper);}},addScript:function(object,script){if(this.scripts[object.uuid]===undefined){this.scripts[object.uuid]=[];}
this.scripts[object.uuid].push(script);this.signals.scriptAdded.dispatch(script);},removeScript:function(object,script){if(this.scripts[object.uuid]===undefined)return;var index=this.scripts[object.uuid].indexOf(script);if(index!==-1){this.scripts[object.uuid].splice(index,1);}
this.signals.scriptRemoved.dispatch(script);},getObjectMaterial:function(object,slot){var material=object.material;if(Array.isArray(material)){material=material[slot];}
return material;},setObjectMaterial:function(object,slot,newMaterial){if(Array.isArray(object.material)){object.material[slot]=newMaterial;}else{object.material=newMaterial;}},select:function(object){if(this.selected===object)return;if(object===null||this.scene==object||this.scene===object.parent){var uuid=null;if(object!==null){uuid=object.uuid;}
this.selected=object;this.config.setKey('selected',uuid);this.signals.objectSelected.dispatch(object);}else{var uuid=null;if(object.parent!==null){uuid=object.parent.uuid;}
this.selected=object.parent;this.config.setKey('selected',uuid);this.signals.objectSelected.dispatch(object.parent);}},selectById:function(id){if(id===this.camera.id){this.select(this.camera);return;}
this.select(this.scene.getObjectById(id,true));},selectByUuid:function(uuid){var scope=this;this.scene.traverse(function(child){if(child.uuid===uuid){scope.select(child);}});},deselect:function(){this.select(null);},focus:function(object){this.signals.objectFocused.dispatch(object);},focusById:function(id){this.focus(this.scene.getObjectById(id,true));},clear:function(){this.history.clear();this.storage.clear();this.camera.copy(this.DEFAULT_CAMERA);this.scene.background.setHex(0xaaaaaa);this.scene.fog=null;var objects=this.scene.children;this.scene.length=0;this.scene.wingspan=0;this.scene.height=0;this.scene.x_max=0;this.scene.x_min=0;this.scene.y_max=0;this.scene.y_min=0;this.scene.z_max=0;this.scene.z_min=0;this.scene.z_short=0;this.scene.y_short=0;this.scene.antennaSnapping=false;this.scene.x_short=[0,0,0,0];this.scene.y_short=[0,0,0,0];this.scene.z_short=[0,0,0,0];this.scene.posi=[0,0,0,0];this.scene.rota=[0,0,0,0];this.scene.scal=[0,0,0,0];while(objects.length>0){this.removeObject(objects[0]);}
this.geometries={};this.materials={};this.textures={};this.scripts={};this.deselect();this.signals.editorCleared.dispatch();},fromJSON:function(json){var loader=new THREE.ObjectLoader();if(json.scene===undefined){this.setScene(loader.parse(json));return;}
var camera=loader.parse(json.camera);this.project_uuid=json.project.uuid;this.camera.copy(camera);this.camera.aspect=this.DEFAULT_CAMERA.aspect;this.camera.updateProjectionMatrix();this.setRelativeDimensions(json.project.relative_dimensions);this.history.fromJSON(json.history);this.scripts=json.scripts;this.setScene(loader.parse(json.scene));},toJSON:function(){var scene=this.scene;var scripts=this.scripts;for(var key in scripts){var script=scripts[key];if(script.length===0||scene.getObjectByProperty('uuid',key)===undefined){delete scripts[key];}}
return{metadata:{},project:{uuid:this.project_uuid,relative_dimensions:this.getRelativeDimensions(),gammaInput:this.config.getKey('project/renderer/gammaInput'),gammaOutput:this.config.getKey('project/renderer/gammaOutput'),shadows:this.config.getKey('project/renderer/shadows'),vr:this.config.getKey('project/vr'),},camera:this.camera.toJSON(),scene:this.scene.toJSON(),scripts:this.scripts,history:this.history.toJSON()};},objectByUuid:function(uuid){return this.scene.getObjectByProperty('uuid',uuid,true);},execute:function(cmd,optionalName){this.history.execute(cmd,optionalName);},undo:function(){this.history.undo();},redo:function(){this.history.redo();},getRelativeDimensions:function(){output={length:this.scene.length,wingspan:this.scene.wingspan,height:this.scene.height,x_max:this.scene.x_max,x_min:this.scene.x_min,y_max:this.scene.y_max,y_min:this.scene.y_min,z_max:this.scene.z_max,z_min:this.scene.z_min,z_short:this.scene.z_short,y_short:this.scene.y_short,x_short:this.scene.x_short,y_short:this.scene.y_short,z_short:this.scene.z_short};return output;},setRelativeDimensions:function(dimensions){this.scene.length=dimensions.length;this.scene.wingspan=dimensions.wingspan;this.scene.height=dimensions.height;this.scene.x_max=dimensions.x_max;this.scene.x_min=dimensions.x_min;this.scene.y_max=dimensions.y_max;this.scene.y_min=dimensions.y_min;this.scene.z_max=dimensions.z_max;this.scene.z_min=dimensions.z_min;this.scene.z_short=dimensions.z_short;this.scene.y_short=dimensions.y_short;this.scene.x_short=dimensions.x_short;this.scene.y_short=dimensions.y_short;this.scene.z_short=dimensions.z_short;},getModelLength:function(){return this.scene.length;},getModelWingspan:function(){return this.scene.wingspan;},getModelHeight:function(){return this.scene.height;},setModelDimensions:function(len,wing,heigh){this.scene.length=parseFloat(len);this.scene.wingspan=parseFloat(wing);this.scene.height=parseFloat(heigh);},setModel:function(geo){for(var i=0;i<geo.children.length;i++){var type=geo.children[i].geometry;if(type.type==="BufferGeometry"){var next=type.attributes.position.array;for(var j=0;j<next.length;j=j+3){if(next[j]>this.scene.x_max){this.scene.x_max=next[j];this.scene.y_short[0]=next[j+1];this.scene.z_short[0]=next[j+2];}
if(next[j]<this.scene.x_min){this.scene.x_min=next[j];this.scene.y_short[1]=next[j+1];this.scene.z_short[1]=next[j+2];}
if(next[j+1]>this.scene.y_max){this.scene.y_max=next[j+1];this.scene.x_short[0]=next[j];this.scene.z_short[2]=next[j+2];}
if(next[j+1]<this.scene.y_min){this.scene.y_min=next[j+1];this.scene.x_short[1]=next[j];this.scene.z_short[3]=next[j+2];}
if(next[j+2]>this.scene.z_max){this.scene.z_max=next[j+2];this.scene.x_short[2]=next[j];this.scene.y_short[2]=next[j+1];}
if(next[j+2]<this.scene.z_min){this.scene.z_min=next[j+2];this.scene.x_short[3]=next[j];this.scene.y_short[3]=next[j+1];}}}
else if(type.type==="Geometry"){var next=type.vertices;for(var j=0;j<next.length;j++){if(next[j].x>this.scene.x_max){this.scene.x_max=next[j].x;this.scene.y_short[0]=next[j].y;this.scene.z_short[0]=next[j].z;}
if(next[j].x<this.scene.x_min){this.scene.x_min=next[j].x;this.scene.y_short[1]=next[j].y;this.scene.z_short[1]=next[j].z;}
if(next[j].y>this.scene.y_max){this.scene.y_max=next[j].y;this.scene.x_short[0]=next[j].x;this.scene.z_short[2]=next[j].z;}
if(next[j].y<this.scene.y_min){this.scene.y_min=next[j].y;this.scene.x_short[1]=next[j].x;this.scene.z_short[3]=next[j].z;}
if(next[j].z>this.scene.z_max){this.scene.z_max=next[j].z;this.scene.x_short[2]=next[j].x;this.scene.y_short[2]=next[j].y;}
if(next[j].z<this.scene.z_min){this.scene.z_min=next[j].z;this.scene.x_short[3]=next[j].x;this.scene.y_short[3]=next[j].y;}}}}
var delta_x=Math.abs(this.scene.x_max-this.scene.x_min);var delta_y=Math.abs(this.scene.y_max-this.scene.y_min);var delta_z=Math.abs(this.scene.z_max-this.scene.z_min);var wings=true;if(this.scene.length>this.scene.wingspan){wings=false;}
if(wings){if(delta_z>delta_y&&delta_z>delta_x){if(delta_x>delta_y){if(Math.abs(this.scene.x_short[2]-this.scene.x_max)>Math.abs(this.scene.x_short[2]-this.scene.x_min)){if(Math.abs(this.scene.y_short[0]-this.scene.y_max)>Math.abs(this.scene.y_short[0]-this.scene.y_min)){this.scene.y_min=this.scene.y_short[0];var temp=this.scene.x_max;var temp2=this.scene.x_min;this.scene.x_max=this.scene.z_max;this.scene.x_min=this.scene.z_min;this.scene.z_max=temp;this.scene.z_min=temp2;geo.rotateY(-90*THREE.Math.DEG2RAD);}
else{this.scene.y_max=this.scene.y_short[0];var temp=this.scene.x_max;var temp2=this.scene.x_min;this.scene.x_max=this.scene.z_max;this.scene.x_min=this.scene.z_min;this.scene.z_max=temp;this.scene.z_min=temp2;this.scene.y_max=this.scene.y_min*-1;this.scene.y_min=this.scene.y_max*-1;geo.rotateX(180*THREE.Math.DEG2RAD);geo.rotateY(-90*THREE.Math.DEG2RAD);}}
else{if(Math.abs(this.scene.y_short[1]-this.scene.y_max)>Math.abs(this.scene.y_short[1]-this.scene.y_min)){this.scene.y_min=this.scene.y_short[1];var temp=this.scene.x_max;var temp2=this.scene.x_min;this.scene.x_max=this.scene.z_max;this.scene.x_min=this.scene.z_min;this.scene.z_max=temp2*-1;this.scene.z_min=temp*-1;geo.rotateY(90*THREE.Math.DEG2RAD);}
else{this.scene.y_max=this.scene.y_short[1];var temp=this.scene.x_max;var temp2=this.scene.x_min;this.scene.x_max=this.scene.z_max;this.scene.x_min=this.scene.z_min;this.scene.z_max=temp2*-1;this.scene.z_min=temp*-1;this.scene.y_max=this.scene.y_min*-1;this.scene.y_min=this.scene.y_max*-1;geo.rotateX(180*THREE.Math.DEG2RAD);geo.rotateY(90*THREE.Math.DEG2RAD);}}}
else{if(Math.abs(this.scene.y_short[2]-this.scene.y_max)>Math.abs(this.scene.y_short[2]-this.scene.y_min)){if(Math.abs(this.scene.x_short[0]-this.scene.x_max)>Math.abs(this.scene.x_short[0]-this.scene.x_min)){this.scene.x_min=this.scene.x_short[0];var temp=this.scene.y_max;var temp2=this.scene.y_min;this.scene.y_max=this.scene.x_max;this.scene.y_min=this.scene.x_min;this.scene.x_max=this.scene.z_max;this.scene.x_min=this.scene.z_min;this.scene.z_max=temp;this.scene.z_min=temp2;geo.rotateY(90*THREE.Math.DEG2RAD);geo.rotateZ(90*THREE.Math.DEG2RAD);}
else{this.scene.x_max=this.scene.x_short[0];var temp=this.scene.y_max;var temp2=this.scene.y_min;this.scene.y_max=this.scene.x_min*-1;this.scene.y_min=this.scene.x_max*-1;this.scene.x_max=this.scene.z_max;this.scene.x_min=this.scene.z_min;this.scene.z_max=temp;this.scene.z_min=temp2;geo.rotateY(-90*THREE.Math.DEG2RAD);geo.rotateZ(-90*THREE.Math.DEG2RAD);}}
else{if(Math.abs(this.scene.x_short[1]-this.scene.x_max)>Math.abs(this.scene.x_short[1]-this.scene.x_min)){this.scene.x_min=this.scene.x_short[1];var temp=this.scene.y_max;var temp2=this.scene.y_min;this.scene.y_max=this.scene.x_max;this.scene.y_min=this.scene.x_min;this.scene.x_max=this.scene.z_max;this.scene.x_min=this.scene.z_min;this.scene.z_max=temp2*-1;this.scene.z_min=temp*-1;geo.rotateY(-90*THREE.Math.DEG2RAD);geo.rotateZ(90*THREE.Math.DEG2RAD);}
else{this.scene.x_max=this.scene.x_short[1];var temp=this.scene.y_max;var temp2=this.scene.y_min;this.scene.y_max=this.scene.x_min*-1;this.scene.y_min=this.scene.x_max*-1;this.scene.x_max=this.scene.z_max;this.scene.x_min=this.scene.z_min;this.scene.z_max=temp2*-1;this.scene.z_min=temp*-1;geo.rotateY(90*THREE.Math.DEG2RAD);geo.rotateZ(-90*THREE.Math.DEG2RAD);}}}}
else if(delta_y>delta_x&&delta_y>delta_z){if(delta_z>delta_x){if(Math.abs(this.scene.z_short[2]-this.scene.z_max)>Math.abs(this.scene.z_short[2]-this.scene.z_min)){if(Math.abs(this.scene.x_short[2]-this.scene.x_max)>Math.abs(this.scene.x_short[2]-this.scene.x_min)){this.scene.x_min=this.scene.x_short[2];var temp=this.scene.y_max;var temp2=this.scene.y_min;this.scene.y_max=this.scene.x_max;this.scene.y_min=this.scene.x_min;this.scene.x_max=temp;this.scene.x_min=temp2;geo.rotateZ(90*THREE.Math.DEG2RAD);}
else{this.scene.x_max=this.scene.x_short[2];var temp=this.scene.y_max;var temp2=this.scene.y_min;this.scene.y_max=this.scene.x_min*-1;this.scene.y_min=this.scene.x_max*-1;this.scene.x_max=temp;this.scene.x_min=temp2;geo.rotateZ(-90*THREE.Math.DEG2RAD);}}
else{if(Math.abs(this.scene.x_short[3]-this.scene.x_max)>Math.abs(this.scene.x_short[3]-this.scene.x_min)){this.scene.x_min=this.scene.x_short[3];var temp=this.scene.y_max;var temp2=this.scene.y_min;this.scene.y_max=this.scene.x_max;this.scene.y_min=this.scene.x_min;this.scene.x_max=temp;this.scene.x_min=temp2;this.scene.z_max=this.scene.z_min*-1;this.scene.z_min=this.scene.z_max*-1;geo.rotateZ(90*THREE.Math.DEG2RAD);geo.rotateY(180*THREE.Math.DEG2RAD);}
else{this.scene.x_max=this.scene.x_short[3];var temp=this.scene.y_max;var temp2=this.scene.y_min;this.scene.y_max=this.scene.x_min*-1;this.scene.y_min=this.scene.x_max*-1;this.scene.x_max=temp;this.scene.x_min=temp2;this.scene.z_max=this.scene.z_min*-1;this.scene.z_min=this.scene.z_max*-1;geo.rotateZ(-90*THREE.Math.DEG2RAD);geo.rotateY(180*THREE.Math.DEG2RAD);}}}
else{if(Math.abs(this.scene.x_short[0]-this.scene.x_max)>Math.abs(this.scene.x_short[0]-this.scene.x_min)){if(Math.abs(this.scene.z_short[0]-this.scene.z_max)>Math.abs(this.scene.z_short[0]-this.scene.z_min)){this.scene.z_min=this.scene.z_short[0];var temp=this.scene.x_max;var temp2=this.scene.x_min;this.scene.x_max=this.scene.y_max;this.scene.x_min=this.scene.y_min;this.scene.y_max=this.scene.z_max;this.scene.y_min=this.scene.z_min;this.scene.z_max=temp;this.scene.z_min=temp2;geo.rotateX(-90*THREE.Math.DEG2RAD);geo.rotateY(-90*THREE.Math.DEG2RAD);}
else{this.scene.z_min=this.scene.z_short[1];var temp=this.scene.x_max;var temp2=this.scene.x_min;this.scene.x_max=this.scene.y_max;this.scene.x_min=this.scene.y_min;this.scene.y_max=this.scene.z_min*-1;this.scene.y_min=this.scene.z_max*-1;this.scene.z_max=temp;this.scene.z_min=temp2;geo.rotateX(90*THREE.Math.DEG2RAD);geo.rotateY(-90*THREE.Math.DEG2RAD);}}
else{if(Math.abs(this.scene.z_short[1]-this.scene.z_max)>Math.abs(this.scene.z_short[1]-this.scene.z_min)){this.scene.z_min=this.scene.z_short[0];var temp=this.scene.x_max;var temp2=this.scene.x_min;this.scene.x_max=this.scene.y_max;this.scene.x_min=this.scene.y_min;this.scene.y_max=this.scene.z_max;this.scene.y_min=this.scene.z_min;this.scene.z_max=temp2*-1;this.scene.z_min=temp*-1;geo.rotateX(-90*THREE.Math.DEG2RAD);geo.rotateY(90*THREE.Math.DEG2RAD);}
else{this.scene.z_min=this.scene.z_short[1];var temp=this.scene.x_max;var temp2=this.scene.x_min;this.scene.x_max=this.scene.y_max;this.scene.x_min=this.scene.y_min;this.scene.y_max=this.scene.z_min*-1;this.scene.y_min=this.scene.z_max*-1;this.scene.z_max=temp2*-1;this.scene.z_min=temp*-1;geo.rotateX(90*THREE.Math.DEG2RAD);geo.rotateY(90*THREE.Math.DEG2RAD);}}}}
else{if(delta_z>delta_y){if(Math.abs(this.scene.z_short[0]-this.scene.z_max)>Math.abs(this.scene.z_short[0]-this.scene.z_min)){if(Math.abs(this.scene.y_short[2]-this.scene.y_max)>Math.abs(this.scene.y_short[2]-this.scene.y_min)){this.scene.y_min=this.scene.y_short[2];}
else{this.scene.y_max=this.scene.y_min*-1;this.scene.y_min=this.scene.y_short[2]*-1;geo.rotateZ(180*THREE.Math.DEG2RAD);}}
else{if(Math.abs(this.scene.y_short[3]-this.scene.y_max)>Math.abs(this.scene.y_short[3]-this.scene.y_min)){this.scene.y_min=this.scene.y_short[3];this.scene.z_max=this.scene.z_min*-1;this.scene.z_min=this.scene.z_max*-1;geo.rotateY(180*THREE.Math.DEG2RAD);}
else{this.scene.y_max=this.scene.y_max*-1;this.scene.y_min=this.scene.y_short[3]*-1;this.scene.z_max=this.scene.z_min*-1;this.scene.z_min=this.scene.z_max*-1;geo.rotateY(180*THREE.Math.DEG2RAD);geo.rotateZ(180*THREE.Math.DEG2RAD);}}}
else{if(Math.abs(this.scene.y_short[0]-this.scene.y_max)>Math.abs(this.scene.y_short[0]-this.scene.y_min)||geo.name==="C-130 Hercules.obj"){if(Math.abs(this.scene.z_short[2]-this.scene.z_max)>Math.abs(this.scene.z_short[2]-this.scene.z_min)){this.scene.z_min=this.scene.z_short[2];var temp=this.scene.y_max;var temp2=this.scene.y_min;this.scene.y_max=this.scene.z_max;this.scene.y_min=this.scene.z_min;this.scene.z_max=temp;this.scene.z_min=temp2;geo.rotateY(180*THREE.Math.DEG2RAD);geo.rotateX(-90*THREE.Math.DEG2RAD);}
else{this.scene.z_max=this.scene.z_short[2];var temp=this.scene.y_max;var temp2=this.scene.y_min;this.scene.y_max=this.scene.z_min*-1;this.scene.y_min=this.scene.z_max*-1;this.scene.z_max=temp;this.scene.z_min=temp2;geo.rotateX(90*THREE.Math.DEG2RAD);}}
else{if(Math.abs(this.scene.z_short[3]-this.scene.z_max)>Math.abs(this.scene.z_short[3]-this.scene.z_min)||geo.name==="MQ-9 Reaper.obj"){this.scene.z_min=this.scene.z_short[3];var temp=this.scene.y_max;var temp2=this.scene.y_min;this.scene.y_max=this.scene.z_max;this.scene.y_min=this.scene.z_min;this.scene.z_max=temp2*-1;this.scene.z_min=temp*-1;geo.rotateX(-90*THREE.Math.DEG2RAD);}
else{this.scene.z_max=this.scene.z_short[3];var temp=this.scene.y_max;var temp2=this.scene.y_min;this.scene.y_max=this.scene.z_min*-1;this.scene.y_min=this.scene.z_max*-1;this.scene.z_max=temp2*-1;this.scene.z_min=temp*-1;geo.rotateY(180*THREE.Math.DEG2RAD);geo.rotateX(90*THREE.Math.DEG2RAD);}}}}}
else{if(delta_x>delta_y&&delta_x>delta_z){if(delta_z>delta_y){if(Math.abs(this.scene.x_short[2]-this.scene.x_max)>Math.abs(this.scene.x_short[2]-this.scene.x_min)){if(Math.abs(this.scene.y_short[0]-this.scene.y_max)>Math.abs(this.scene.y_short[0]-this.scene.y_min)){this.scene.y_min=this.scene.y_short[0];var temp=this.scene.x_max;var temp2=this.scene.x_min;this.scene.x_max=this.scene.z_max;this.scene.x_min=this.scene.z_min;this.scene.z_max=temp;this.scene.z_min=temp2;geo.rotateY(-90*THREE.Math.DEG2RAD);}
else{this.scene.y_max=this.scene.y_short[0];var temp=this.scene.x_max;var temp2=this.scene.x_min;this.scene.x_max=this.scene.z_max;this.scene.x_min=this.scene.z_min;this.scene.z_max=temp;this.scene.z_min=temp2;this.scene.y_max=this.scene.y_min*-1;this.scene.y_min=this.scene.y_max*-1;geo.rotateX(180*THREE.Math.DEG2RAD);geo.rotateY(-90*THREE.Math.DEG2RAD);}}
else{if(Math.abs(this.scene.y_short[1]-this.scene.y_max)>Math.abs(this.scene.y_short[1]-this.scene.y_min)){this.scene.y_min=this.scene.y_short[1];var temp=this.scene.x_max;var temp2=this.scene.x_min;this.scene.x_max=this.scene.z_max;this.scene.x_min=this.scene.z_min;this.scene.z_max=temp2*-1;this.scene.z_min=temp*-1;geo.rotateY(90*THREE.Math.DEG2RAD);}
else{this.scene.y_max=this.scene.y_short[1];var temp=this.scene.x_max;var temp2=this.scene.x_min;this.scene.x_max=this.scene.z_max;this.scene.x_min=this.scene.z_min;this.scene.z_max=temp2*-1;this.scene.z_min=temp*-1;this.scene.y_max=this.scene.y_min*-1;this.scene.y_min=this.scene.y_max*-1;geo.rotateX(180*THREE.Math.DEG2RAD);geo.rotateY(90*THREE.Math.DEG2RAD);}}}
else{if(Math.abs(this.scene.x_short[0]-this.scene.x_max)>Math.abs(this.scene.x_short[0]-this.scene.x_min)){if(Math.abs(this.scene.z_short[0]-this.scene.z_max)>Math.abs(this.scene.z_short[0]-this.scene.z_min)){this.scene.z_min=this.scene.z_short[0];var temp=this.scene.x_max;var temp2=this.scene.x_min;this.scene.x_max=this.scene.y_max;this.scene.x_min=this.scene.y_min;this.scene.y_max=this.scene.z_max;this.scene.y_min=this.scene.z_min;this.scene.z_max=temp;this.scene.z_min=temp2;geo.rotateX(-90*THREE.Math.DEG2RAD);geo.rotateY(-90*THREE.Math.DEG2RAD);}
else{this.scene.z_min=this.scene.z_short[1];var temp=this.scene.x_max;var temp2=this.scene.x_min;this.scene.x_max=this.scene.y_max;this.scene.x_min=this.scene.y_min;this.scene.y_max=this.scene.z_min*-1;this.scene.y_min=this.scene.z_max*-1;this.scene.z_max=temp;this.scene.z_min=temp2;geo.rotateX(90*THREE.Math.DEG2RAD);geo.rotateY(-90*THREE.Math.DEG2RAD);}}
else{if(Math.abs(this.scene.z_short[1]-this.scene.z_max)>Math.abs(this.scene.z_short[1]-this.scene.z_min)){this.scene.z_min=this.scene.z_short[0];var temp=this.scene.x_max;var temp2=this.scene.x_min;this.scene.x_max=this.scene.y_max;this.scene.x_min=this.scene.y_min;this.scene.y_max=this.scene.z_max;this.scene.y_min=this.scene.z_min;this.scene.z_max=temp2*-1;this.scene.z_min=temp*-1;geo.rotateX(-90*THREE.Math.DEG2RAD);geo.rotateY(90*THREE.Math.DEG2RAD);}
else{this.scene.z_min=this.scene.z_short[1];var temp=this.scene.x_max;var temp2=this.scene.x_min;this.scene.x_max=this.scene.y_max;this.scene.x_min=this.scene.y_min;this.scene.y_max=this.scene.z_min*-1;this.scene.y_min=this.scene.z_max*-1;this.scene.z_max=temp2*-1;this.scene.z_min=temp*-1;geo.rotateX(90*THREE.Math.DEG2RAD);geo.rotateY(90*THREE.Math.DEG2RAD);}}}}
else if(delta_y>delta_x&&delta_y>delta_z){if(delta_z>delta_x){if(Math.abs(this.scene.y_short[2]-this.scene.y_max)>Math.abs(this.scene.y_short[2]-this.scene.y_min)){if(Math.abs(this.scene.x_short[0]-this.scene.x_max)>Math.abs(this.scene.x_short[0]-this.scene.x_min)){this.scene.x_min=this.scene.x_short[0];var temp=this.scene.y_max;var temp2=this.scene.y_min;this.scene.y_max=this.scene.x_max;this.scene.y_min=this.scene.x_min;this.scene.x_max=this.scene.z_max;this.scene.x_min=this.scene.z_min;this.scene.z_max=temp;this.scene.z_min=temp2;geo.rotateY(90*THREE.Math.DEG2RAD);geo.rotateZ(90*THREE.Math.DEG2RAD);}
else{this.scene.x_max=this.scene.x_short[0];var temp=this.scene.y_max;var temp2=this.scene.y_min;this.scene.y_max=this.scene.x_min*-1;this.scene.y_min=this.scene.x_max*-1;this.scene.x_max=this.scene.z_max;this.scene.x_min=this.scene.z_min;this.scene.z_max=temp;this.scene.z_min=temp2;geo.rotateY(-90*THREE.Math.DEG2RAD);geo.rotateZ(-90*THREE.Math.DEG2RAD);}}
else{if(Math.abs(this.scene.x_short[1]-this.scene.x_max)>Math.abs(this.scene.x_short[1]-this.scene.x_min)){this.scene.x_min=this.scene.x_short[1];var temp=this.scene.y_max;var temp2=this.scene.y_min;this.scene.y_max=this.scene.x_max;this.scene.y_min=this.scene.x_min;this.scene.x_max=this.scene.z_max;this.scene.x_min=this.scene.z_min;this.scene.z_max=temp2*-1;this.scene.z_min=temp*-1;geo.rotateY(-90*THREE.Math.DEG2RAD);geo.rotateZ(90*THREE.Math.DEG2RAD);}
else{this.scene.x_max=this.scene.x_short[1];var temp=this.scene.y_max;var temp2=this.scene.y_min;this.scene.y_max=this.scene.x_min*-1;this.scene.y_min=this.scene.x_max*-1;this.scene.x_max=this.scene.z_max;this.scene.x_min=this.scene.z_min;this.scene.z_max=temp2*-1;this.scene.z_min=temp*-1;geo.rotateY(90*THREE.Math.DEG2RAD);geo.rotateZ(-90*THREE.Math.DEG2RAD);}}}
else{if(Math.abs(this.scene.y_short[0]-this.scene.y_max)>Math.abs(this.scene.y_short[0]-this.scene.y_min)){if(Math.abs(this.scene.z_short[2]-this.scene.z_max)>Math.abs(this.scene.z_short[2]-this.scene.z_min)){this.scene.z_min=this.scene.z_short[2];var temp=this.scene.y_max;var temp2=this.scene.y_min;this.scene.y_max=this.scene.z_max;this.scene.y_min=this.scene.z_min;this.scene.z_max=temp;this.scene.z_min=temp2;geo.rotateY(180*THREE.Math.DEG2RAD);geo.rotateX(-90*THREE.Math.DEG2RAD);}
else{this.scene.z_max=this.scene.z_short[2];var temp=this.scene.y_max;var temp2=this.scene.y_min;this.scene.y_max=this.scene.z_min*-1;this.scene.y_min=this.scene.z_max*-1;this.scene.z_max=temp;this.scene.z_min=temp2;geo.rotateX(90*THREE.Math.DEG2RAD);}}
else{if(Math.abs(this.scene.z_short[3]-this.scene.z_max)>Math.abs(this.scene.z_short[3]-this.scene.z_min)){this.scene.z_min=this.scene.z_short[3];var temp=this.scene.y_max;var temp2=this.scene.y_min;this.scene.y_max=this.scene.z_max;this.scene.y_min=this.scene.z_min;this.scene.z_max=temp2*-1;this.scene.z_min=temp*-1;geo.rotateX(-90*THREE.Math.DEG2RAD);}
else{this.scene.z_max=this.scene.z_short[3];var temp=this.scene.y_max;var temp2=this.scene.y_min;this.scene.y_max=this.scene.z_min*-1;this.scene.y_min=this.scene.z_max*-1;this.scene.z_max=temp2*-1;this.scene.z_min=temp*-1;geo.rotateY(180*THREE.Math.DEG2RAD);geo.rotateX(90*THREE.Math.DEG2RAD);}}}}
else{if(delta_x>delta_y){if(Math.abs(this.scene.z_short[0]-this.scene.z_max)>Math.abs(this.scene.z_short[0]-this.scene.z_min)){if(Math.abs(this.scene.y_short[2]-this.scene.y_max)>Math.abs(this.scene.y_short[2]-this.scene.y_min)){this.scene.y_min=this.scene.y_short[2];}
else{this.scene.y_max=this.scene.y_min*-1;this.scene.y_min=this.scene.y_short[2]*-1;geo.rotateZ(180*THREE.Math.DEG2RAD);}}
else{if(Math.abs(this.scene.y_short[3]-this.scene.y_max)>Math.abs(this.scene.y_short[3]-this.scene.y_min)){this.scene.y_min=this.scene.y_short[3];this.scene.z_max=this.scene.z_min*-1;this.scene.z_min=this.scene.z_max*-1;geo.rotateY(180*THREE.Math.DEG2RAD);}
else{this.scene.y_max=this.scene.y_max*-1;this.scene.y_min=this.scene.y_short[3]*-1;this.scene.z_max=this.scene.z_min*-1;this.scene.z_min=this.scene.z_max*-1;geo.rotateY(180*THREE.Math.DEG2RAD);geo.rotateZ(180*THREE.Math.DEG2RAD);}}}
else{if(Math.abs(this.scene.z_short[2]-this.scene.z_max)>Math.abs(this.scene.z_short[2]-this.scene.z_min)){if(Math.abs(this.scene.x_short[2]-this.scene.x_max)>Math.abs(this.scene.x_short[2]-this.scene.x_min)){this.scene.x_min=this.scene.x_short[2];var temp=this.scene.y_max;var temp2=this.scene.y_min;this.scene.y_max=this.scene.x_max;this.scene.y_min=this.scene.x_min;this.scene.x_max=temp;this.scene.x_min=temp2;geo.rotateZ(90*THREE.Math.DEG2RAD);}
else{this.scene.x_max=this.scene.x_short[2];var temp=this.scene.y_max;var temp2=this.scene.y_min;this.scene.y_max=this.scene.x_min*-1;this.scene.y_min=this.scene.x_max*-1;this.scene.x_max=temp;this.scene.x_min=temp2;geo.rotateZ(-90*THREE.Math.DEG2RAD);}}
else{if(Math.abs(this.scene.x_short[3]-this.scene.x_max)>Math.abs(this.scene.x_short[3]-this.scene.x_min)){this.scene.x_min=this.scene.x_short[3];var temp=this.scene.y_max;var temp2=this.scene.y_min;this.scene.y_max=this.scene.x_max;this.scene.y_min=this.scene.x_min;this.scene.x_max=temp;this.scene.x_min=temp2;this.scene.z_max=this.scene.z_min*-1;this.scene.z_min=this.scene.z_max*-1;geo.rotateZ(90*THREE.Math.DEG2RAD);geo.rotateY(180*THREE.Math.DEG2RAD);}
else{this.scene.x_max=this.scene.x_short[3];var temp=this.scene.y_max;var temp2=this.scene.y_min;this.scene.y_max=this.scene.x_min*-1;this.scene.y_min=this.scene.x_max*-1;this.scene.x_max=temp;this.scene.x_min=temp2;this.scene.z_max=this.scene.z_min*-1;this.scene.z_min=this.scene.z_max*-1;geo.rotateZ(-90*THREE.Math.DEG2RAD);geo.rotateY(180*THREE.Math.DEG2RAD);}}}}}
this.scene.x_max=geo.scale.x*this.scene.x_max;this.scene.x_min=geo.scale.x*this.scene.x_min;this.scene.y_max=geo.scale.y*this.scene.y_max;this.scene.y_min=geo.scale.y*this.scene.y_min;this.scene.z_max=geo.scale.z*this.scene.z_max;this.scene.z_min=geo.scale.z*this.scene.z_min;this.scene.posi[0]=geo.position.x;this.scene.posi[1]=geo.position.y;this.scene.posi[2]=geo.position.z;this.scene.rota[0]=geo.rotation.x;this.scene.rota[1]=geo.rotation.y;this.scene.rota[2]=geo.rotation.z;this.scene.scal[0]=geo.scale.x;this.scene.scal[1]=geo.scale.y;this.scene.scal[2]=geo.scale.z;var scale=Math.abs(this.scene.z_max)+Math.abs(this.scene.z_min);var newPos=new THREE.Vector3(scale,scale/2,scale);this.execute(new SetPositionCommand(this.camera,newPos));},getModel:function(){var array=new Object();array[0]=this.scene.x_max;array[1]=this.scene.x_min;array[2]=this.scene.y_max;array[3]=this.scene.y_min;array[4]=this.scene.z_max;array[5]=this.scene.z_min;return array;},getModelPosition:function(){return this.scene.posi;},getModelRotation:function(){return this.scene.rota;},getModelScale:function(){return this.scene.scal;},setMenubar:function(file){var i=0;while(this.scene.menu[i]!==null){i++;}
this.scene.menu[i]=file;},getMenubar:function(){return this.scene.menu;}};var Config=function(name){var storage={'autosave':true,'theme':'/static/css/light.css','project/renderer':'WebGLRenderer','project/renderer/antialias':true,'project/renderer/gammaInput':false,'project/renderer/gammaOutput':false,'project/renderer/shadows':true,'project/vr':false,'settings/history':false};if(window.localStorage[name]===undefined){window.localStorage[name]=JSON.stringify(storage);}else{var data=JSON.parse(window.localStorage[name]);for(var key in data){storage[key]=data[key];}}
return{getKey:function(key){return storage[key];},setKey:function(){for(var i=0,l=arguments.length;i<l;i+=2){storage[arguments[i]]=arguments[i+1];}
window.localStorage[name]=JSON.stringify(storage);console.log('['+/\d\d\:\d\d\:\d\d/.exec(new Date())[0]+']','Saved config to LocalStorage.');},clear:function(){delete window.localStorage[name];}};};History=function(editor){this.editor=editor;this.undos=[];this.redos=[];this.lastCmdTime=new Date();this.idCounter=0;this.historyDisabled=false;this.config=editor.config;Command(editor);var scope=this;this.editor.signals.startPlayer.add(function(){scope.historyDisabled=true;});this.editor.signals.stopPlayer.add(function(){scope.historyDisabled=false;});};History.prototype={execute:function(cmd,optionalName){var lastCmd=this.undos[this.undos.length-1];var timeDifference=new Date().getTime()-this.lastCmdTime.getTime();var isUpdatableCmd=lastCmd&&lastCmd.updatable&&cmd.updatable&&lastCmd.object===cmd.object&&lastCmd.type===cmd.type&&lastCmd.script===cmd.script&&lastCmd.attributeName===cmd.attributeName;if(isUpdatableCmd&&cmd.type==="SetScriptValueCommand"){lastCmd.update(cmd);cmd=lastCmd;}else if(isUpdatableCmd&&timeDifference<500){lastCmd.update(cmd);cmd=lastCmd;}else{this.undos.push(cmd);cmd.id=++this.idCounter;}
cmd.name=(optionalName!==undefined)?optionalName:cmd.name;cmd.execute();cmd.inMemory=true;if(this.config.getKey('settings/history')){cmd.json=cmd.toJSON();}
this.lastCmdTime=new Date();this.redos=[];this.editor.signals.historyChanged.dispatch(cmd);},undo:function(){if(this.historyDisabled){alert("Undo/Redo disabled while scene is playing.");return;}
var cmd=undefined;if(this.undos.length>0){cmd=this.undos.pop();if(cmd.inMemory===false){cmd.fromJSON(cmd.json);}}
if(cmd!==undefined){cmd.undo();this.redos.push(cmd);this.editor.signals.historyChanged.dispatch(cmd);}
return cmd;},redo:function(){if(this.historyDisabled){alert("Undo/Redo disabled while scene is playing.");return;}
var cmd=undefined;if(this.redos.length>0){cmd=this.redos.pop();if(cmd.inMemory===false){cmd.fromJSON(cmd.json);}}
if(cmd!==undefined){cmd.execute();this.undos.push(cmd);this.editor.signals.historyChanged.dispatch(cmd);}
return cmd;},toJSON:function(){var history={};history.undos=[];history.redos=[];if(!this.config.getKey('settings/history')){return history;}
for(var i=0;i<this.undos.length;i++){if(this.undos[i].hasOwnProperty("json")){history.undos.push(this.undos[i].json);}}
for(var i=0;i<this.redos.length;i++){if(this.redos[i].hasOwnProperty("json")){history.redos.push(this.redos[i].json);}}
return history;},fromJSON:function(json){if(json===undefined)return;for(var i=0;i<json.undos.length;i++){var cmdJSON=json.undos[i];var cmd=new window[cmdJSON.type]();cmd.json=cmdJSON;cmd.id=cmdJSON.id;cmd.name=cmdJSON.name;this.undos.push(cmd);this.idCounter=(cmdJSON.id>this.idCounter)?cmdJSON.id:this.idCounter;}
for(var i=0;i<json.redos.length;i++){var cmdJSON=json.redos[i];var cmd=new window[cmdJSON.type]();cmd.json=cmdJSON;cmd.id=cmdJSON.id;cmd.name=cmdJSON.name;this.redos.push(cmd);this.idCounter=(cmdJSON.id>this.idCounter)?cmdJSON.id:this.idCounter;}
this.editor.signals.historyChanged.dispatch(this.undos[this.undos.length-1]);},clear:function(){this.undos=[];this.redos=[];this.idCounter=0;this.editor.signals.historyChanged.dispatch();},goToState:function(id){if(this.historyDisabled){alert("Undo/Redo disabled while scene is playing.");return;}
this.editor.signals.sceneGraphChanged.active=false;this.editor.signals.historyChanged.active=false;var cmd=this.undos.length>0?this.undos[this.undos.length-1]:undefined;if(cmd===undefined||id>cmd.id){cmd=this.redo();while(cmd!==undefined&&id>cmd.id){cmd=this.redo();}}else{while(true){cmd=this.undos[this.undos.length-1];if(cmd===undefined||id===cmd.id)break;this.undo();}}
this.editor.signals.sceneGraphChanged.active=true;this.editor.signals.historyChanged.active=true;this.editor.signals.sceneGraphChanged.dispatch();this.editor.signals.historyChanged.dispatch(cmd);},enableSerialization:function(id){this.goToState(-1);this.editor.signals.sceneGraphChanged.active=false;this.editor.signals.historyChanged.active=false;var cmd=this.redo();while(cmd!==undefined){if(!cmd.hasOwnProperty("json")){cmd.json=cmd.toJSON();}
cmd=this.redo();}
this.editor.signals.sceneGraphChanged.active=true;this.editor.signals.historyChanged.active=true;this.goToState(id);}};var Command=function(editorRef){this.id=-1;this.inMemory=false;this.updatable=false;this.type='';this.name='';if(editorRef!==undefined){Command.editor=editorRef;}
this.editor=Command.editor;};Command.prototype.toJSON=function(){var output={};output.type=this.type;output.id=this.id;output.name=this.name;return output;};Command.prototype.fromJSON=function(json){this.inMemory=true;this.type=json.type;this.id=json.id;this.name=json.name;};var AddObjectCommand=function(object){Command.call(this);this.type='AddObjectCommand';this.object=object;if(object!==undefined){this.name='Add Object: '+object.name;}};AddObjectCommand.prototype={execute:function(){this.editor.addObject(this.object);this.editor.select(this.object);},undo:function(){this.editor.removeObject(this.object);this.editor.deselect();},toJSON:function(){var output=Command.prototype.toJSON.call(this);output.object=this.object.toJSON();return output;},fromJSON:function(json){Command.prototype.fromJSON.call(this,json);this.object=this.editor.objectByUuid(json.object.object.uuid);if(this.object===undefined){var loader=new THREE.ObjectLoader();this.object=loader.parse(json.object);}}};var RemoveObjectCommand=function(object){Command.call(this);this.type='RemoveObjectCommand';this.name='Remove Object';this.object=object;this.parent=(object!==undefined)?object.parent:undefined;if(this.parent!==undefined){this.index=this.parent.children.indexOf(this.object);}};RemoveObjectCommand.prototype={execute:function(){var scope=this.editor;this.object.traverse(function(child){scope.removeHelper(child);});this.parent.remove(this.object);this.editor.select(this.parent);this.editor.signals.objectRemoved.dispatch(this.object);this.editor.signals.sceneGraphChanged.dispatch();},undo:function(){var scope=this.editor;this.object.traverse(function(child){if(child.geometry!==undefined)scope.addGeometry(child.geometry);if(child.material!==undefined)scope.addMaterial(child.material);scope.addHelper(child);});this.parent.children.splice(this.index,0,this.object);this.object.parent=this.parent;this.editor.select(this.object);this.editor.signals.objectAdded.dispatch(this.object);this.editor.signals.sceneGraphChanged.dispatch();},toJSON:function(){var output=Command.prototype.toJSON.call(this);output.object=this.object.toJSON();output.index=this.index;output.parentUuid=this.parent.uuid;return output;},fromJSON:function(json){Command.prototype.fromJSON.call(this,json);this.parent=this.editor.objectByUuid(json.parentUuid);if(this.parent===undefined){this.parent=this.editor.scene;}
this.index=json.index;this.object=this.editor.objectByUuid(json.object.object.uuid);if(this.object===undefined){var loader=new THREE.ObjectLoader();this.object=loader.parse(json.object);}}};var MoveObjectCommand=function(object,newParent,newBefore){Command.call(this);this.type='MoveObjectCommand';this.name='Move Object';this.object=object;this.oldParent=(object!==undefined)?object.parent:undefined;this.oldIndex=(this.oldParent!==undefined)?this.oldParent.children.indexOf(this.object):undefined;this.newParent=newParent;if(newBefore!==undefined){this.newIndex=(newParent!==undefined)?newParent.children.indexOf(newBefore):undefined;}else{this.newIndex=(newParent!==undefined)?newParent.children.length:undefined;}
if(this.oldParent===this.newParent&&this.newIndex>this.oldIndex){this.newIndex--;}
this.newBefore=newBefore;};MoveObjectCommand.prototype={execute:function(){this.oldParent.remove(this.object);var children=this.newParent.children;children.splice(this.newIndex,0,this.object);this.object.parent=this.newParent;this.editor.signals.sceneGraphChanged.dispatch();},undo:function(){this.newParent.remove(this.object);var children=this.oldParent.children;children.splice(this.oldIndex,0,this.object);this.object.parent=this.oldParent;this.editor.signals.sceneGraphChanged.dispatch();},toJSON:function(){var output=Command.prototype.toJSON.call(this);output.objectUuid=this.object.uuid;output.newParentUuid=this.newParent.uuid;output.oldParentUuid=this.oldParent.uuid;output.newIndex=this.newIndex;output.oldIndex=this.oldIndex;return output;},fromJSON:function(json){Command.prototype.fromJSON.call(this,json);this.object=this.editor.objectByUuid(json.objectUuid);this.oldParent=this.editor.objectByUuid(json.oldParentUuid);if(this.oldParent===undefined){this.oldParent=this.editor.scene;}
this.newParent=this.editor.objectByUuid(json.newParentUuid);if(this.newParent===undefined){this.newParent=this.editor.scene;}
this.newIndex=json.newIndex;this.oldIndex=json.oldIndex;}};var SetPositionCommand=function(object,newPosition,optionalOldPosition){Command.call(this);this.type='SetPositionCommand';this.name='Set Position';this.updatable=true;this.object=object;if(object!==undefined&&newPosition!==undefined){this.oldPosition=object.position.clone();this.newPosition=newPosition.clone();}
if(optionalOldPosition!==undefined){this.oldPosition=optionalOldPosition.clone();}};SetPositionCommand.prototype={execute:function(){this.object.position.copy(this.newPosition);this.object.updateMatrixWorld(true);this.editor.signals.objectChanged.dispatch(this.object);},undo:function(){this.object.position.copy(this.oldPosition);this.object.updateMatrixWorld(true);this.editor.signals.objectChanged.dispatch(this.object);},update:function(command){this.newPosition.copy(command.newPosition);},toJSON:function(){var output=Command.prototype.toJSON.call(this);output.objectUuid=this.object.uuid;output.oldPosition=this.oldPosition.toArray();output.newPosition=this.newPosition.toArray();return output;},fromJSON:function(json){Command.prototype.fromJSON.call(this,json);this.object=this.editor.objectByUuid(json.objectUuid);this.oldPosition=new THREE.Vector3().fromArray(json.oldPosition);this.newPosition=new THREE.Vector3().fromArray(json.newPosition);}};var SetRotationCommand=function(object,newRotation,optionalOldRotation){Command.call(this);this.type='SetRotationCommand';this.name='Set Rotation';this.updatable=true;this.object=object;if(object!==undefined&&newRotation!==undefined){this.oldRotation=object.rotation.clone();this.newRotation=newRotation.clone();}
if(optionalOldRotation!==undefined){this.oldRotation=optionalOldRotation.clone();}};SetRotationCommand.prototype={execute:function(){this.object.rotation.copy(this.newRotation);this.object.updateMatrixWorld(true);this.editor.signals.objectChanged.dispatch(this.object);},undo:function(){this.object.rotation.copy(this.oldRotation);this.object.updateMatrixWorld(true);this.editor.signals.objectChanged.dispatch(this.object);},update:function(command){this.newRotation.copy(command.newRotation);},toJSON:function(){var output=Command.prototype.toJSON.call(this);output.objectUuid=this.object.uuid;output.oldRotation=this.oldRotation.toArray();output.newRotation=this.newRotation.toArray();return output;},fromJSON:function(json){Command.prototype.fromJSON.call(this,json);this.object=this.editor.objectByUuid(json.objectUuid);this.oldRotation=new THREE.Euler().fromArray(json.oldRotation);this.newRotation=new THREE.Euler().fromArray(json.newRotation);}};var SetScaleCommand=function(object,newScale,optionalOldScale){Command.call(this);this.type='SetScaleCommand';this.name='Set Scale';this.updatable=true;this.object=object;if(object!==undefined&&newScale!==undefined){this.oldScale=object.scale.clone();this.newScale=newScale.clone();}
if(optionalOldScale!==undefined){this.oldScale=optionalOldScale.clone();}};SetScaleCommand.prototype={execute:function(){this.object.scale.copy(this.newScale);this.object.updateMatrixWorld(true);this.editor.signals.objectChanged.dispatch(this.object);},undo:function(){this.object.scale.copy(this.oldScale);this.object.updateMatrixWorld(true);this.editor.signals.objectChanged.dispatch(this.object);},update:function(command){this.newScale.copy(command.newScale);},toJSON:function(){var output=Command.prototype.toJSON.call(this);output.objectUuid=this.object.uuid;output.oldScale=this.oldScale.toArray();output.newScale=this.newScale.toArray();return output;},fromJSON:function(json){Command.prototype.fromJSON.call(this,json);this.object=this.editor.objectByUuid(json.objectUuid);this.oldScale=new THREE.Vector3().fromArray(json.oldScale);this.newScale=new THREE.Vector3().fromArray(json.newScale);}};var SetValueCommand=function(object,attributeName,newValue){Command.call(this);this.type='SetValueCommand';this.name='Set '+attributeName;this.updatable=true;this.object=object;this.attributeName=attributeName;this.oldValue=(object!==undefined)?object[attributeName]:undefined;this.newValue=newValue;};SetValueCommand.prototype={execute:function(){this.object[this.attributeName]=this.newValue;this.editor.signals.objectChanged.dispatch(this.object);},undo:function(){this.object[this.attributeName]=this.oldValue;this.editor.signals.objectChanged.dispatch(this.object);},update:function(cmd){this.newValue=cmd.newValue;},toJSON:function(){var output=Command.prototype.toJSON.call(this);output.objectUuid=this.object.uuid;output.attributeName=this.attributeName;output.oldValue=this.oldValue;output.newValue=this.newValue;return output;},fromJSON:function(json){Command.prototype.fromJSON.call(this,json);this.attributeName=json.attributeName;this.oldValue=json.oldValue;this.newValue=json.newValue;this.object=this.editor.objectByUuid(json.objectUuid);}};var SetUuidCommand=function(object,newUuid){Command.call(this);this.type='SetUuidCommand';this.name='Update UUID';this.object=object;this.oldUuid=(object!==undefined)?object.uuid:undefined;this.newUuid=newUuid;};SetUuidCommand.prototype={execute:function(){this.object.uuid=this.newUuid;this.editor.signals.objectChanged.dispatch(this.object);this.editor.signals.sceneGraphChanged.dispatch();},undo:function(){this.object.uuid=this.oldUuid;this.editor.signals.objectChanged.dispatch(this.object);this.editor.signals.sceneGraphChanged.dispatch();},toJSON:function(){var output=Command.prototype.toJSON.call(this);output.oldUuid=this.oldUuid;output.newUuid=this.newUuid;return output;},fromJSON:function(json){Command.prototype.fromJSON.call(this,json);this.oldUuid=json.oldUuid;this.newUuid=json.newUuid;this.object=this.editor.objectByUuid(json.oldUuid);if(this.object===undefined){this.object=this.editor.objectByUuid(json.newUuid);}}};var SetColorCommand=function(object,attributeName,newValue){Command.call(this);this.type='SetColorCommand';this.name='Set '+attributeName;this.updatable=true;this.object=object;this.attributeName=attributeName;this.oldValue=(object!==undefined)?this.object[this.attributeName].getHex():undefined;this.newValue=newValue;};SetColorCommand.prototype={execute:function(){this.object[this.attributeName].setHex(this.newValue);this.editor.signals.objectChanged.dispatch(this.object);},undo:function(){this.object[this.attributeName].setHex(this.oldValue);this.editor.signals.objectChanged.dispatch(this.object);},update:function(cmd){this.newValue=cmd.newValue;},toJSON:function(){var output=Command.prototype.toJSON.call(this);output.objectUuid=this.object.uuid;output.attributeName=this.attributeName;output.oldValue=this.oldValue;output.newValue=this.newValue;return output;},fromJSON:function(json){Command.prototype.fromJSON.call(this,json);this.object=this.editor.objectByUuid(json.objectUuid);this.attributeName=json.attributeName;this.oldValue=json.oldValue;this.newValue=json.newValue;}};var SetGeometryCommand=function(object,newGeometry){Command.call(this);this.type='SetGeometryCommand';this.name='Set Geometry';this.updatable=true;this.object=object;this.oldGeometry=(object!==undefined)?object.geometry:undefined;this.newGeometry=newGeometry;};SetGeometryCommand.prototype={execute:function(){this.object.geometry.dispose();this.object.geometry=this.newGeometry;this.object.geometry.computeBoundingSphere();this.editor.signals.geometryChanged.dispatch(this.object);this.editor.signals.sceneGraphChanged.dispatch();},undo:function(){this.object.geometry.dispose();this.object.geometry=this.oldGeometry;this.object.geometry.computeBoundingSphere();this.editor.signals.geometryChanged.dispatch(this.object);this.editor.signals.sceneGraphChanged.dispatch();},update:function(cmd){this.newGeometry=cmd.newGeometry;},toJSON:function(){var output=Command.prototype.toJSON.call(this);output.objectUuid=this.object.uuid;output.oldGeometry=this.object.geometry.toJSON();output.newGeometry=this.newGeometry.toJSON();return output;},fromJSON:function(json){Command.prototype.fromJSON.call(this,json);this.object=this.editor.objectByUuid(json.objectUuid);this.oldGeometry=parseGeometry(json.oldGeometry);this.newGeometry=parseGeometry(json.newGeometry);function parseGeometry(data){var loader=new THREE.ObjectLoader();return loader.parseGeometries([data])[data.uuid];}}};var SetGeometryValueCommand=function(object,attributeName,newValue){Command.call(this);this.type='SetGeometryValueCommand';this.name='Set Geometry.'+attributeName;this.object=object;this.attributeName=attributeName;this.oldValue=(object!==undefined)?object.geometry[attributeName]:undefined;this.newValue=newValue;};SetGeometryValueCommand.prototype={execute:function(){this.object.geometry[this.attributeName]=this.newValue;this.editor.signals.objectChanged.dispatch(this.object);this.editor.signals.geometryChanged.dispatch();this.editor.signals.sceneGraphChanged.dispatch();},undo:function(){this.object.geometry[this.attributeName]=this.oldValue;this.editor.signals.objectChanged.dispatch(this.object);this.editor.signals.geometryChanged.dispatch();this.editor.signals.sceneGraphChanged.dispatch();},toJSON:function(){var output=Command.prototype.toJSON.call(this);output.objectUuid=this.object.uuid;output.attributeName=this.attributeName;output.oldValue=this.oldValue;output.newValue=this.newValue;return output;},fromJSON:function(json){Command.prototype.fromJSON.call(this,json);this.object=this.editor.objectByUuid(json.objectUuid);this.attributeName=json.attributeName;this.oldValue=json.oldValue;this.newValue=json.newValue;}};var MultiCmdsCommand=function(cmdArray){Command.call(this);this.type='MultiCmdsCommand';this.name='Multiple Changes';this.cmdArray=(cmdArray!==undefined)?cmdArray:[];};MultiCmdsCommand.prototype={execute:function(){this.editor.signals.sceneGraphChanged.active=false;for(var i=0;i<this.cmdArray.length;i++){this.cmdArray[i].execute();}
this.editor.signals.sceneGraphChanged.active=true;this.editor.signals.sceneGraphChanged.dispatch();},undo:function(){this.editor.signals.sceneGraphChanged.active=false;for(var i=this.cmdArray.length-1;i>=0;i--){this.cmdArray[i].undo();}
this.editor.signals.sceneGraphChanged.active=true;this.editor.signals.sceneGraphChanged.dispatch();},toJSON:function(){var output=Command.prototype.toJSON.call(this);var cmds=[];for(var i=0;i<this.cmdArray.length;i++){cmds.push(this.cmdArray[i].toJSON());}
output.cmds=cmds;return output;},fromJSON:function(json){Command.prototype.fromJSON.call(this,json);var cmds=json.cmds;for(var i=0;i<cmds.length;i++){var cmd=new window[cmds[i].type]();cmd.fromJSON(cmds[i]);this.cmdArray.push(cmd);}}};var AddScriptCommand=function(object,script){Command.call(this);this.type='AddScriptCommand';this.name='Add Script';this.object=object;this.script=script;};AddScriptCommand.prototype={execute:function(){if(this.editor.scripts[this.object.uuid]===undefined){this.editor.scripts[this.object.uuid]=[];}
this.editor.scripts[this.object.uuid].push(this.script);this.editor.signals.scriptAdded.dispatch(this.script);},undo:function(){if(this.editor.scripts[this.object.uuid]===undefined)return;var index=this.editor.scripts[this.object.uuid].indexOf(this.script);if(index!==-1){this.editor.scripts[this.object.uuid].splice(index,1);}
this.editor.signals.scriptRemoved.dispatch(this.script);},toJSON:function(){var output=Command.prototype.toJSON.call(this);output.objectUuid=this.object.uuid;output.script=this.script;return output;},fromJSON:function(json){Command.prototype.fromJSON.call(this,json);this.script=json.script;this.object=this.editor.objectByUuid(json.objectUuid);}};var RemoveScriptCommand=function(object,script){Command.call(this);this.type='RemoveScriptCommand';this.name='Remove Script';this.object=object;this.script=script;if(this.object&&this.script){this.index=this.editor.scripts[this.object.uuid].indexOf(this.script);}};RemoveScriptCommand.prototype={execute:function(){if(this.editor.scripts[this.object.uuid]===undefined)return;if(this.index!==-1){this.editor.scripts[this.object.uuid].splice(this.index,1);}
this.editor.signals.scriptRemoved.dispatch(this.script);},undo:function(){if(this.editor.scripts[this.object.uuid]===undefined){this.editor.scripts[this.object.uuid]=[];}
this.editor.scripts[this.object.uuid].splice(this.index,0,this.script);this.editor.signals.scriptAdded.dispatch(this.script);},toJSON:function(){var output=Command.prototype.toJSON.call(this);output.objectUuid=this.object.uuid;output.script=this.script;output.index=this.index;return output;},fromJSON:function(json){Command.prototype.fromJSON.call(this,json);this.script=json.script;this.index=json.index;this.object=this.editor.objectByUuid(json.objectUuid);}};var SetScriptValueCommand=function(object,script,attributeName,newValue){Command.call(this);this.type='SetScriptValueCommand';this.name='Set Script.'+attributeName;this.updatable=true;this.object=object;this.script=script;this.attributeName=attributeName;this.oldValue=(script!==undefined)?script[this.attributeName]:undefined;this.newValue=newValue;};SetScriptValueCommand.prototype={execute:function(){this.script[this.attributeName]=this.newValue;this.editor.signals.scriptChanged.dispatch();},undo:function(){this.script[this.attributeName]=this.oldValue;this.editor.signals.scriptChanged.dispatch();},update:function(cmd){this.newValue=cmd.newValue;},toJSON:function(){var output=Command.prototype.toJSON.call(this);output.objectUuid=this.object.uuid;output.index=this.editor.scripts[this.object.uuid].indexOf(this.script);output.attributeName=this.attributeName;output.oldValue=this.oldValue;output.newValue=this.newValue;return output;},fromJSON:function(json){Command.prototype.fromJSON.call(this,json);this.oldValue=json.oldValue;this.newValue=json.newValue;this.attributeName=json.attributeName;this.object=this.editor.objectByUuid(json.objectUuid);this.script=this.editor.scripts[json.objectUuid][json.index];}};var SetMaterialCommand=function(object,newMaterial,materialSlot){Command.call(this);this.type='SetMaterialCommand';this.name='New Material';this.object=object;this.materialSlot=materialSlot;this.oldMaterial=this.editor.getObjectMaterial(object,materialSlot);this.newMaterial=newMaterial;};SetMaterialCommand.prototype={execute:function(){this.editor.setObjectMaterial(this.object,this.materialSlot,this.newMaterial);this.editor.signals.materialChanged.dispatch(this.newMaterial);},undo:function(){this.editor.setObjectMaterial(this.object,this.materialSlot,this.oldMaterial);this.editor.signals.materialChanged.dispatch(this.oldMaterial);},toJSON:function(){var output=Command.prototype.toJSON.call(this);output.objectUuid=this.object.uuid;output.oldMaterial=this.oldMaterial.toJSON();output.newMaterial=this.newMaterial.toJSON();return output;},fromJSON:function(json){Command.prototype.fromJSON.call(this,json);this.object=this.editor.objectByUuid(json.objectUuid);this.oldMaterial=parseMaterial(json.oldMaterial);this.newMaterial=parseMaterial(json.newMaterial);function parseMaterial(json){var loader=new THREE.ObjectLoader();var images=loader.parseImages(json.images);var textures=loader.parseTextures(json.textures,images);var materials=loader.parseMaterials([json],textures);return materials[json.uuid];}}};var SetMaterialValueCommand=function(object,attributeName,newValue,materialSlot){Command.call(this);this.type='SetMaterialValueCommand';this.name='Set Material.'+attributeName;this.updatable=true;this.object=object;this.material=this.editor.getObjectMaterial(object,materialSlot);this.oldValue=(this.material!==undefined)?this.material[attributeName]:undefined;this.newValue=newValue;this.attributeName=attributeName;};SetMaterialValueCommand.prototype={execute:function(){this.material[this.attributeName]=this.newValue;this.material.needsUpdate=true;this.editor.signals.objectChanged.dispatch(this.object);},undo:function(){this.material[this.attributeName]=this.oldValue;this.material.needsUpdate=true;this.editor.signals.objectChanged.dispatch(this.object);this.editor.signals.materialChanged.dispatch(this.material);},update:function(cmd){this.newValue=cmd.newValue;},toJSON:function(){var output=Command.prototype.toJSON.call(this);output.objectUuid=this.object.uuid;output.attributeName=this.attributeName;output.oldValue=this.oldValue;output.newValue=this.newValue;return output;},fromJSON:function(json){Command.prototype.fromJSON.call(this,json);this.attributeName=json.attributeName;this.oldValue=json.oldValue;this.newValue=json.newValue;this.object=this.editor.objectByUuid(json.objectUuid);}};var SetMaterialColorCommand=function(object,attributeName,newValue,materialSlot){Command.call(this);this.type='SetMaterialColorCommand';this.name='Set Material.'+attributeName;this.updatable=true;this.object=object;this.material=this.editor.getObjectMaterial(object,materialSlot);this.oldValue=(this.material!==undefined)?this.material[attributeName].getHex():undefined;this.newValue=newValue;this.attributeName=attributeName;};SetMaterialColorCommand.prototype={execute:function(){this.material[this.attributeName].setHex(this.newValue);this.editor.signals.materialChanged.dispatch(this.material);},undo:function(){this.material[this.attributeName].setHex(this.oldValue);this.editor.signals.materialChanged.dispatch(this.material);},update:function(cmd){this.newValue=cmd.newValue;},toJSON:function(){var output=Command.prototype.toJSON.call(this);output.objectUuid=this.object.uuid;output.attributeName=this.attributeName;output.oldValue=this.oldValue;output.newValue=this.newValue;return output;},fromJSON:function(json){Command.prototype.fromJSON.call(this,json);this.object=this.editor.objectByUuid(json.objectUuid);this.attributeName=json.attributeName;this.oldValue=json.oldValue;this.newValue=json.newValue;}};var SetMaterialMapCommand=function(object,mapName,newMap,materialSlot){Command.call(this);this.type='SetMaterialMapCommand';this.name='Set Material.'+mapName;this.object=object;this.material=this.editor.getObjectMaterial(object,materialSlot);this.oldMap=(object!==undefined)?this.material[mapName]:undefined;this.newMap=newMap;this.mapName=mapName;};SetMaterialMapCommand.prototype={execute:function(){this.material[this.mapName]=this.newMap;this.material.needsUpdate=true;this.editor.signals.materialChanged.dispatch(this.material);},undo:function(){this.material[this.mapName]=this.oldMap;this.material.needsUpdate=true;this.editor.signals.materialChanged.dispatch(this.material);},toJSON:function(){var output=Command.prototype.toJSON.call(this);output.objectUuid=this.object.uuid;output.mapName=this.mapName;output.newMap=serializeMap(this.newMap);output.oldMap=serializeMap(this.oldMap);return output;function serializeMap(map){if(map===null||map===undefined)return null;var meta={geometries:{},materials:{},textures:{},images:{}};var json=map.toJSON(meta);var images=extractFromCache(meta.images);if(images.length>0)json.images=images;json.sourceFile=map.sourceFile;return json;}
function extractFromCache(cache){var values=[];for(var key in cache){var data=cache[key];delete data.metadata;values.push(data);}
return values;}},fromJSON:function(json){Command.prototype.fromJSON.call(this,json);this.object=this.editor.objectByUuid(json.objectUuid);this.mapName=json.mapName;this.oldMap=parseTexture(json.oldMap);this.newMap=parseTexture(json.newMap);function parseTexture(json){var map=null;if(json!==null){var loader=new THREE.ObjectLoader();var images=loader.parseImages(json.images);var textures=loader.parseTextures([json],images);map=textures[json.uuid];map.sourceFile=json.sourceFile;}
return map;}}};var SetSceneCommand=function(scene){Command.call(this);this.type='SetSceneCommand';this.name='Set Scene';this.cmdArray=[];if(scene!==undefined){this.cmdArray.push(new SetUuidCommand(this.editor.scene,scene.uuid));this.cmdArray.push(new SetValueCommand(this.editor.scene,'name',scene.name));this.cmdArray.push(new SetValueCommand(this.editor.scene,'userData',JSON.parse(JSON.stringify(scene.userData))));while(scene.children.length>0){var child=scene.children.pop();this.cmdArray.push(new AddObjectCommand(child));}}};SetSceneCommand.prototype={execute:function(){this.editor.signals.sceneGraphChanged.active=false;for(var i=0;i<this.cmdArray.length;i++){this.cmdArray[i].execute();}
this.editor.signals.sceneGraphChanged.active=true;this.editor.signals.sceneGraphChanged.dispatch();},undo:function(){this.editor.signals.sceneGraphChanged.active=false;for(var i=this.cmdArray.length-1;i>=0;i--){this.cmdArray[i].undo();}
this.editor.signals.sceneGraphChanged.active=true;this.editor.signals.sceneGraphChanged.dispatch();},toJSON:function(){var output=Command.prototype.toJSON.call(this);var cmds=[];for(var i=0;i<this.cmdArray.length;i++){cmds.push(this.cmdArray[i].toJSON());}
output.cmds=cmds;return output;},fromJSON:function(json){Command.prototype.fromJSON.call(this,json);var cmds=json.cmds;for(var i=0;i<cmds.length;i++){var cmd=new window[cmds[i].type]();cmd.fromJSON(cmds[i]);this.cmdArray.push(cmd);}}};var Storage=function(){var indexedDB=window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB;if(indexedDB===undefined){console.warn('Storage: IndexedDB not available.');return{init:function(){},get:function(){},set:function(){},clear:function(){}};}
var name='threejs-editor';var version=1;var database;return{init:function(callback){var request=indexedDB.open(name,version);request.onupgradeneeded=function(event){var db=event.target.result;if(db.objectStoreNames.contains('states')===false){db.createObjectStore('states');}};request.onsuccess=function(event){database=event.target.result;callback();};request.onerror=function(event){console.error('IndexedDB',event);};},get:function(uuid,callback){if(uuid!="None"){$.ajax({url:'/rest/resume_state/'+uuid,data:{format:'json'},dataType:'json',success:function(data){callback(data);},type:'GET'});}else{var transaction=database.transaction(['states'],'readwrite');var objectStore=transaction.objectStore('states');var request=objectStore.get(0);request.onsuccess=function(event){callback(event.target.result);};}},set:function(data,callback){var start=performance.now();$.ajax({url:'/rest/save_state',data:JSON.stringify(data),contentType:"application/json",dataType:"json",success:function(data){if(data.results=="SUCCESS"){console.log('['+/\d\d\:\d\d\:\d\d/.exec(new Date())[0]+']','Saved state to server as UUID',data.uuid,(performance.now()-start).toFixed(2)+'ms');if(editor.project_uuid==""){editor.project_uuid=data.uuid;}}else{if(data.reason=="IOERROR"){if(data.error==13){console.error('['+/\d\d\:\d\d\:\d\d/.exec(new Date())[0]+']','Failed to save state to server. The server doesn\'t have permission to write to disk.');}else if(data.error==28){console.error('['+/\d\d\:\d\d\:\d\d/.exec(new Date())[0]+']','Failed to save state to server. The server doesn\'t have enough space to save to disk.');}else{console.error('['+/\d\d\:\d\d\:\d\d/.exec(new Date())[0]+']','Failed to save state to server. There was an I/O Error.',data.errorstring);}}else{console.error('['+/\d\d\:\d\d\:\d\d/.exec(new Date())[0]+']','Failed to save state to server.',data.reason,data.error);}}},error:function(){console.error('['+/\d\d\:\d\d\:\d\d/.exec(new Date())[0]+']','Failed to save state to server. ');},type:'POST'});var transaction=database.transaction(['states'],'readwrite');var objectStore=transaction.objectStore('states');var request=objectStore.put(data,0);request.onsuccess=function(event){console.log('['+/\d\d\:\d\d\:\d\d/.exec(new Date())[0]+']','Saved state to IndexedDB. '+(performance.now()-start).toFixed(2)+'ms');};},clear:function(){if(database===undefined)return;var transaction=database.transaction(['states'],'readwrite');var objectStore=transaction.objectStore('states');var request=objectStore.clear();request.onsuccess=function(event){console.log('['+/\d\d\:\d\d\:\d\d/.exec(new Date())[0]+']','Cleared IndexedDB.');};}};};var Player=function(editor){var signals=editor.signals;var container=new UI.Panel();container.setId('player');container.setPosition('absolute');container.setDisplay('none');var player=new APP.Player();container.dom.appendChild(player.dom);window.addEventListener('resize',function(){player.setSize(container.dom.clientWidth,container.dom.clientHeight);});signals.startPlayer.add(function(){container.setDisplay('');player.load(editor.toJSON());player.setSize(container.dom.clientWidth,container.dom.clientHeight);player.play();});signals.stopPlayer.add(function(){container.setDisplay('none');player.stop();player.dispose();});return container;};var Script=function(editor){var signals=editor.signals;var container=new UI.Panel();container.setId('script');container.setPosition('absolute');container.setBackgroundColor('#272822');container.setDisplay('none');var header=new UI.Panel();header.setPadding('10px');container.add(header);var title=new UI.Text().setColor('#fff');header.add(title);var buttonSVG=(function(){var svg=document.createElementNS('http://www.w3.org/2000/svg','svg');svg.setAttribute('width',32);svg.setAttribute('height',32);var path=document.createElementNS('http://www.w3.org/2000/svg','path');path.setAttribute('d','M 12,12 L 22,22 M 22,12 12,22');path.setAttribute('stroke','#fff');svg.appendChild(path);return svg;})();var close=new UI.Element(buttonSVG);close.setPosition('absolute');close.setTop('3px');close.setRight('1px');close.setCursor('pointer');close.onClick(function(){container.setDisplay('none');});header.add(close);var renderer;signals.rendererChanged.add(function(newRenderer){renderer=newRenderer;});var delay;var currentMode;var currentScript;var currentObject;var codemirror=CodeMirror(container.dom,{value:'',lineNumbers:true,matchBrackets:true,indentWithTabs:true,tabSize:4,indentUnit:4,hintOptions:{completeSingle:false}});codemirror.setOption('theme','monokai');codemirror.on('change',function(){if(codemirror.state.focused===false)return;clearTimeout(delay);delay=setTimeout(function(){var value=codemirror.getValue();if(!validate(value))return;if(typeof(currentScript)==='object'){if(value!==currentScript.source){editor.execute(new SetScriptValueCommand(currentObject,currentScript,'source',value));}
return;}
if(currentScript!=='programInfo')return;var json=JSON.parse(value);if(JSON.stringify(currentObject.material.defines)!==JSON.stringify(json.defines)){var cmd=new SetMaterialValueCommand(currentObject,'defines',json.defines);cmd.updatable=false;editor.execute(cmd);}
if(JSON.stringify(currentObject.material.uniforms)!==JSON.stringify(json.uniforms)){var cmd=new SetMaterialValueCommand(currentObject,'uniforms',json.uniforms);cmd.updatable=false;editor.execute(cmd);}
if(JSON.stringify(currentObject.material.attributes)!==JSON.stringify(json.attributes)){var cmd=new SetMaterialValueCommand(currentObject,'attributes',json.attributes);cmd.updatable=false;editor.execute(cmd);}},300);});var wrapper=codemirror.getWrapperElement();wrapper.addEventListener('keydown',function(event){event.stopPropagation();});var errorLines=[];var widgets=[];var validate=function(string){var valid;var errors=[];return codemirror.operation(function(){while(errorLines.length>0){codemirror.removeLineClass(errorLines.shift(),'background','errorLine');}
while(widgets.length>0){codemirror.removeLineWidget(widgets.shift());}
switch(currentMode){case'javascript':try{var syntax=esprima.parse(string,{tolerant:true});errors=syntax.errors;}catch(error){errors.push({lineNumber:error.lineNumber-1,message:error.message});}
for(var i=0;i<errors.length;i++){var error=errors[i];error.message=error.message.replace(/Line [0-9]+: /,'');}
break;case'json':errors=[];jsonlint.parseError=function(message,info){message=message.split('\n')[3];errors.push({lineNumber:info.loc.first_line-1,message:message});};try{jsonlint.parse(string);}catch(error){}
break;case'glsl':try{var shaderType=currentScript==='vertexShader'?glslprep.Shader.VERTEX:glslprep.Shader.FRAGMENT;glslprep.parseGlsl(string,shaderType);}catch(error){if(error instanceof glslprep.SyntaxError){errors.push({lineNumber:error.line,message:"Syntax Error: "+error.message});}else{console.error(error.stack||error);}}
if(errors.length!==0)break;if(renderer instanceof THREE.WebGLRenderer===false)break;currentObject.material[currentScript]=string;currentObject.material.needsUpdate=true;signals.materialChanged.dispatch(currentObject.material);var programs=renderer.info.programs;valid=true;var parseMessage=/^(?:ERROR|WARNING): \d+:(\d+): (.*)/g;for(var i=0,n=programs.length;i!==n;++i){var diagnostics=programs[i].diagnostics;if(diagnostics===undefined||diagnostics.material!==currentObject.material)continue;if(!diagnostics.runnable)valid=false;var shaderInfo=diagnostics[currentScript];var lineOffset=shaderInfo.prefix.split(/\r\n|\r|\n/).length;while(true){var parseResult=parseMessage.exec(shaderInfo.log);if(parseResult===null)break;errors.push({lineNumber:parseResult[1]-lineOffset,message:parseResult[2]});}
break;}}
for(var i=0;i<errors.length;i++){var error=errors[i];var message=document.createElement('div');message.className='esprima-error';message.textContent=error.message;var lineNumber=Math.max(error.lineNumber,0);errorLines.push(lineNumber);codemirror.addLineClass(lineNumber,'background','errorLine');var widget=codemirror.addLineWidget(lineNumber,message);widgets.push(widget);}
return valid!==undefined?valid:errors.length===0;});};var server=new CodeMirror.TernServer({caseInsensitive:true,plugins:{threejs:null}});codemirror.setOption('extraKeys',{'Ctrl-Space':function(cm){server.complete(cm);},'Ctrl-I':function(cm){server.showType(cm);},'Ctrl-O':function(cm){server.showDocs(cm);},'Alt-.':function(cm){server.jumpToDef(cm);},'Alt-,':function(cm){server.jumpBack(cm);},'Ctrl-Q':function(cm){server.rename(cm);},'Ctrl-.':function(cm){server.selectName(cm);}});codemirror.on('cursorActivity',function(cm){if(currentMode!=='javascript')return;server.updateArgHints(cm);});codemirror.on('keypress',function(cm,kb){if(currentMode!=='javascript')return;var typed=String.fromCharCode(kb.which||kb.keyCode);if(/[\w\.]/.exec(typed)){server.complete(cm);}});signals.editorCleared.add(function(){container.setDisplay('none');});signals.editScript.add(function(object,script){var mode,name,source;if(typeof(script)==='object'){mode='javascript';name=script.name;source=script.source;title.setValue(object.name+' / '+name);}else{switch(script){case'vertexShader':mode='glsl';name='Vertex Shader';source=object.material.vertexShader||"";break;case'fragmentShader':mode='glsl';name='Fragment Shader';source=object.material.fragmentShader||"";break;case'programInfo':mode='json';name='Program Properties';var json={defines:object.material.defines,uniforms:object.material.uniforms,attributes:object.material.attributes};source=JSON.stringify(json,null,'\t');}
title.setValue(object.material.name+' / '+name);}
currentMode=mode;currentScript=script;currentObject=object;container.setDisplay('');codemirror.setValue(source);codemirror.clearHistory();if(mode==='json')mode={name:'javascript',json:true};codemirror.setOption('mode',mode);});signals.scriptRemoved.add(function(script){if(currentScript===script){container.setDisplay('none');}});return container;};var Loader=function(editor){var scope=this;var signals=editor.signals;this.texturePath='';this.loadFile=function(file){var filename=file.name;var extension=filename.split('.').pop().toLowerCase();var reader=new FileReader();reader.addEventListener('progress',function(event){var size='('+Math.floor(event.total/1000).format()+' KB)';var progress=Math.floor((event.loaded/event.total)*100)+'%';console.log('Loading',filename,size,progress);});switch(extension){case'3ds':reader.addEventListener('load',function(event){var loader=new THREE.TDSLoader();var object=loader.parse(event.target.result);editor.execute(new AddObjectCommand(object));editor.setModel(object);},false);reader.readAsArrayBuffer(file);break;case'amf':reader.addEventListener('load',function(event){var loader=new THREE.AMFLoader();var amfobject=loader.parse(event.target.result);editor.execute(new AddObjectCommand(amfobject));},false);reader.readAsArrayBuffer(file);break;case'awd':reader.addEventListener('load',function(event){var loader=new THREE.AWDLoader();var scene=loader.parse(event.target.result);editor.execute(new SetSceneCommand(scene));},false);reader.readAsArrayBuffer(file);break;case'babylon':reader.addEventListener('load',function(event){var contents=event.target.result;var json=JSON.parse(contents);var loader=new THREE.BabylonLoader();var scene=loader.parse(json);editor.execute(new SetSceneCommand(scene));},false);reader.readAsText(file);break;case'babylonmeshdata':reader.addEventListener('load',function(event){var contents=event.target.result;var json=JSON.parse(contents);var loader=new THREE.BabylonLoader();var geometry=loader.parseGeometry(json);var material=new THREE.MeshStandardMaterial();var mesh=new THREE.Mesh(geometry,material);mesh.name=filename;editor.execute(new AddObjectCommand(mesh));},false);reader.readAsText(file);break;case'ctm':reader.addEventListener('load',function(event){var data=new Uint8Array(event.target.result);var stream=new CTM.Stream(data);stream.offset=0;var loader=new THREE.CTMLoader();loader.createModel(new CTM.File(stream),function(geometry){geometry.sourceType="ctm";geometry.sourceFile=file.name;var material=new THREE.MeshStandardMaterial();var mesh=new THREE.Mesh(geometry,material);mesh.name=filename;editor.execute(new AddObjectCommand(mesh));});},false);reader.readAsArrayBuffer(file);break;case'dae':reader.addEventListener('load',function(event){var contents=event.target.result;var loader=new THREE.ColladaLoader();var collada=loader.parse(contents);collada.scene.name=filename;editor.execute(new AddObjectCommand(collada.scene));},false);reader.readAsText(file);break;case'fbx':reader.addEventListener('load',function(event){var contents=event.target.result;var loader=new THREE.FBXLoader();var object=loader.parse(contents);editor.execute(new AddObjectCommand(object));},false);reader.readAsArrayBuffer(file);break;case'flt':$.ajax({url:'/rest/convert_object',data:file,processData:false,contentType:false,dataType:"text",success:function(data){console.log("Loading converted FLT->OBJ");var object=new THREE.OBJLoader().parse(data);object.name=filename;editor.execute(new AddObjectCommand(object));editor.setModel(object);},error:function(){console.error('['+/\d\d\:\d\d\:\d\d/.exec(new Date())[0]+']','Failed to send file to server. ');},type:'POST'});break;case'glb':case'gltf':reader.addEventListener('load',function(event){var contents=event.target.result;var loader=new THREE.GLTFLoader();loader.parse(contents,'',function(result){result.scene.name=filename;editor.execute(new AddObjectCommand(result.scene));});},false);reader.readAsArrayBuffer(file);break;case'js':case'json':case'3geo':case'3mat':case'3obj':case'3scn':reader.addEventListener('load',function(event){var contents=event.target.result;if(contents.indexOf('postMessage')!==-1){var blob=new Blob([contents],{type:'text/javascript'});var url=URL.createObjectURL(blob);var worker=new Worker(url);worker.onmessage=function(event){event.data.metadata={version:2};handleJSON(event.data,file,filename);};worker.postMessage(Date.now());return;}
var data;try{data=JSON.parse(contents);}catch(error){alert(error);return;}
handleJSON(data,file,filename);},false);reader.readAsText(file);break;case'kmz':reader.addEventListener('load',function(event){var loader=new THREE.KMZLoader();var collada=loader.parse(event.target.result);collada.scene.name=filename;editor.execute(new AddObjectCommand(collada.scene));},false);reader.readAsArrayBuffer(file);break;case'md2':reader.addEventListener('load',function(event){var contents=event.target.result;var geometry=new THREE.MD2Loader().parse(contents);var material=new THREE.MeshStandardMaterial({morphTargets:true,morphNormals:true});var mesh=new THREE.Mesh(geometry,material);mesh.mixer=new THREE.AnimationMixer(mesh);mesh.name=filename;editor.execute(new AddObjectCommand(mesh));},false);reader.readAsArrayBuffer(file);break;case'obj':reader.addEventListener('load',function(event){var contents=event.target.result;var object=new THREE.OBJLoader().parse(contents);object.name=filename;editor.execute(new AddObjectCommand(object));editor.setModel(object);},false);reader.readAsText(file);break;case'playcanvas':reader.addEventListener('load',function(event){var contents=event.target.result;var json=JSON.parse(contents);var loader=new THREE.PlayCanvasLoader();var object=loader.parse(json);editor.execute(new AddObjectCommand(object));},false);reader.readAsText(file);break;case'ply':reader.addEventListener('load',function(event){var contents=event.target.result;var geometry=new THREE.PLYLoader().parse(contents);geometry.sourceType="ply";geometry.sourceFile=file.name;var material=new THREE.MeshStandardMaterial();var mesh=new THREE.Mesh(geometry,material);mesh.name=filename;editor.execute(new AddObjectCommand(mesh));},false);reader.readAsArrayBuffer(file);break;case'stl':reader.addEventListener('load',function(event){var contents=event.target.result;var geometry=new THREE.STLLoader().parse(contents);geometry.sourceType="stl";geometry.sourceFile=file.name;var material=new THREE.MeshStandardMaterial();var mesh=new THREE.Mesh(geometry,material);mesh.name=filename;editor.execute(new AddObjectCommand(mesh));},false);if(reader.readAsBinaryString!==undefined){reader.readAsBinaryString(file);}else{reader.readAsArrayBuffer(file);}
break;case'vtk':reader.addEventListener('load',function(event){var contents=event.target.result;var geometry=new THREE.VTKLoader().parse(contents);geometry.sourceType="vtk";geometry.sourceFile=file.name;var material=new THREE.MeshStandardMaterial();var mesh=new THREE.Mesh(geometry,material);mesh.name=filename;editor.execute(new AddObjectCommand(mesh));},false);reader.readAsText(file);break;case'wrl':reader.addEventListener('load',function(event){var contents=event.target.result;var result=new THREE.VRMLLoader().parse(contents);editor.execute(new SetSceneCommand(result));},false);reader.readAsText(file);break;case'zip':reader.addEventListener('load',function(event){var contents=event.target.result;var zip=new JSZip(contents);if(zip.files['model.obj']&&zip.files['materials.mtl']){var materials=new THREE.MTLLoader().parse(zip.file('materials.mtl').asText());var object=new THREE.OBJLoader().setMaterials(materials).parse(zip.file('model.obj').asText());editor.execute(new AddObjectCommand(object));}},false);reader.readAsBinaryString(file);break;default:alert('Unsupported file format ('+extension+').');break;}};function handleJSON(data,file,filename){if(data.metadata===undefined){data.metadata={type:'Geometry'};}
if(data.metadata.type===undefined){data.metadata.type='Geometry';}
if(data.metadata.formatVersion!==undefined){data.metadata.version=data.metadata.formatVersion;}
switch(data.metadata.type.toLowerCase()){case'buffergeometry':var loader=new THREE.BufferGeometryLoader();var result=loader.parse(data);var mesh=new THREE.Mesh(result);editor.execute(new AddObjectCommand(mesh));editor.setModel(mesh);break;case'geometry':var loader=new THREE.JSONLoader();loader.setTexturePath(scope.texturePath);var result=loader.parse(data);var geometry=result.geometry;var material;if(result.materials!==undefined){if(result.materials.length>1){material=new THREE.MultiMaterial(result.materials);}else{material=result.materials[0];}}else{material=new THREE.MeshStandardMaterial();}
geometry.sourceType="ascii";geometry.sourceFile=file.name;var mesh;if(geometry.animation&&geometry.animation.hierarchy){mesh=new THREE.SkinnedMesh(geometry,material);}else{mesh=new THREE.Mesh(geometry,material);}
mesh.name=filename;editor.execute(new AddObjectCommand(mesh));editor.setModel(mesh);break;case'object':var loader=new THREE.ObjectLoader();loader.setTexturePath(scope.texturePath);var result=loader.parse(data);if(result instanceof THREE.Scene){editor.execute(new SetSceneCommand(result));}else{editor.execute(new AddObjectCommand(result));editor.setModel(result);}
break;case'app':editor.fromJSON(data);break;}}};var Menubar=function(editor){var container=new UI.Panel();container.setId('menubar');container.add(new Menubar.File(editor));container.add(new Menubar.Edit(editor));container.add(new Menubar.Add(editor));container.add(new Menubar.Help(editor));container.add(new Menubar.Status(editor));return container;};var Sidebar=function(editor){var container=new UI.Panel();container.setId('sidebar');var sceneTab=new UI.Text('SCENE').onClick(onClick);var settingsTab=new UI.Text('SETTINGS').onClick(onClick);var tabs=new UI.Div();tabs.setId('tabs');tabs.add(sceneTab,settingsTab);container.add(tabs);function onClick(event){select(event.target.textContent);}
var scene=new UI.Span().add(new Sidebar.Scene(editor),new Sidebar.Properties(editor),new Sidebar.Animation(editor));container.add(scene);var project=new UI.Span().add(new Sidebar.Project(editor));var settings=new UI.Span().add(new Sidebar.Settings(editor),new Sidebar.History(editor));container.add(settings);function select(section){sceneTab.setClass('');settingsTab.setClass('');scene.setDisplay('none');settings.setDisplay('none');switch(section){case'SCENE':sceneTab.setClass('selected');scene.setDisplay('');break;case'SETTINGS':settingsTab.setClass('selected');settings.setDisplay('');break;}}
select('SCENE');return container;};var Toolbar=function(editor){var signals=editor.signals;var container=new UI.Panel();container.setId('toolbar');var buttons=new UI.Panel();container.add(buttons);var translate=new UI.Button('translate');translate.dom.title='W';translate.dom.className='Button selected';translate.onClick(function(){signals.transformModeChanged.dispatch('translate');});buttons.add(translate);var rotate=new UI.Button('rotate');rotate.dom.title='E';rotate.onClick(function(){signals.transformModeChanged.dispatch('rotate');});buttons.add(rotate);var scale=new UI.Button('scale');scale.dom.title='R';scale.onClick(function(){signals.transformModeChanged.dispatch('scale');});buttons.add(scale);signals.transformModeChanged.add(function(mode){translate.dom.classList.remove('selected');rotate.dom.classList.remove('selected');scale.dom.classList.remove('selected');switch(mode){case'translate':translate.dom.classList.add('selected');break;case'rotate':rotate.dom.classList.add('selected');break;case'scale':scale.dom.classList.add('selected');break;}});var grid=new UI.Number(25).setWidth('40px').onChange(update);buttons.add(new UI.Text('grid: '));buttons.add(grid);var snap=new UI.THREE.Boolean(false,'snap').onChange(update);buttons.add(snap);var local=new UI.THREE.Boolean(false,'local').onChange(update);buttons.add(local);var showGrid=new UI.THREE.Boolean(true,'show').onChange(update);buttons.add(showGrid);function update(){signals.snapChanged.dispatch(snap.getValue()===true?grid.getValue():null);signals.spaceChanged.dispatch(local.getValue()===true?"local":"world");signals.showGridChanged.dispatch(showGrid.getValue());}
return container;};var Viewport=function(editor){var signals=editor.signals;var container=new UI.Panel();container.setId('viewport');container.setPosition('absolute');container.add(new Viewport.Info(editor));var renderer=null;var camera=editor.camera;var scene=editor.scene;var sceneHelpers=editor.sceneHelpers;var objects=[];var grid=new THREE.GridHelper(60,60);sceneHelpers.add(grid);var box=new THREE.Box3();var selectionBox=new THREE.BoxHelper();selectionBox.material.depthTest=false;selectionBox.material.transparent=true;selectionBox.visible=false;sceneHelpers.add(selectionBox);var objectPositionOnDown=null;var objectRotationOnDown=null;var objectScaleOnDown=null;var transformControls=new THREE.TransformControls(camera,container.dom);transformControls.addEventListener('change',function(){var object=transformControls.object;if(object!==undefined){selectionBox.setFromObject(object);if(editor.helpers[object.id]!==undefined){editor.helpers[object.id].update();}
signals.refreshSidebarObject3D.dispatch(object);}
render();});transformControls.addEventListener('mouseDown',function(){var object=transformControls.object;objectPositionOnDown=object.position.clone();objectRotationOnDown=object.rotation.clone();objectScaleOnDown=object.scale.clone();controls.enabled=false;});transformControls.addEventListener('mouseUp',function(){var object=transformControls.object;if(object!==undefined){switch(transformControls.getMode()){case'translate':if(!objectPositionOnDown.equals(object.position)){editor.execute(new SetPositionCommand(object,object.position,objectPositionOnDown));}
break;case'rotate':if(!objectRotationOnDown.equals(object.rotation)){editor.execute(new SetRotationCommand(object,object.rotation,objectRotationOnDown));}
break;case'scale':if(!objectScaleOnDown.equals(object.scale)){editor.execute(new SetScaleCommand(object,object.scale,objectScaleOnDown));}
break;}}
controls.enabled=true;});sceneHelpers.add(transformControls);var raycaster=new THREE.Raycaster();var mouse=new THREE.Vector2();function getIntersects(point,objects){mouse.set((point.x*2)-1,-(point.y*2)+1);raycaster.setFromCamera(mouse,camera);return raycaster.intersectObjects(objects);}
var onDownPosition=new THREE.Vector2();var onUpPosition=new THREE.Vector2();var onDoubleClickPosition=new THREE.Vector2();function getMousePosition(dom,x,y){var rect=dom.getBoundingClientRect();return[(x-rect.left)/rect.width,(y-rect.top)/rect.height];}
function handleClick(){if(onDownPosition.distanceTo(onUpPosition)===0){var intersects=getIntersects(onUpPosition,objects);if(editor.getAntennaSnapping()){if(intersects.length>0){var right_wing=editor.getModel()[0];var left_wing=editor.getModel()[1];var radius=(right_wing-left_wing)/180;var widthSegments=32;var heightSegments=16;var phiStart=0;var phiLength=Math.PI*2;var thetaStart=0;var thetaLength=Math.PI;var localPoint=intersects[0].point;var geometrySphere=new THREE.SphereGeometry(radius,widthSegments,heightSegments,phiStart,phiLength,thetaStart,thetaLength);var materialAntenna=new THREE.MeshBasicMaterial({color:0xffffff,vertexColors:THREE.FaceColors});for(var i=0;i<geometrySphere.faces.length;i++){var face=geometrySphere.faces[i];if(i<96){face.color.setRGB(0,0,256);}
else{face.color.setRGB(256,0,0);}}
var geo=new THREE.BufferGeometry().fromGeometry(geometrySphere);var mesh=new THREE.Mesh(geo,materialAntenna);mesh.name='Antenna';editor.execute(new SetPositionCommand(mesh,new THREE.Vector3(localPoint.x,localPoint.y,localPoint.z)));editor.execute(new AddObjectCommand(mesh));}}else{if(intersects.length>0){var object=intersects[0].object;if(object.userData.object!==undefined){editor.select(object.userData.object);}else{editor.select(object);}}else{editor.select(null);}}
render();}}
function onMouseDown(event){event.preventDefault();var array=getMousePosition(container.dom,event.clientX,event.clientY);onDownPosition.fromArray(array);document.addEventListener('mouseup',onMouseUp,false);}
function onMouseUp(event){var array=getMousePosition(container.dom,event.clientX,event.clientY);onUpPosition.fromArray(array);handleClick();document.removeEventListener('mouseup',onMouseUp,false);}
function onTouchStart(event){var touch=event.changedTouches[0];var array=getMousePosition(container.dom,touch.clientX,touch.clientY);onDownPosition.fromArray(array);document.addEventListener('touchend',onTouchEnd,false);}
function onTouchEnd(event){var touch=event.changedTouches[0];var array=getMousePosition(container.dom,touch.clientX,touch.clientY);onUpPosition.fromArray(array);handleClick();document.removeEventListener('touchend',onTouchEnd,false);}
function onDoubleClick(event){var array=getMousePosition(container.dom,event.clientX,event.clientY);onDoubleClickPosition.fromArray(array);var intersects=getIntersects(onDoubleClickPosition,objects);if(intersects.length>0){var intersect=intersects[0];signals.objectFocused.dispatch(intersect.object);}}
container.dom.addEventListener('mousedown',onMouseDown,false);container.dom.addEventListener('touchstart',onTouchStart,false);container.dom.addEventListener('dblclick',onDoubleClick,false);var controls=new THREE.EditorControls(camera,container.dom);controls.addEventListener('change',function(){transformControls.update();signals.cameraChanged.dispatch(camera);});signals.editorCleared.add(function(){controls.center.set(0,0,0);render();});signals.themeChanged.add(function(value){switch(value){case'/static/css/light.css':sceneHelpers.remove(grid);grid=new THREE.GridHelper(60,60,0x444444,0x888888);sceneHelpers.add(grid);break;case'/static/css/dark.css':sceneHelpers.remove(grid);grid=new THREE.GridHelper(60,60,0xbbbbbb,0x888888);sceneHelpers.add(grid);break;}
render();});signals.transformModeChanged.add(function(mode){transformControls.setMode(mode);});signals.snapChanged.add(function(dist){transformControls.setTranslationSnap(dist);});signals.spaceChanged.add(function(space){transformControls.setSpace(space);});signals.rendererChanged.add(function(newRenderer){if(renderer!==null){container.dom.removeChild(renderer.domElement);}
renderer=newRenderer;renderer.autoClear=false;renderer.autoUpdateScene=false;renderer.setPixelRatio(window.devicePixelRatio);renderer.setSize(container.dom.offsetWidth,container.dom.offsetHeight);container.dom.appendChild(renderer.domElement);render();});signals.sceneGraphChanged.add(function(){render();});signals.cameraChanged.add(function(){render();});signals.objectSelected.add(function(object){selectionBox.visible=false;transformControls.detach();if(object!==null&&object!==scene&&object!==camera){box.setFromObject(object);if(box.isEmpty()===false){selectionBox.setFromObject(object);selectionBox.visible=true;}
transformControls.attach(object);}
render();});signals.objectFocused.add(function(object){controls.focus(object);});signals.geometryChanged.add(function(object){if(object!==undefined){selectionBox.setFromObject(object);}
render();});signals.objectAdded.add(function(object){object.traverse(function(child){objects.push(child);});});signals.objectChanged.add(function(object){if(editor.selected===object){selectionBox.setFromObject(object);transformControls.update();}
if(object instanceof THREE.PerspectiveCamera){object.updateProjectionMatrix();}
if(editor.helpers[object.id]!==undefined){editor.helpers[object.id].update();}
render();});signals.objectRemoved.add(function(object){object.traverse(function(child){objects.splice(objects.indexOf(child),1);});});signals.helperAdded.add(function(object){objects.push(object.getObjectByName('picker'));});signals.helperRemoved.add(function(object){objects.splice(objects.indexOf(object.getObjectByName('picker')),1);});signals.materialChanged.add(function(material){render();});signals.sceneBackgroundChanged.add(function(backgroundColor){scene.background.setHex(backgroundColor);render();});var currentFogType=null;signals.sceneFogChanged.add(function(fogType,fogColor,fogNear,fogFar,fogDensity){if(currentFogType!==fogType){switch(fogType){case'None':scene.fog=null;break;case'Fog':scene.fog=new THREE.Fog();break;case'FogExp2':scene.fog=new THREE.FogExp2();break;}
currentFogType=fogType;}
if(scene.fog instanceof THREE.Fog){scene.fog.color.setHex(fogColor);scene.fog.near=fogNear;scene.fog.far=fogFar;}else if(scene.fog instanceof THREE.FogExp2){scene.fog.color.setHex(fogColor);scene.fog.density=fogDensity;}
render();});signals.windowResize.add(function(){editor.DEFAULT_CAMERA.aspect=container.dom.offsetWidth/container.dom.offsetHeight;editor.DEFAULT_CAMERA.updateProjectionMatrix();camera.aspect=container.dom.offsetWidth/container.dom.offsetHeight;camera.updateProjectionMatrix();renderer.setSize(container.dom.offsetWidth,container.dom.offsetHeight);render();});signals.showGridChanged.add(function(showGrid){grid.visible=showGrid;render();});function render(){sceneHelpers.updateMatrixWorld();scene.updateMatrixWorld();renderer.render(scene,camera);if(renderer instanceof THREE.RaytracingRenderer===false){renderer.render(sceneHelpers,camera);}}
return container;};Viewport.Info=function(editor){var signals=editor.signals;var container=new UI.Panel();container.setId('info');container.setPosition('absolute');container.setLeft('10px');container.setBottom('10px');container.setFontSize('12px');container.setColor('#fff');var objectsText=new UI.Text('0').setMarginLeft('6px');var verticesText=new UI.Text('0').setMarginLeft('6px');var trianglesText=new UI.Text('0').setMarginLeft('6px');container.add(new UI.Text('objects'),objectsText,new UI.Break());container.add(new UI.Text('vertices'),verticesText,new UI.Break());container.add(new UI.Text('triangles'),trianglesText,new UI.Break());signals.objectAdded.add(update);signals.objectRemoved.add(update);signals.geometryChanged.add(update);function update(){var scene=editor.scene;var objects=0,vertices=0,triangles=0;for(var i=0,l=scene.children.length;i<l;i++){var object=scene.children[i];object.traverseVisible(function(object){objects++;if(object instanceof THREE.Mesh){var geometry=object.geometry;if(geometry instanceof THREE.Geometry){vertices+=geometry.vertices.length;triangles+=geometry.faces.length;}else if(geometry instanceof THREE.BufferGeometry){if(geometry.index!==null){vertices+=geometry.index.count*3;triangles+=geometry.index.count;}else{vertices+=geometry.attributes.position.count;triangles+=geometry.attributes.position.count/3;}}}});}
objectsText.setValue(objects.format());verticesText.setValue(vertices.format());trianglesText.setValue(triangles.format());}
return container;};Menubar.File=function(editor){var NUMBER_PRECISION=6;function parseNumber(key,value){return typeof value==='number'?parseFloat(value.toFixed(NUMBER_PRECISION)):value;}
var container=new UI.Panel();container.setClass('menu');var title=new UI.Panel();title.setClass('title');title.setTextContent('File');container.add(title);var options=new UI.Panel();options.setClass('options');container.add(options);var option=new UI.Row();option.setClass('option');option.setTextContent('New');option.onClick(function(){if(confirm('Any unsaved data will be lost. Are you sure?')){editor.clear();editor.storage.clear();editor.project_uuid="";}});options.add(option);var option=new UI.Row();option.setClass('option');option.setTextContent('Load');option.onClick(function(){if(confirm('Any unsaved data will be lost. Are you sure?')){fetchStates();document.getElementById('myModal').style.display="block";}});options.add(option);options.add(new UI.HorizontalRule());var check=false;var l,w,h;var input_pane=new UI.Panel();var l_row=new UI.Row();var w_row=new UI.Row();var h_row=new UI.Row();var input;var text=new UI.Text("Aircraft Dimensions");var text2=new UI.Text("(in meters)");text.setMarginLeft('11px');text.setMarginRight('11px');text2.setMarginLeft('39px');text2.setMarginRight('39px');text2.setPaddingBottom('12px');var text_l=new UI.Text("Length:").setMarginRight('62px').setMarginLeft('4px');var text_w=new UI.Text("Wingspan:").setMarginRight('43px').setMarginLeft('4px');var text_h=new UI.Text("Height (nose up):").setMarginRight('2px').setMarginLeft('4px');;var input_l=new UI.Number().setWidth('30px');var input_w=new UI.Number().setWidth('30px');var input_h=new UI.Number().setWidth('30px');input_pane.add(text);input_pane.add(text2);l_row.add(text_l);l_row.add(input_l);w_row.add(text_w);w_row.add(input_w);h_row.add(text_h);h_row.add(input_h);h_row.setPaddingBottom('15px');input_pane.add(l_row);input_pane.add(w_row);input_pane.add(h_row);var form=document.createElement('form');form.style.display='none';document.body.appendChild(form);var fileInput=document.createElement('input');fileInput.type='file';fileInput.addEventListener('change',function(event){editor.loader.loadFile(fileInput.files[0]);if(editor.scene.children.length==0){var color=0xffffff;var intensity=1;var distance=0;var angle=Math.PI*0.1;var penumbra=0;var light=new THREE.SpotLight(color,intensity,distance,angle,penumbra);light.name='SpotLight';light.target.name='SpotLight Target';light.position.set(0,5500,5000);editor.execute(new AddObjectCommand(light));}else{for(var i=0;i<editor.scene.children.Length;i++){if(editor.scene.children[i].type=="SpotLight"){break;}else if(i==editor.scene.children.length-1){var color=0xffffff;var intensity=1;var distance=0;var angle=Math.PI*0.1;var penumbra=0;var light=new THREE.SpotLight(color,intensity,distance,angle,penumbra);light.name='SpotLight';light.target.name='SpotLight Target';light.position.set(0,5500,5000);editor.execute(new AddObjectCommand(light));}}}
form.reset();});form.appendChild(fileInput);var option=new UI.Row();option.setClass('option');option.setTextContent('Import');option.onClick(function(){for(var i=1;i<4;i++){editor.getMenubar()[i].setClass('options3');}
options.setClass('options2');if(check===true){options.newInput();input_pane.remove(input);}
check=true;input=new UI.Button();input.setMarginLeft('42px');input.setClass("input");input.setTextContent("Enter");input.onClick(function(){options.setClass('options');for(var i=1;i<4;i++){editor.getMenubar()[i].setClass('options');}
l=input_l.getValue();w=input_w.getValue();h=input_h.getValue();editor.setModelDimensions(l,w,h);fileInput.click();input_pane.remove(input);options.newInput();check=false;});input_pane.add(input);options.remove(opt1);options.remove(opt2);options.remove(opt3);options.remove(line)
options.remove(opt4);options.add(input_pane);});options.add(option);var xmlInput=document.createElement('input');xmlInput.type='file';xmlInput.addEventListener('change',function(event){var filename=(xmlInput.files[0].name);var extension=filename.split('.').pop().toLowerCase();if(extension==='xml'){var reader=new FileReader();reader.addEventListener('load',function(event){var xmlString=event.target.result;var parser=new DOMParser();var xmlDoc=parser.parseFromString(xmlString,"text/xml");AntennasXml=xmlDoc.documentElement;antennaList=xmlDoc.documentElement.childNodes;if(AntennasXml.nodeName==='Antennas'){for(var i=0;i<antennaList.length;i++){if(antennaList[i].nodeName==='Antenna'){var xCoord=0;var yCoord=0;var zCoord=0;var xRot=0;var yRot=0;var zRot=0;var name='Antenna';for(var j=0;j<antennaList[i].childNodes.length;j++){if(antennaList[i].childNodes[j].nodeName==='Name'){name=antennaList[i].childNodes[j].childNodes[0].nodeValue;}else if(antennaList[i].childNodes[j].nodeName==='Coordinates'){var coordinates=antennaList[i].childNodes[j].childNodes;for(var k=0;k<coordinates.length;k++){if(coordinates.nodeType!=3){if(coordinates[k].nodeName==='X'){xCoord=coordinates[k].childNodes[0].nodeValue;}else if(coordinates[k].nodeName==='Y'){yCoord=coordinates[k].childNodes[0].nodeValue;}else if(coordinates[k].nodeName==='Z'){zCoord=coordinates[k].childNodes[0].nodeValue;}}}}else if(antennaList[i].childNodes[j].nodeName==='Rotation'){var rotation=antennaList[i].childNodes[j].childNodes;for(var k=0;k<rotation.length;k++){if(rotation.nodeType!=3){if(rotation[k].nodeName==='X'){xRot=rotation[k].childNodes[0].nodeValue;}else if(rotation[k].nodeName==='Y'){yRot=rotation[k].childNodes[0].nodeValue;}else if(rotation[k].nodeName==='Z'){zRot=rotation[k].childNodes[0].nodeValue;}}}}}
var x_nose=editor.getModel()[4];var x_tail=editor.getModel()[5];var x_slope=(x_nose-x_tail)/editor.getModelLength();var z_nose=editor.getModel()[3];var z_tail=editor.getModel()[2];var z_slope=(z_nose-z_tail)/editor.getModelHeight();var right_wing=editor.getModel()[0];var left_wing=editor.getModel()[1];var y_slope=(right_wing-left_wing)/editor.getModelWingspan();var xCoord_NG=(yCoord*y_slope)+(left_wing+right_wing)/2;var yCoord_NG=(zCoord*z_slope)+z_nose;var zCoord_NG=x_nose+(xCoord*x_slope);var xRot_NG=yRot*THREE.Math.DEG2RAD;var yRot_NG=zRot*THREE.Math.DEG2RAD;var zRot_NG=xRot*THREE.Math.DEG2RAD;var radius=Math.abs(right_wing-left_wing)/180;var widthSegments=32;var heightSegments=16;var phiStart=0;var phiLength=Math.PI*2;var thetaStart=0;var thetaLength=Math.PI;var material=new THREE.MeshBasicMaterial({color:0xffffff,vertexColors:THREE.FaceColors});var geometry=new THREE.SphereGeometry(radius,widthSegments,heightSegments,phiStart,phiLength,thetaStart,thetaLength);for(var g=0;g<geometry.faces.length;g++){var face=geometry.faces[g];if(g<96){face.color.setRGB(0,0,256);}
else{face.color.setRGB(256,0,0);}}
var geo=new THREE.BufferGeometry().fromGeometry(geometry);var mesh=new THREE.Mesh(geo,material);mesh.name=name;editor.execute(new SetPositionCommand(mesh,new THREE.Vector3(xCoord_NG,yCoord_NG,zCoord_NG)));editor.execute(new SetRotationCommand(mesh,new THREE.Euler(xRot_NG,yRot_NG,zRot_NG)));editor.execute(new AddObjectCommand(mesh));}}}else{alert('Please use Antennas xml file');}},false);reader.readAsText(xmlInput.files[0]);}else if(extension==='csv'){var reader=new FileReader();reader.addEventListener('load',function(event){var csvString=event.target.result;var allRows=csvString.split(/\r?\n|\r/);if(allRows[0]==='Name,X_Position,Y_Position,Z_Position,X_Rotation,Y_Rotation,Z_Rotation'){for(var singleRow=1;singleRow<allRows.length;singleRow++){var rowCells=allRows[singleRow].split(',');if(rowCells.length===7){var name=rowCells[0];var xCoord=rowCells[1];var yCoord=rowCells[2];var zCoord=rowCells[3];var xRot=rowCells[4];var yRot=rowCells[5];var zRot=rowCells[6];var x_nose=editor.getModel()[4];var x_tail=editor.getModel()[5];var x_slope=(x_nose-x_tail)/editor.getModelLength();var z_nose=editor.getModel()[3];var z_tail=editor.getModel()[2];var z_slope=(z_nose-z_tail)/editor.getModelHeight();var right_wing=editor.getModel()[0];var left_wing=editor.getModel()[1];var y_slope=(right_wing-left_wing)/editor.getModelWingspan();var xCoord_NG=(yCoord*y_slope)+(left_wing+right_wing)/2;var yCoord_NG=(zCoord*z_slope)+z_nose;var zCoord_NG=x_nose+(xCoord*x_slope);var xRot_NG=yRot*THREE.Math.DEG2RAD;var yRot_NG=zRot*THREE.Math.DEG2RAD;var zRot_NG=xRot*THREE.Math.DEG2RAD;var radius=Math.abs(right_wing-left_wing)/180;var widthSegments=32;var heightSegments=16;var phiStart=0;var phiLength=Math.PI*2;var thetaStart=0;var thetaLength=Math.PI;var material=new THREE.MeshBasicMaterial({color:0xffffff,vertexColors:THREE.FaceColors});var geometry=new THREE.SphereGeometry(radius,widthSegments,heightSegments,phiStart,phiLength,thetaStart,thetaLength);for(var g=0;g<geometry.faces.length;g++){var face=geometry.faces[g];if(g<96){face.color.setRGB(0,0,256);}
else{face.color.setRGB(256,0,0);}}
var geo=new THREE.BufferGeometry().fromGeometry(geometry);var mesh=new THREE.Mesh(geo,material);mesh.name=name;editor.execute(new SetPositionCommand(mesh,new THREE.Vector3(xCoord_NG,yCoord_NG,zCoord_NG)));editor.execute(new SetRotationCommand(mesh,new THREE.Euler(xRot_NG,yRot_NG,zRot_NG)));editor.execute(new AddObjectCommand(mesh));}else{alert("Incorrect format at row "+(singleRow));}}}else{alert('Incorrect title');}},false);reader.readAsText(xmlInput.files[0]);}else{alert('Unsupported file format ('+extension+').');}
form.reset();});form.appendChild(xmlInput);var opt1=new UI.Row();opt1.setClass('option');opt1.setTextContent('Import Antennas');opt1.onClick(function(){xmlInput.click();});options.add(opt1);options.add(new UI.HorizontalRule());var opt2=new UI.Row();opt2.setClass('option');opt2.setTextContent('Export Antennas XML');opt2.onClick(function(){var output="<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";var objects=editor.scene.children
var right_wing=editor.getModel()[0];var left_wing=editor.getModel()[1];var y_slope=(right_wing-left_wing)/editor.getModelWingspan();var z_nose=editor.getModel()[3];var z_tail=editor.getModel()[2];var z_slope=(z_nose-z_tail)/editor.getModelHeight();var x_nose=editor.getModel()[4];var x_tail=editor.getModel()[5];var x_slope=(x_nose-x_tail)/editor.getModelLength();output+="<Antennas>\n"
for(var i=0,l=objects.length;i<l;i++){var object=objects[i];if(object.geometry!==undefined&&object.geometry.type==='BufferGeometry'){output+="\t<Antenna>\n";output+="\t\t<Name>"+object.name+"</Name>\n";output+="\t\t<Coordinates>\n";output+="\t\t\t<X>"+(Math.round(((object.position.z-x_nose)/x_slope)*100)/100)+"</X>\n";output+="\t\t\t<Y>"+(Math.round(((object.position.x-(left_wing+right_wing)/2)/y_slope)*100)/100)+"</Y>\n";output+="\t\t\t<Z>"+(Math.round(((object.position.y-z_nose)/z_slope)*100)/100)+"</Z>\n";output+="\t\t</Coordinates>\n";output+="\t\t<Rotation>\n";output+="\t\t\t<X>"+(Math.round((object.rotation.z*THREE.Math.RAD2DEG)*100)/100)+"</X>\n";output+="\t\t\t<Y>"+(Math.round((object.rotation.x*THREE.Math.RAD2DEG)*100)/100)+"</Y>\n";output+="\t\t\t<Z>"+(Math.round((object.rotation.y*THREE.Math.RAD2DEG)*100)/100)+"</Z>\n";output+="\t\t</Rotation>\n";output+="\t</Antenna>\n";}}
output+="</Antennas>";saveString(output,'Antennas.xml');});options.add(opt2);var opt3=new UI.Row();opt3.setClass('option');opt3.setTextContent('Export Antennas CSV');opt3.onClick(function(){var output="Name,X_Position,Y_Position,Z_Position,X_Rotation,Y_Rotation,Z_Rotation";var objects=editor.scene.children
var right_wing=editor.getModel()[0];var left_wing=editor.getModel()[1];var y_slope=(right_wing-left_wing)/editor.getModelWingspan();var z_nose=editor.getModel()[3];var z_tail=editor.getModel()[2];var z_slope=(z_nose-z_tail)/editor.getModelHeight();var x_nose=editor.getModel()[4];var x_tail=editor.getModel()[5];var x_slope=(x_nose-x_tail)/editor.getModelLength();for(var i=0,l=objects.length;i<l;i++){var object=objects[i];if(object.geometry!==undefined&&object.geometry.type==='BufferGeometry'){output+="\n"+object.name+",";output+=(Math.round(((object.position.z-x_nose)/x_slope)*100)/100)+",";output+=(Math.round(((object.position.x-(left_wing+right_wing)/2)/y_slope)*100)/100)+",";output+=(Math.round(((object.position.y-z_nose)/z_slope)*100)/100)+",";output+=(Math.round((object.rotation.z*THREE.Math.RAD2DEG)*100)/100)+",";output+=(Math.round((object.rotation.x*THREE.Math.RAD2DEG)*100)/100)+",";output+=(Math.round((object.rotation.y*THREE.Math.RAD2DEG)*100)/100);}}
saveString(output,'Antennas.csv');});options.add(opt3);var line=new UI.HorizontalRule();options.add(line);var opt4=new UI.Row();opt4.setClass('option');opt4.setTextContent('Export Scene');opt4.onClick(function(){var output=editor.scene.toJSON();try{output=JSON.stringify(output,parseNumber,'\t');output=output.replace(/[\n\t]+([\d\.e\-\[\]]+)/g,'$1');}catch(e){output=JSON.stringify(output);}
saveString(output,'scene.json');});options.add(opt4);var link=document.createElement('a');link.style.display='none';document.body.appendChild(link);function save(blob,filename){link.href=URL.createObjectURL(blob);link.download=filename||'data.json';link.click();}
function saveString(text,filename){save(new Blob([text],{type:'text/plain'}),filename);}
options.newInput=function(){input_l.setValue(0);input_w.setValue(0);input_h.setValue(0);options.remove(input_pane);options.add(opt1);options.add(opt2);options.add(opt3);options.add(line);options.add(opt4);};editor.setMenubar(options);return container;};Menubar.Edit=function(editor){var container=new UI.Panel();container.setClass('menu');var title=new UI.Panel();title.setClass('title');title.setTextContent('Edit');container.add(title);var options=new UI.Panel();options.setClass('options');container.add(options);var undo=new UI.Row();undo.setClass('option');undo.setTextContent('Undo (Ctrl+Z)');undo.onClick(function(){editor.undo();});options.add(undo);var redo=new UI.Row();redo.setClass('option');redo.setTextContent('Redo (Ctrl+Shift+Z)');redo.onClick(function(){editor.redo();});options.add(redo);var option=new UI.Row();option.setClass('option');option.setTextContent('Clear History');option.onClick(function(){if(confirm('The Undo/Redo History will be cleared. Are you sure?')){editor.history.clear();}});options.add(option);editor.signals.historyChanged.add(function(){var history=editor.history;undo.setClass('option');redo.setClass('option');if(history.undos.length==0){undo.setClass('inactive');}
if(history.redos.length==0){redo.setClass('inactive');}});options.add(new UI.HorizontalRule());var option=new UI.Row();option.setClass('option');option.setTextContent('Delete (Del)');option.onClick(function(){var object=editor.selected;if(confirm('Delete '+object.name+'?')===false)return;var parent=object.parent;if(parent===undefined)return;editor.execute(new RemoveObjectCommand(object));});options.add(option);editor.setMenubar(options);return container;};Menubar.Add=function(editor){var container=new UI.Panel();container.setClass('menu');var title=new UI.Panel();title.setClass('title');title.setTextContent('Add');container.add(title);var options=new UI.Panel();options.setClass('options');container.add(options);var meshCount=0;var lightCount=0;var cameraCount=0;editor.signals.editorCleared.add(function(){meshCount=0;lightCount=0;cameraCount=0;});var check=false;var x,y,z;var input_pane=new UI.Panel();var input_row=new UI.Row();var filler=new UI.HorizontalRule();var input;var text=new UI.Text("Input Coordinates");text.setMarginLeft('18px');text.setMarginRight('18px');text.setPaddingBottom('12px');var text_x=new UI.Text("X:").setMarginRight('2px').setMarginLeft('4px');var text_y=new UI.Text("Y:").setMarginRight('2px');var text_z=new UI.Text("Z:").setMarginRight('2px');var input_x=new UI.Number().setWidth('28px');var input_y=new UI.Number().setWidth('28px');var input_z=new UI.Number().setWidth('28px');input_pane.add(text);input_row.add(text_x);input_row.add(input_x);input_row.add(text_y);input_row.add(input_y);input_row.add(text_z);input_row.add(input_z);input_pane.add(input_row);input_pane.add(new UI.Break());var option=new UI.Row();option.setClass('option');option.setTextContent('Antenna');option.onClick(function(){for(var i=0;i<4;i++){if(i!==2){editor.getMenubar()[i].setClass('options3');}}
options.setClass('options2');if(check===true){options.newInput();input_pane.remove(input);}
check=true;input=new UI.Button();input.setMarginLeft('42px');input.setClass("input");input.setTextContent("Enter");input.onClick(function(){options.setClass('options');for(var i=0;i<4;i++){if(i!==2){editor.getMenubar()[i].setClass('options');}}
x=input_x.getValue();y=input_y.getValue();z=input_z.getValue();var x_nose=editor.getModel()[4];var x_tail=editor.getModel()[5];var x_slope=(x_nose-x_tail)/editor.getModelLength();var z_nose=editor.getModel()[3];var z_tail=editor.getModel()[2];var z_slope=(z_nose-z_tail)/editor.getModelHeight();var right_wing=editor.getModel()[0];var left_wing=editor.getModel()[1];var y_slope=(right_wing-left_wing)/editor.getModelWingspan();var x_NG=(y*y_slope)+(left_wing+right_wing)/2;var y_NG=(z*z_slope)+z_nose;var z_NG=x_nose+(x*x_slope);var radius=Math.abs(right_wing-left_wing)/180;var widthSegments=32;var heightSegments=16;var phiStart=0;var phiLength=Math.PI*2;var thetaStart=0;var thetaLength=Math.PI;var material=new THREE.MeshBasicMaterial({color:0xffffff,vertexColors:THREE.FaceColors});var geometry=new THREE.SphereGeometry(radius,widthSegments,heightSegments,phiStart,phiLength,thetaStart,thetaLength);for(var i=0;i<geometry.faces.length;i++){var face=geometry.faces[i];if(i<96){face.color.setRGB(0,0,256);}
else{face.color.setRGB(256,0,0);}}
var geo=new THREE.BufferGeometry().fromGeometry(geometry);var mesh=new THREE.Mesh(geo,material);mesh.name='Antenna '+(++meshCount);mesh.isAntenna=true;editor.execute(new SetPositionCommand(mesh,new THREE.Vector3(x_NG,y_NG,z_NG)));editor.execute(new AddObjectCommand(mesh));input_pane.remove(input);options.newInput();check=false;});input_pane.add(input);options.add(filler);options.add(input_pane);});options.add(option);options.newInput=function(){input_x.setValue(0);input_y.setValue(0);input_z.setValue(0);options.remove(input_pane);options.remove(filler);};editor.setMenubar(options);return container;};Menubar.Help=function(editor){var container=new UI.Panel();container.setClass('menu');var title=new UI.Panel();title.setClass('title');title.setTextContent('Help');container.add(title);var options=new UI.Panel();options.setClass('options');container.add(options);var option=new UI.Row();option.setClass('option');option.setTextContent('How To Use');option.onClick(function(){document.getElementById('readme').style.display="block";var but=document.getElementById('input');but.onclick=function(){document.getElementById('readme').style.display="none";}});options.add(option);editor.setMenubar(options);return container;};Menubar.Status=function(editor){var container=new UI.Panel();container.setClass('menu right');var autosave=new UI.THREE.Boolean(editor.config.getKey('autosave'),'autosave');autosave.text.setColor('#888');autosave.onChange(function(){var value=this.getValue();editor.config.setKey('autosave',value);if(value===true){editor.signals.sceneGraphChanged.dispatch();}});container.add(autosave);editor.signals.savingStarted.add(function(){autosave.text.setTextDecoration('underline');});editor.signals.savingFinished.add(function(){autosave.text.setTextDecoration('none');});var version=new UI.Text('v1.0.0');version.setClass('title');version.setOpacity(0.5);container.add(version);return container;};Sidebar.Scene=function(editor){var signals=editor.signals;var container=new UI.Panel();container.setBorderTop('0');container.setPaddingTop('20px');function buildOption(object,draggable){var option=document.createElement('div');option.draggable=draggable;option.innerHTML=buildHTML(object);option.value=object.id;return option;}
function getMaterialName(material){if(Array.isArray(material)){var array=[];for(var i=0;i<material.length;i++){array.push(material[i].name);}
return array.join(',');}
return material.name;}
function buildHTML(object){var html='<span class="type '+object.type+'"></span> '+object.name;if(object instanceof THREE.Mesh){var geometry=object.geometry;var material=object.material;html+=' <span class="type '+geometry.type+'"></span> '+geometry.name;html+=' <span class="type '+material.type+'"></span> '+getMaterialName(material);}
html+=getScript(object.uuid);return html;}
function getScript(uuid){if(editor.scripts[uuid]!==undefined){return' <span class="type Script"></span>';}
return'';}
var ignoreObjectSelectedSignal=false;var outliner=new UI.Outliner(editor);outliner.setId('outliner');outliner.onChange(function(){ignoreObjectSelectedSignal=true;editor.selectById(parseInt(outliner.getValue()));ignoreObjectSelectedSignal=false;});outliner.onDblClick(function(){editor.focusById(parseInt(outliner.getValue()));});container.add(outliner);container.add(new UI.Break());function onBackgroundChanged(){signals.sceneBackgroundChanged.dispatch(backgroundColor.getHexValue());}
var backgroundRow=new UI.Row();var backgroundColor=new UI.Color().setValue('#aaaaaa').onChange(onBackgroundChanged);backgroundRow.add(new UI.Text('Background').setWidth('90px'));backgroundRow.add(backgroundColor);container.add(backgroundRow);container.add(new UI.HorizontalRule());container.add(new UI.Text('Aircraft Dimensions (meters)'));container.add(new UI.Break());container.add(new UI.Break());var lengthRow=new UI.Row();var length=new UI.Number().setWidth('50px').onChange(update);lengthRow.add(new UI.Text('Length').setMarginLeft('15px').setWidth('120px'));lengthRow.add(length);var wingspanRow=new UI.Row();var wingspan=new UI.Number().setWidth('50px').onChange(update);wingspanRow.add(new UI.Text('Wingspan').setMarginLeft('15px').setWidth('120px'));wingspanRow.add(wingspan);var heightRow=new UI.Row();var height=new UI.Number().setWidth('50px').onChange(update);heightRow.add(new UI.Text('Height (nose up)').setMarginLeft('15px').setWidth('120px'));heightRow.add(height);container.add(lengthRow);container.add(wingspanRow);container.add(heightRow);var resetRow=new UI.Row();var resetButton=new UI.Button('RESET').onClick(function(){if(editor.scene.children[1]!==null){var model=editor.scene.children[1];model.position.x=editor.getModelPosition()[0];model.position.y=editor.getModelPosition()[1];model.position.z=editor.getModelPosition()[2];model.rotation.x=editor.getModelRotation()[0];model.rotation.y=editor.getModelRotation()[1];model.rotation.z=editor.getModelRotation()[2];model.scale.x=editor.getModelScale()[0];model.scale.y=editor.getModelScale()[1];model.scale.z=editor.getModelScale()[2];signals.objectSelected.dispatch(model);}});resetRow.add(new UI.Text('Model Position/Size').setWidth('150px'));resetRow.add(resetButton);container.add(resetRow);container.add(new UI.HorizontalRule());var isSnapOn=false;var snapRow=new UI.Row();var snapBox=new UI.Checkbox(false).onChange(function(){isSnapOn=!isSnapOn;editor.setAntennaSnapping(isSnapOn);});snapRow.add(new UI.Text('Antenna Snapping').setWidth('150px'));snapRow.add(snapBox);container.add(snapRow);function onFogChanged(){signals.sceneFogChanged.dispatch(fogType.getValue(),fogColor.getHexValue(),fogNear.getValue(),fogFar.getValue(),fogDensity.getValue());}
var fogTypeRow=new UI.Row();var fogType=new UI.Select().setOptions({'None':'None','Fog':'Linear','FogExp2':'Exponential'}).setWidth('150px');fogType.onChange(function(){onFogChanged();refreshFogUI();});fogTypeRow.add(new UI.Text('Fog').setWidth('90px'));fogTypeRow.add(fogType);var fogPropertiesRow=new UI.Row();fogPropertiesRow.setDisplay('none');fogPropertiesRow.setMarginLeft('90px');container.add(fogPropertiesRow);var fogColor=new UI.Color().setValue('#aaaaaa');fogColor.onChange(onFogChanged);fogPropertiesRow.add(fogColor);var fogNear=new UI.Number(0.1).setWidth('40px').setRange(0,Infinity).onChange(onFogChanged);fogPropertiesRow.add(fogNear);var fogFar=new UI.Number(50).setWidth('40px').setRange(0,Infinity).onChange(onFogChanged);fogPropertiesRow.add(fogFar);var fogDensity=new UI.Number(0.05).setWidth('40px').setRange(0,0.1).setPrecision(3).onChange(onFogChanged);fogPropertiesRow.add(fogDensity);function refreshUI(){var camera=editor.camera;var scene=editor.scene;var options=[];options.push(buildOption(camera,false));options.push(buildOption(scene,false));length.setValue(editor.getModelLength());wingspan.setValue(editor.getModelWingspan());height.setValue(editor.getModelHeight());(function addObjects(objects,pad){for(var i=0,l=objects.length;i<l;i++){var object=objects[i];var option=buildOption(object,true);option.style.paddingLeft=(pad*10)+'px';options.push(option);}})(scene.children,1);outliner.setOptions(options);if(editor.selected!==null){outliner.setValue(editor.selected.id);}
if(scene.background){backgroundColor.setHexValue(scene.background.getHex());}
if(scene.fog){fogColor.setHexValue(scene.fog.color.getHex());if(scene.fog instanceof THREE.Fog){fogType.setValue("Fog");fogNear.setValue(scene.fog.near);fogFar.setValue(scene.fog.far);}else if(scene.fog instanceof THREE.FogExp2){fogType.setValue("FogExp2");fogDensity.setValue(scene.fog.density);}}else{fogType.setValue("None");}
refreshFogUI();}
function refreshFogUI(){var type=fogType.getValue();fogPropertiesRow.setDisplay(type==='None'?'none':'');fogNear.setDisplay(type==='Fog'?'':'none');fogFar.setDisplay(type==='Fog'?'':'none');fogDensity.setDisplay(type==='FogExp2'?'':'none');}
refreshUI();signals.editorCleared.add(refreshUI);signals.sceneGraphChanged.add(refreshUI);signals.objectChanged.add(function(object){var options=outliner.options;for(var i=0;i<options.length;i++){var option=options[i];if(option.value===object.id){option.innerHTML=buildHTML(object);return;}}});signals.objectSelected.add(function(object){if(ignoreObjectSelectedSignal===true)return;outliner.setValue(object!==null?object.id:null);});function update(){editor.setModelDimensions(length.getValue(),wingspan.getValue(),height.getValue())}
return container;};Sidebar.Project=function(editor){var config=editor.config;var signals=editor.signals;var rendererTypes={'WebGLRenderer':THREE.WebGLRenderer,'CanvasRenderer':THREE.CanvasRenderer,'SVGRenderer':THREE.SVGRenderer,'SoftwareRenderer':THREE.SoftwareRenderer,'RaytracingRenderer':THREE.RaytracingRenderer};var container=new UI.Panel();container.setBorderTop('0');container.setPaddingTop('20px');var options={};for(var key in rendererTypes){if(key.indexOf('WebGL')>=0&&System.support.webgl===false)continue;options[key]=key;}
var rendererTypeRow=new UI.Row();var rendererType=new UI.Select().setOptions(options).setWidth('150px').onChange(function(){var value=this.getValue();config.setKey('project/renderer',value);updateRenderer();});rendererTypeRow.add(new UI.Text('Renderer').setWidth('90px'));rendererTypeRow.add(rendererType);container.add(rendererTypeRow);if(config.getKey('project/renderer')!==undefined){rendererType.setValue(config.getKey('project/renderer'));}
var rendererPropertiesRow=new UI.Row().setMarginLeft('90px');var rendererAntialias=new UI.THREE.Boolean(config.getKey('project/renderer/antialias'),'antialias').onChange(function(){config.setKey('project/renderer/antialias',this.getValue());updateRenderer();});rendererPropertiesRow.add(rendererAntialias);var rendererShadows=new UI.THREE.Boolean(config.getKey('project/renderer/shadows'),'shadows').onChange(function(){config.setKey('project/renderer/shadows',this.getValue());updateRenderer();});rendererPropertiesRow.add(rendererShadows);rendererPropertiesRow.add(new UI.Break());var rendererGammaInput=new UI.THREE.Boolean(config.getKey('project/renderer/gammaInput'),'γ input').onChange(function(){config.setKey('project/renderer/gammaInput',this.getValue());updateRenderer();});rendererPropertiesRow.add(rendererGammaInput);var rendererGammaOutput=new UI.THREE.Boolean(config.getKey('project/renderer/gammaOutput'),'γ output').onChange(function(){config.setKey('project/renderer/gammaOutput',this.getValue());updateRenderer();});rendererPropertiesRow.add(rendererGammaOutput);container.add(rendererPropertiesRow);var vrRow=new UI.Row();var vr=new UI.Checkbox(config.getKey('project/vr')).setLeft('100px').onChange(function(){config.setKey('project/vr',this.getValue());});vrRow.add(new UI.Text('VR').setWidth('90px'));vrRow.add(vr);container.add(vrRow);function updateRenderer(){createRenderer(rendererType.getValue(),rendererAntialias.getValue(),rendererShadows.getValue(),rendererGammaInput.getValue(),rendererGammaOutput.getValue());}
function createRenderer(type,antialias,shadows,gammaIn,gammaOut){if(type==='WebGLRenderer'&&System.support.webgl===false){type='CanvasRenderer';}
rendererPropertiesRow.setDisplay(type==='WebGLRenderer'?'':'none');var renderer=new rendererTypes[type]({antialias:antialias});renderer.gammaInput=gammaIn;renderer.gammaOutput=gammaOut;if(shadows&&renderer.shadowMap){renderer.shadowMap.enabled=true;}
signals.rendererChanged.dispatch(renderer);}
createRenderer(config.getKey('project/renderer'),config.getKey('project/renderer/antialias'),config.getKey('project/renderer/shadows'),config.getKey('project/renderer/gammaInput'),config.getKey('project/renderer/gammaOutput'));return container;};Sidebar.Settings=function(editor){var config=editor.config;var signals=editor.signals;var container=new UI.Panel();container.setBorderTop('0');container.setPaddingTop('20px');var options={'static/css/light.css':'light','static/css/dark.css':'dark'};var themeRow=new UI.Row();var theme=new UI.Select().setWidth('150px');theme.setOptions(options);if(config.getKey('theme')!==undefined){theme.setValue(config.getKey('theme'));}
theme.onChange(function(){var value=this.getValue();editor.setTheme(value);editor.config.setKey('theme',value);});themeRow.add(new UI.Text('Theme').setWidth('90px'));themeRow.add(theme);container.add(themeRow);return container;};Sidebar.Properties=function(editor){var signals=editor.signals;var container=new UI.Span();var objectTab=new UI.Text('OBJECT').onClick(onClick);var tabs=new UI.Div();tabs.setId('tabs');tabs.add(objectTab);container.add(tabs);function onClick(event){select(event.target.textContent);}
var object=new UI.Span().add(new Sidebar.Object(editor));container.add(object);return container;};Sidebar.Object=function(editor){var signals=editor.signals;var container=new UI.Panel();container.setBorderTop('0');container.setPaddingTop('20px');container.setDisplay('none');var objectActions=new UI.Select().setPosition('absolute').setRight('8px').setFontSize('11px');objectActions.setOptions({'Actions':'Actions','Reset Position':'Reset Position','Reset Rotation':'Reset Rotation','Reset Scale':'Reset Scale'});objectActions.onClick(function(event){event.stopPropagation();});objectActions.onChange(function(event){var object=editor.selected;switch(this.getValue()){case'Reset Position':editor.execute(new SetPositionCommand(object,new THREE.Vector3(0,0,0)));break;case'Reset Rotation':editor.execute(new SetRotationCommand(object,new THREE.Euler(0,0,0)));break;case'Reset Scale':editor.execute(new SetScaleCommand(object,new THREE.Vector3(1,1,1)));break;}
this.setValue('Actions');});var objectTypeRow=new UI.Row();var objectType=new UI.Text();objectTypeRow.add(new UI.Text('Type').setWidth('90px'));objectTypeRow.add(objectType);var objectUUIDRow=new UI.Row();var objectUUID=new UI.Input().setWidth('102px').setFontSize('12px').setDisabled(true);var objectUUIDRenew=new UI.Button('New').setMarginLeft('7px').onClick(function(){objectUUID.setValue(THREE.Math.generateUUID());editor.execute(new SetUuidCommand(editor.selected,objectUUID.getValue()));});objectUUIDRow.add(new UI.Text('UUID').setWidth('90px'));objectUUIDRow.add(objectUUID);objectUUIDRow.add(objectUUIDRenew);var objectNameRow=new UI.Row();var objectName=new UI.Input().setWidth('150px').setFontSize('12px').onChange(function(){editor.execute(new SetValueCommand(editor.selected,'name',objectName.getValue()));});objectNameRow.add(new UI.Text('Name').setWidth('90px'));objectNameRow.add(objectName);container.add(objectNameRow);var objectPositionRow=new UI.Row();var objectPositionX=new UI.Number().setWidth('50px').onChange(update);var objectPositionY=new UI.Number().setWidth('50px').onChange(update);var objectPositionZ=new UI.Number().setWidth('50px').onChange(update);objectPositionRow.add(new UI.Text('Position').setWidth('90px'));objectPositionRow.add(objectPositionZ,objectPositionX,objectPositionY);container.add(objectPositionRow);var objectRotationRow=new UI.Row();var objectRotationX=new UI.Number().setStep(10).setUnit('°').setWidth('50px').onChange(update);var objectRotationY=new UI.Number().setStep(10).setUnit('°').setWidth('50px').onChange(update);var objectRotationZ=new UI.Number().setStep(10).setUnit('°').setWidth('50px').onChange(update);objectRotationRow.add(new UI.Text('Rotation').setWidth('90px'));objectRotationRow.add(objectRotationZ,objectRotationX,objectRotationY);container.add(objectRotationRow);var objectScaleRow=new UI.Row();var objectScaleLock=new UI.Checkbox(true).setPosition('absolute').setLeft('75px');var objectScaleX=new UI.Number(1).setRange(0.01,Infinity).setWidth('50px').onChange(updateScaleX);var objectScaleY=new UI.Number(1).setRange(0.01,Infinity).setWidth('50px').onChange(updateScaleY);var objectScaleZ=new UI.Number(1).setRange(0.01,Infinity).setWidth('50px').onChange(updateScaleZ);objectScaleRow.add(new UI.Text('Scale').setWidth('90px'));objectScaleRow.add(objectScaleZ,objectScaleX,objectScaleY);var objectFovRow=new UI.Row();var objectFov=new UI.Number().onChange(update);objectFovRow.add(new UI.Text('Fov').setWidth('90px'));objectFovRow.add(objectFov);var objectNearRow=new UI.Row();var objectNear=new UI.Number().onChange(update);objectNearRow.add(new UI.Text('Near').setWidth('90px'));objectNearRow.add(objectNear);var objectFarRow=new UI.Row();var objectFar=new UI.Number().onChange(update);objectFarRow.add(new UI.Text('Far').setWidth('90px'));objectFarRow.add(objectFar);var objectIntensityRow=new UI.Row();var objectIntensity=new UI.Number().setRange(0,Infinity).onChange(update);objectIntensityRow.add(new UI.Text('Intensity').setWidth('90px'));objectIntensityRow.add(objectIntensity);var objectColorRow=new UI.Row();var objectColor=new UI.Color().onChange(update);objectColorRow.add(new UI.Text('Color').setWidth('90px'));objectColorRow.add(objectColor);var objectGroundColorRow=new UI.Row();var objectGroundColor=new UI.Color().onChange(update);objectGroundColorRow.add(new UI.Text('Ground color').setWidth('90px'));objectGroundColorRow.add(objectGroundColor);var objectDistanceRow=new UI.Row();var objectDistance=new UI.Number().setRange(0,Infinity).onChange(update);objectDistanceRow.add(new UI.Text('Distance').setWidth('90px'));objectDistanceRow.add(objectDistance);var objectAngleRow=new UI.Row();var objectAngle=new UI.Number().setPrecision(3).setRange(0,Math.PI/2).onChange(update);objectAngleRow.add(new UI.Text('Angle').setWidth('90px'));objectAngleRow.add(objectAngle);var objectPenumbraRow=new UI.Row();var objectPenumbra=new UI.Number().setRange(0,1).onChange(update);objectPenumbraRow.add(new UI.Text('Penumbra').setWidth('90px'));objectPenumbraRow.add(objectPenumbra);var objectDecayRow=new UI.Row();var objectDecay=new UI.Number().setRange(0,Infinity).onChange(update);objectDecayRow.add(new UI.Text('Decay').setWidth('90px'));objectDecayRow.add(objectDecay);var objectShadowRow=new UI.Row();objectShadowRow.add(new UI.Text('Shadow').setWidth('90px'));var objectCastShadow=new UI.THREE.Boolean(false,'cast').onChange(update);objectShadowRow.add(objectCastShadow);var objectReceiveShadow=new UI.THREE.Boolean(false,'receive').onChange(update);objectShadowRow.add(objectReceiveShadow);var objectShadowRadius=new UI.Number(1).onChange(update);objectShadowRow.add(objectShadowRadius);var objectVisibleRow=new UI.Row();var objectVisible=new UI.Checkbox().onChange(update);objectVisibleRow.add(new UI.Text('Visible').setWidth('90px'));objectVisibleRow.add(objectVisible);container.add(objectVisibleRow);var materialWireframeRow=new UI.Row();var materialWireframe=new UI.Checkbox(false).onChange(update);materialWireframeRow.add(new UI.Text('Wireframe').setWidth('90px'));materialWireframeRow.add(materialWireframe);container.add(materialWireframeRow);var timeout;var objectUserDataRow=new UI.Row();var objectUserData=new UI.TextArea().setWidth('150px').setHeight('40px').setFontSize('12px').onChange(update);objectUserData.onKeyUp(function(){try{JSON.parse(objectUserData.getValue());objectUserData.dom.classList.add('success');objectUserData.dom.classList.remove('fail');}catch(error){objectUserData.dom.classList.remove('success');objectUserData.dom.classList.add('fail');}});objectUserDataRow.add(new UI.Text('User data').setWidth('90px'));objectUserDataRow.add(objectUserData);function updateScaleX(){var object=editor.selected;if(objectScaleLock.getValue()===true){var scale=objectScaleX.getValue()/object.scale.x;objectScaleY.setValue(objectScaleY.getValue()*scale);objectScaleZ.setValue(objectScaleZ.getValue()*scale);}
update();}
function updateScaleY(){var object=editor.selected;if(objectScaleLock.getValue()===true){var scale=objectScaleY.getValue()/object.scale.y;objectScaleX.setValue(objectScaleX.getValue()*scale);objectScaleZ.setValue(objectScaleZ.getValue()*scale);}
update();}
function updateScaleZ(){var object=editor.selected;if(objectScaleLock.getValue()===true){var scale=objectScaleZ.getValue()/object.scale.z;objectScaleX.setValue(objectScaleX.getValue()*scale);objectScaleY.setValue(objectScaleY.getValue()*scale);}
update();}
function update(){var object=editor.selected;if(object!==null){var right_wing=editor.getModel()[0];var left_wing=editor.getModel()[1];var y_slope=(right_wing-left_wing)/editor.getModelWingspan();var x=(objectPositionX.getValue()*y_slope)+(left_wing+right_wing)/2;var z_nose=editor.getModel()[3];var z_tail=editor.getModel()[2];var z_slope=(z_nose-z_tail)/editor.getModelHeight();var y=((objectPositionY.getValue()*z_slope)+z_nose);var x_nose=editor.getModel()[4];var x_tail=editor.getModel()[5];var x_slope=(x_nose-x_tail)/editor.getModelLength();var z=x_nose+(objectPositionZ.getValue()*x_slope);var newPosition=new THREE.Vector3(x,y,z);if(object.position.distanceTo(newPosition)>=0.01){editor.execute(new SetPositionCommand(object,newPosition));}
var newRotation=new THREE.Euler(objectRotationX.getValue()*THREE.Math.DEG2RAD,objectRotationY.getValue()*THREE.Math.DEG2RAD,objectRotationZ.getValue()*THREE.Math.DEG2RAD);if(object.rotation.toVector3().distanceTo(newRotation.toVector3())>=0.01){editor.execute(new SetRotationCommand(object,newRotation));}
var newScale=new THREE.Vector3(objectScaleX.getValue(),objectScaleY.getValue(),objectScaleZ.getValue());if(object.scale.distanceTo(newScale)>=0.001){editor.execute(new SetScaleCommand(object,newScale));}
if(object.fov!==undefined&&Math.abs(object.fov-objectFov.getValue())>=0.01){editor.execute(new SetValueCommand(object,'fov',objectFov.getValue()));object.updateProjectionMatrix();}
if(object.near!==undefined&&Math.abs(object.near-objectNear.getValue())>=0.01){editor.execute(new SetValueCommand(object,'near',objectNear.getValue()));}
if(object.far!==undefined&&Math.abs(object.far-objectFar.getValue())>=0.01){editor.execute(new SetValueCommand(object,'far',objectFar.getValue()));}
if(object.intensity!==undefined&&Math.abs(object.intensity-objectIntensity.getValue())>=0.01){editor.execute(new SetValueCommand(object,'intensity',objectIntensity.getValue()));}
if(object.color!==undefined&&object.color.getHex()!==objectColor.getHexValue()){editor.execute(new SetColorCommand(object,'color',objectColor.getHexValue()));}
if(object.groundColor!==undefined&&object.groundColor.getHex()!==objectGroundColor.getHexValue()){editor.execute(new SetColorCommand(object,'groundColor',objectGroundColor.getHexValue()));}
if(object.distance!==undefined&&Math.abs(object.distance-objectDistance.getValue())>=0.01){editor.execute(new SetValueCommand(object,'distance',objectDistance.getValue()));}
if(object.angle!==undefined&&Math.abs(object.angle-objectAngle.getValue())>=0.01){editor.execute(new SetValueCommand(object,'angle',objectAngle.getValue()));}
if(object.penumbra!==undefined&&Math.abs(object.penumbra-objectPenumbra.getValue())>=0.01){editor.execute(new SetValueCommand(object,'penumbra',objectPenumbra.getValue()));}
if(object.decay!==undefined&&Math.abs(object.decay-objectDecay.getValue())>=0.01){editor.execute(new SetValueCommand(object,'decay',objectDecay.getValue()));}
if(object.children.length>0&&(editor.getObjectMaterial((object.children)[0]))!==undefined&&(editor.getObjectMaterial((object.children)[0])).wireframe!==undefined&&(editor.getObjectMaterial((object.children)[0])).wireframe!==materialWireframe.getValue()){var objects=object.children;var cmds=[];var currentObject;for(var i=0,l=objects.length;i<l;i++){currentObject=objects[i];if(editor.getObjectMaterial(currentObject)!==undefined&&editor.getObjectMaterial(currentObject).wireframe!==undefined){cmds.push(new SetMaterialValueCommand(currentObject,'wireframe',materialWireframe.getValue()));};}
editor.execute(new MultiCmdsCommand(cmds));}else if(object.children.length==0&&editor.getObjectMaterial(object)!==undefined&&(editor.getObjectMaterial(object)).wireframe!==undefined&&(editor.getObjectMaterial(object)).wireframe!==materialWireframe.getValue()){editor.execute(new SetMaterialValueCommand(object,'wireframe',materialWireframe.getValue()));}
if(object.visible!==objectVisible.getValue()){editor.execute(new SetValueCommand(object,'visible',objectVisible.getValue()));}
if(object.castShadow!==undefined&&object.castShadow!==objectCastShadow.getValue()){editor.execute(new SetValueCommand(object,'castShadow',objectCastShadow.getValue()));}
if(object.receiveShadow!==undefined&&object.receiveShadow!==objectReceiveShadow.getValue()){editor.execute(new SetValueCommand(object,'receiveShadow',objectReceiveShadow.getValue()));object.material.needsUpdate=true;}
if(object.shadow!==undefined){if(object.shadow.radius!==objectShadowRadius.getValue()){editor.execute(new SetValueCommand(object.shadow,'radius',objectShadowRadius.getValue()));}}
try{var userData=JSON.parse(objectUserData.getValue());if(JSON.stringify(object.userData)!=JSON.stringify(userData)){editor.execute(new SetValueCommand(object,'userData',userData));}}catch(exception){console.warn(exception);}}}
function updateRows(object){var properties={'fov':objectFovRow,'near':objectNearRow,'far':objectFarRow,'intensity':objectIntensityRow,'color':objectColorRow,'groundColor':objectGroundColorRow,'distance':objectDistanceRow,'angle':objectAngleRow,'penumbra':objectPenumbraRow,'decay':objectDecayRow,'castShadow':objectShadowRow,'receiveShadow':objectReceiveShadow,'shadow':objectShadowRadius};for(var property in properties){properties[property].setDisplay(object[property]!==undefined?'':'none');}}
function updateTransformRows(object){if(object instanceof THREE.Light||(object instanceof THREE.Object3D&&object.userData.targetInverse)){objectRotationRow.setDisplay('none');objectScaleRow.setDisplay('none');}else{objectRotationRow.setDisplay('');objectScaleRow.setDisplay('');}}
signals.objectSelected.add(function(object){if(object!==null){container.setDisplay('block');updateRows(object);updateUI(object);}else{container.setDisplay('none');}});signals.objectChanged.add(function(object){if(object!==editor.selected)return;updateUI(object);});signals.refreshSidebarObject3D.add(function(object){if(object!==editor.selected)return;updateUI(object);});function updateUI(object){objectType.setValue(object.type);objectUUID.setValue(object.uuid);objectName.setValue(object.name);var right_wing=editor.getModel()[0];var left_wing=editor.getModel()[1];var y_slope=(right_wing-left_wing)/editor.getModelWingspan();var x=(object.position.x-(left_wing+right_wing)/2)/y_slope;objectPositionX.setValue(x);var z_nose=editor.getModel()[3];var z_tail=editor.getModel()[2];var z_slope=(z_nose-z_tail)/editor.getModelHeight();var y=(object.position.y-z_nose)/z_slope;objectPositionY.setValue(y);var x_nose=editor.getModel()[4];var x_tail=editor.getModel()[5];var x_slope=(x_nose-x_tail)/editor.getModelLength();var z=(object.position.z-x_nose)/x_slope;objectPositionZ.setValue(z);objectRotationX.setValue(object.rotation.x*THREE.Math.RAD2DEG);objectRotationY.setValue(object.rotation.y*THREE.Math.RAD2DEG);objectRotationZ.setValue(object.rotation.z*THREE.Math.RAD2DEG);objectScaleX.setValue(object.scale.x);objectScaleY.setValue(object.scale.y);objectScaleZ.setValue(object.scale.z);if(object.fov!==undefined){objectFov.setValue(object.fov);}
if(object.near!==undefined){objectNear.setValue(object.near);}
if(object.far!==undefined){objectFar.setValue(object.far);}
if(object.intensity!==undefined){objectIntensity.setValue(object.intensity);}
if(object.color!==undefined){objectColor.setHexValue(object.color.getHexString());}
if(object.groundColor!==undefined){objectGroundColor.setHexValue(object.groundColor.getHexString());}
if(object.distance!==undefined){objectDistance.setValue(object.distance);}
if(object.angle!==undefined){objectAngle.setValue(object.angle);}
if(object.penumbra!==undefined){objectPenumbra.setValue(object.penumbra);}
if(object.decay!==undefined){objectDecay.setValue(object.decay);}
if(object.castShadow!==undefined){objectCastShadow.setValue(object.castShadow);}
if(object.receiveShadow!==undefined){objectReceiveShadow.setValue(object.receiveShadow);}
if(object.shadow!==undefined){objectShadowRadius.setValue(object.shadow.radius);}
objectVisible.setValue(object.visible);if(object.children.length>0&&editor.getObjectMaterial((object.children)[0])!==undefined&&(editor.getObjectMaterial((object.children)[0])).wireframe!==undefined){for(var i=0;i<object.children.length;i++){if(editor.getObjectMaterial((object.children)[i])!==undefined&&editor.getObjectMaterial((object.children)[i]).wireframe!==undefined){materialWireframe.setValue((editor.getObjectMaterial((object.children)[i])).wireframe);}}}else if(object.children.length==0&&editor.getObjectMaterial(object)!==undefined&&editor.getObjectMaterial(object).wireframe!==undefined){materialWireframe.setValue((editor.getObjectMaterial(object)).wireframe);}
try{objectUserData.setValue(JSON.stringify(object.userData,null,'  '));}catch(error){console.log(error);}
objectUserData.setBorderColor('transparent');objectUserData.setBackgroundColor('');updateTransformRows(object);}
return container;};Sidebar.Geometry=function(editor){var signals=editor.signals;var container=new UI.Panel();container.setBorderTop('0');container.setPaddingTop('20px');var geometryTypeRow=new UI.Row();var geometryType=new UI.Text();geometryTypeRow.add(new UI.Text('Type').setWidth('90px'));geometryTypeRow.add(geometryType);container.add(geometryTypeRow);var geometryUUIDRow=new UI.Row();var geometryUUID=new UI.Input().setWidth('102px').setFontSize('12px').setDisabled(true);var geometryUUIDRenew=new UI.Button('New').setMarginLeft('7px').onClick(function(){geometryUUID.setValue(THREE.Math.generateUUID());editor.execute(new SetGeometryValueCommand(editor.selected,'uuid',geometryUUID.getValue()));});geometryUUIDRow.add(new UI.Text('UUID').setWidth('90px'));geometryUUIDRow.add(geometryUUID);geometryUUIDRow.add(geometryUUIDRenew);container.add(geometryUUIDRow);var geometryNameRow=new UI.Row();var geometryName=new UI.Input().setWidth('150px').setFontSize('12px').onChange(function(){editor.execute(new SetGeometryValueCommand(editor.selected,'name',geometryName.getValue()));});geometryNameRow.add(new UI.Text('Name').setWidth('90px'));geometryNameRow.add(geometryName);container.add(geometryNameRow);container.add(new Sidebar.Geometry.Geometry(editor));container.add(new Sidebar.Geometry.BufferGeometry(editor));var parameters=new UI.Span();container.add(parameters);function build(){var object=editor.selected;if(object&&object.geometry){var geometry=object.geometry;container.setDisplay('block');geometryType.setValue(geometry.type);geometryUUID.setValue(geometry.uuid);geometryName.setValue(geometry.name);parameters.clear();if(geometry.type==='BufferGeometry'||geometry.type==='Geometry'){parameters.add(new Sidebar.Geometry.Modifiers(editor,object));}else if(Sidebar.Geometry[geometry.type]!==undefined){parameters.add(new Sidebar.Geometry[geometry.type](editor,object));}}else{container.setDisplay('none');}}
signals.objectSelected.add(build);signals.geometryChanged.add(build);return container;};Sidebar.Geometry.Geometry=function(editor){var signals=editor.signals;var container=new UI.Row();var verticesRow=new UI.Row();var vertices=new UI.Text();verticesRow.add(new UI.Text('Vertices').setWidth('90px'));verticesRow.add(vertices);container.add(verticesRow);var facesRow=new UI.Row();var faces=new UI.Text();facesRow.add(new UI.Text('Faces').setWidth('90px'));facesRow.add(faces);container.add(facesRow);function update(object){if(object===null)return;if(object===undefined)return;var geometry=object.geometry;if(geometry instanceof THREE.Geometry){container.setDisplay('block');vertices.setValue((geometry.vertices.length).format());faces.setValue((geometry.faces.length).format());}else{container.setDisplay('none');}}
signals.objectSelected.add(update);signals.geometryChanged.add(update);return container;};Sidebar.Geometry.BufferGeometry=function(editor){var signals=editor.signals;var container=new UI.Row();function update(object){if(object===null)return;if(object===undefined)return;var geometry=object.geometry;if(geometry instanceof THREE.BufferGeometry){container.clear();container.setDisplay('block');var index=geometry.index;if(index!==null){var panel=new UI.Row();panel.add(new UI.Text('index').setWidth('90px'));panel.add(new UI.Text((index.count).format()).setFontSize('12px'));container.add(panel);}
var attributes=geometry.attributes;for(var name in attributes){var attribute=attributes[name];var panel=new UI.Row();panel.add(new UI.Text(name).setWidth('90px'));panel.add(new UI.Text((attribute.count).format()+' ('+attribute.itemSize+')').setFontSize('12px'));container.add(panel);}}else{container.setDisplay('none');}}
signals.objectSelected.add(update);signals.geometryChanged.add(update);return container;};Sidebar.Geometry.Modifiers=function(editor,object){var signals=editor.signals;var container=new UI.Row().setPaddingLeft('90px');var geometry=object.geometry;var button=new UI.Button('Compute Vertex Normals');button.onClick(function(){geometry.computeVertexNormals();if(geometry instanceof THREE.BufferGeometry){geometry.attributes.normal.needsUpdate=true;}else{geometry.normalsNeedUpdate=true;}
signals.geometryChanged.dispatch(object);});container.add(button);return container;};Sidebar.Geometry.BoxGeometry=function(editor,object){var signals=editor.signals;var container=new UI.Row();var geometry=object.geometry;var parameters=geometry.parameters;var widthRow=new UI.Row();var width=new UI.Number(parameters.width).onChange(update);widthRow.add(new UI.Text('Width').setWidth('90px'));widthRow.add(width);container.add(widthRow);var heightRow=new UI.Row();var height=new UI.Number(parameters.height).onChange(update);heightRow.add(new UI.Text('Height').setWidth('90px'));heightRow.add(height);container.add(heightRow);var depthRow=new UI.Row();var depth=new UI.Number(parameters.depth).onChange(update);depthRow.add(new UI.Text('Depth').setWidth('90px'));depthRow.add(depth);container.add(depthRow);var widthSegmentsRow=new UI.Row();var widthSegments=new UI.Integer(parameters.widthSegments).setRange(1,Infinity).onChange(update);widthSegmentsRow.add(new UI.Text('Width segments').setWidth('90px'));widthSegmentsRow.add(widthSegments);container.add(widthSegmentsRow);var heightSegmentsRow=new UI.Row();var heightSegments=new UI.Integer(parameters.heightSegments).setRange(1,Infinity).onChange(update);heightSegmentsRow.add(new UI.Text('Height segments').setWidth('90px'));heightSegmentsRow.add(heightSegments);container.add(heightSegmentsRow);var depthSegmentsRow=new UI.Row();var depthSegments=new UI.Integer(parameters.depthSegments).setRange(1,Infinity).onChange(update);depthSegmentsRow.add(new UI.Text('Depth segments').setWidth('90px'));depthSegmentsRow.add(depthSegments);container.add(depthSegmentsRow);function update(){editor.execute(new SetGeometryCommand(object,new THREE[geometry.type](width.getValue(),height.getValue(),depth.getValue(),widthSegments.getValue(),heightSegments.getValue(),depthSegments.getValue())));}
return container;};Sidebar.Geometry.BoxBufferGeometry=Sidebar.Geometry.BoxGeometry;Sidebar.Geometry.CircleGeometry=function(editor,object){var signals=editor.signals;var container=new UI.Row();var geometry=object.geometry;var parameters=geometry.parameters;var radiusRow=new UI.Row();var radius=new UI.Number(parameters.radius).onChange(update);radiusRow.add(new UI.Text('Radius').setWidth('90px'));radiusRow.add(radius);container.add(radiusRow);var segmentsRow=new UI.Row();var segments=new UI.Integer(parameters.segments).setRange(3,Infinity).onChange(update);segmentsRow.add(new UI.Text('Segments').setWidth('90px'));segmentsRow.add(segments);container.add(segmentsRow);var thetaStartRow=new UI.Row();var thetaStart=new UI.Number(parameters.thetaStart).onChange(update);thetaStartRow.add(new UI.Text('Theta start').setWidth('90px'));thetaStartRow.add(thetaStart);container.add(thetaStartRow);var thetaLengthRow=new UI.Row();var thetaLength=new UI.Number(parameters.thetaLength).onChange(update);thetaLengthRow.add(new UI.Text('Theta length').setWidth('90px'));thetaLengthRow.add(thetaLength);container.add(thetaLengthRow);function update(){editor.execute(new SetGeometryCommand(object,new THREE[geometry.type](radius.getValue(),segments.getValue(),thetaStart.getValue(),thetaLength.getValue())));}
return container;};Sidebar.Geometry.CircleBufferGeometry=Sidebar.Geometry.CircleGeometry;Sidebar.Geometry.CylinderGeometry=function(editor,object){var signals=editor.signals;var container=new UI.Row();var geometry=object.geometry;var parameters=geometry.parameters;var radiusTopRow=new UI.Row();var radiusTop=new UI.Number(parameters.radiusTop).onChange(update);radiusTopRow.add(new UI.Text('Radius top').setWidth('90px'));radiusTopRow.add(radiusTop);container.add(radiusTopRow);var radiusBottomRow=new UI.Row();var radiusBottom=new UI.Number(parameters.radiusBottom).onChange(update);radiusBottomRow.add(new UI.Text('Radius bottom').setWidth('90px'));radiusBottomRow.add(radiusBottom);container.add(radiusBottomRow);var heightRow=new UI.Row();var height=new UI.Number(parameters.height).onChange(update);heightRow.add(new UI.Text('Height').setWidth('90px'));heightRow.add(height);container.add(heightRow);var radialSegmentsRow=new UI.Row();var radialSegments=new UI.Integer(parameters.radialSegments).setRange(1,Infinity).onChange(update);radialSegmentsRow.add(new UI.Text('Radial segments').setWidth('90px'));radialSegmentsRow.add(radialSegments);container.add(radialSegmentsRow);var heightSegmentsRow=new UI.Row();var heightSegments=new UI.Integer(parameters.heightSegments).setRange(1,Infinity).onChange(update);heightSegmentsRow.add(new UI.Text('Height segments').setWidth('90px'));heightSegmentsRow.add(heightSegments);container.add(heightSegmentsRow);var openEndedRow=new UI.Row();var openEnded=new UI.Checkbox(parameters.openEnded).onChange(update);openEndedRow.add(new UI.Text('Open ended').setWidth('90px'));openEndedRow.add(openEnded);container.add(openEndedRow);function update(){editor.execute(new SetGeometryCommand(object,new THREE[geometry.type](radiusTop.getValue(),radiusBottom.getValue(),height.getValue(),radialSegments.getValue(),heightSegments.getValue(),openEnded.getValue())));}
return container;};Sidebar.Geometry.CylinderBufferGeometry=Sidebar.Geometry.CylinderGeometry;Sidebar.Geometry.IcosahedronGeometry=function(editor,object){var signals=editor.signals;var container=new UI.Row();var geometry=object.geometry;var parameters=geometry.parameters;var radiusRow=new UI.Row();var radius=new UI.Number(parameters.radius).onChange(update);radiusRow.add(new UI.Text('Radius').setWidth('90px'));radiusRow.add(radius);container.add(radiusRow);var detailRow=new UI.Row();var detail=new UI.Integer(parameters.detail).setRange(0,Infinity).onChange(update);detailRow.add(new UI.Text('Detail').setWidth('90px'));detailRow.add(detail);container.add(detailRow);function update(){editor.execute(new SetGeometryCommand(object,new THREE[geometry.type](radius.getValue(),detail.getValue())));signals.objectChanged.dispatch(object);}
return container;};Sidebar.Geometry.IcosahedronBufferGeometry=Sidebar.Geometry.IcosahedronGeometry;Sidebar.Geometry.PlaneGeometry=function(editor,object){var signals=editor.signals;var container=new UI.Row();var geometry=object.geometry;var parameters=geometry.parameters;var widthRow=new UI.Row();var width=new UI.Number(parameters.width).onChange(update);widthRow.add(new UI.Text('Width').setWidth('90px'));widthRow.add(width);container.add(widthRow);var heightRow=new UI.Row();var height=new UI.Number(parameters.height).onChange(update);heightRow.add(new UI.Text('Height').setWidth('90px'));heightRow.add(height);container.add(heightRow);var widthSegmentsRow=new UI.Row();var widthSegments=new UI.Integer(parameters.widthSegments).setRange(1,Infinity).onChange(update);widthSegmentsRow.add(new UI.Text('Width segments').setWidth('90px'));widthSegmentsRow.add(widthSegments);container.add(widthSegmentsRow);var heightSegmentsRow=new UI.Row();var heightSegments=new UI.Integer(parameters.heightSegments).setRange(1,Infinity).onChange(update);heightSegmentsRow.add(new UI.Text('Height segments').setWidth('90px'));heightSegmentsRow.add(heightSegments);container.add(heightSegmentsRow);function update(){editor.execute(new SetGeometryCommand(object,new THREE[geometry.type](width.getValue(),height.getValue(),widthSegments.getValue(),heightSegments.getValue())));}
return container;};Sidebar.Geometry.PlaneBufferGeometry=Sidebar.Geometry.PlaneGeometry;Sidebar.Geometry.SphereGeometry=function(editor,object){var signals=editor.signals;var container=new UI.Row();var geometry=object.geometry;var parameters=geometry.parameters;var radiusRow=new UI.Row();var radius=new UI.Number(parameters.radius).onChange(update);radiusRow.add(new UI.Text('Radius').setWidth('90px'));radiusRow.add(radius);container.add(radiusRow);var widthSegmentsRow=new UI.Row();var widthSegments=new UI.Integer(parameters.widthSegments).setRange(1,Infinity).onChange(update);widthSegmentsRow.add(new UI.Text('Width segments').setWidth('90px'));widthSegmentsRow.add(widthSegments);container.add(widthSegmentsRow);var heightSegmentsRow=new UI.Row();var heightSegments=new UI.Integer(parameters.heightSegments).setRange(1,Infinity).onChange(update);heightSegmentsRow.add(new UI.Text('Height segments').setWidth('90px'));heightSegmentsRow.add(heightSegments);container.add(heightSegmentsRow);var phiStartRow=new UI.Row();var phiStart=new UI.Number(parameters.phiStart).onChange(update);phiStartRow.add(new UI.Text('Phi start').setWidth('90px'));phiStartRow.add(phiStart);container.add(phiStartRow);var phiLengthRow=new UI.Row();var phiLength=new UI.Number(parameters.phiLength).onChange(update);phiLengthRow.add(new UI.Text('Phi length').setWidth('90px'));phiLengthRow.add(phiLength);container.add(phiLengthRow);var thetaStartRow=new UI.Row();var thetaStart=new UI.Number(parameters.thetaStart).onChange(update);thetaStartRow.add(new UI.Text('Theta start').setWidth('90px'));thetaStartRow.add(thetaStart);container.add(thetaStartRow);var thetaLengthRow=new UI.Row();var thetaLength=new UI.Number(parameters.thetaLength).onChange(update);thetaLengthRow.add(new UI.Text('Theta length').setWidth('90px'));thetaLengthRow.add(thetaLength);container.add(thetaLengthRow);function update(){editor.execute(new SetGeometryCommand(object,new THREE[geometry.type](radius.getValue(),widthSegments.getValue(),heightSegments.getValue(),phiStart.getValue(),phiLength.getValue(),thetaStart.getValue(),thetaLength.getValue())));}
return container;};Sidebar.Geometry.SphereBufferGeometry=Sidebar.Geometry.SphereGeometry;Sidebar.Geometry.TorusGeometry=function(editor,object){var signals=editor.signals;var container=new UI.Row();var geometry=object.geometry;var parameters=geometry.parameters;var radiusRow=new UI.Row();var radius=new UI.Number(parameters.radius).onChange(update);radiusRow.add(new UI.Text('Radius').setWidth('90px'));radiusRow.add(radius);container.add(radiusRow);var tubeRow=new UI.Row();var tube=new UI.Number(parameters.tube).onChange(update);tubeRow.add(new UI.Text('Tube').setWidth('90px'));tubeRow.add(tube);container.add(tubeRow);var radialSegmentsRow=new UI.Row();var radialSegments=new UI.Integer(parameters.radialSegments).setRange(1,Infinity).onChange(update);radialSegmentsRow.add(new UI.Text('Radial segments').setWidth('90px'));radialSegmentsRow.add(radialSegments);container.add(radialSegmentsRow);var tubularSegmentsRow=new UI.Row();var tubularSegments=new UI.Integer(parameters.tubularSegments).setRange(1,Infinity).onChange(update);tubularSegmentsRow.add(new UI.Text('Tubular segments').setWidth('90px'));tubularSegmentsRow.add(tubularSegments);container.add(tubularSegmentsRow);var arcRow=new UI.Row();var arc=new UI.Number(parameters.arc).onChange(update);arcRow.add(new UI.Text('Arc').setWidth('90px'));arcRow.add(arc);container.add(arcRow);function update(){editor.execute(new SetGeometryCommand(object,new THREE[geometry.type](radius.getValue(),tube.getValue(),radialSegments.getValue(),tubularSegments.getValue(),arc.getValue())));}
return container;};Sidebar.Geometry.TorusBufferGeometry=Sidebar.Geometry.TorusGeometry;Sidebar.Geometry.TorusKnotGeometry=function(editor,object){var signals=editor.signals;var container=new UI.Row();var geometry=object.geometry;var parameters=geometry.parameters;var radiusRow=new UI.Row();var radius=new UI.Number(parameters.radius).onChange(update);radiusRow.add(new UI.Text('Radius').setWidth('90px'));radiusRow.add(radius);container.add(radiusRow);var tubeRow=new UI.Row();var tube=new UI.Number(parameters.tube).onChange(update);tubeRow.add(new UI.Text('Tube').setWidth('90px'));tubeRow.add(tube);container.add(tubeRow);var tubularSegmentsRow=new UI.Row();var tubularSegments=new UI.Integer(parameters.tubularSegments).setRange(1,Infinity).onChange(update);tubularSegmentsRow.add(new UI.Text('Tubular segments').setWidth('90px'));tubularSegmentsRow.add(tubularSegments);container.add(tubularSegmentsRow);var radialSegmentsRow=new UI.Row();var radialSegments=new UI.Integer(parameters.radialSegments).setRange(1,Infinity).onChange(update);radialSegmentsRow.add(new UI.Text('Radial segments').setWidth('90px'));radialSegmentsRow.add(radialSegments);container.add(radialSegmentsRow);var pRow=new UI.Row();var p=new UI.Number(parameters.p).onChange(update);pRow.add(new UI.Text('P').setWidth('90px'));pRow.add(p);container.add(pRow);var qRow=new UI.Row();var q=new UI.Number(parameters.q).onChange(update);pRow.add(new UI.Text('Q').setWidth('90px'));pRow.add(q);container.add(qRow);function update(){editor.execute(new SetGeometryCommand(object,new THREE[geometry.type](radius.getValue(),tube.getValue(),tubularSegments.getValue(),radialSegments.getValue(),p.getValue(),q.getValue())));}
return container;};Sidebar.Geometry.TorusKnotBufferGeometry=Sidebar.Geometry.TorusKnotGeometry;Sidebar.Geometry.TeapotBufferGeometry=function(signals,object){var container=new UI.Row();var parameters=object.geometry.parameters;var sizeRow=new UI.Row();var size=new UI.Number(parameters.size).onChange(update);sizeRow.add(new UI.Text('Size').setWidth('90px'));sizeRow.add(size);container.add(sizeRow);var segmentsRow=new UI.Row();var segments=new UI.Integer(parameters.segments).setRange(1,Infinity).onChange(update);segmentsRow.add(new UI.Text('Segments').setWidth('90px'));segmentsRow.add(segments);container.add(segmentsRow);var bottomRow=new UI.Row();var bottom=new UI.Checkbox(parameters.bottom).onChange(update);bottomRow.add(new UI.Text('Bottom').setWidth('90px'));bottomRow.add(bottom);container.add(bottomRow);var lidRow=new UI.Row();var lid=new UI.Checkbox(parameters.lid).onChange(update);lidRow.add(new UI.Text('Lid').setWidth('90px'));lidRow.add(lid);container.add(lidRow);var bodyRow=new UI.Row();var body=new UI.Checkbox(parameters.body).onChange(update);bodyRow.add(new UI.Text('Body').setWidth('90px'));bodyRow.add(body);container.add(bodyRow);var fitLidRow=new UI.Row();var fitLid=new UI.Checkbox(parameters.fitLid).onChange(update);fitLidRow.add(new UI.Text('Fitted Lid').setWidth('90px'));fitLidRow.add(fitLid);container.add(fitLidRow);var blinnRow=new UI.Row();var blinn=new UI.Checkbox(parameters.blinn).onChange(update);blinnRow.add(new UI.Text('Blinn-scaled').setWidth('90px'));blinnRow.add(blinn);container.add(blinnRow);function update(){object.geometry.dispose();object.geometry=new THREE.TeapotBufferGeometry(size.getValue(),segments.getValue(),bottom.getValue(),lid.getValue(),body.getValue(),fitLid.getValue(),blinn.getValue());object.geometry.computeBoundingSphere();signals.geometryChanged.dispatch(object);}
return container;};﻿
Sidebar.Geometry.LatheGeometry=function(editor,object){var signals=editor.signals;var container=new UI.Row();var geometry=object.geometry;var parameters=geometry.parameters;var segmentsRow=new UI.Row();var segments=new UI.Integer(parameters.segments).onChange(update);segmentsRow.add(new UI.Text('Segments').setWidth('90px'));segmentsRow.add(segments);container.add(segmentsRow);var phiStartRow=new UI.Row();var phiStart=new UI.Number(parameters.phiStart*180/Math.PI).onChange(update);phiStartRow.add(new UI.Text('Phi start (°)').setWidth('90px'));phiStartRow.add(phiStart);container.add(phiStartRow);var phiLengthRow=new UI.Row();var phiLength=new UI.Number(parameters.phiLength*180/Math.PI).onChange(update);phiLengthRow.add(new UI.Text('Phi length (°)').setWidth('90px'));phiLengthRow.add(phiLength);container.add(phiLengthRow);var lastPointIdx=0;var pointsUI=[];var pointsRow=new UI.Row();pointsRow.add(new UI.Text('Points').setWidth('90px'));var points=new UI.Span().setDisplay('inline-block');pointsRow.add(points);var pointsList=new UI.Div();points.add(pointsList);for(var i=0;i<parameters.points.length;i++){var point=parameters.points[i];pointsList.add(createPointRow(point.x,point.y));}
var addPointButton=new UI.Button('+').onClick(function(){if(pointsUI.length===0){pointsList.add(createPointRow(0,0));}else{var point=pointsUI[pointsUI.length-1];pointsList.add(createPointRow(point.x.getValue(),point.y.getValue()));}
update();});points.add(addPointButton);container.add(pointsRow);function createPointRow(x,y){var pointRow=new UI.Div();var lbl=new UI.Text(lastPointIdx+1).setWidth('20px');var txtX=new UI.Number(x).setRange(0,Infinity).setWidth('40px').onChange(update);var txtY=new UI.Number(y).setWidth('40px').onChange(update);var idx=lastPointIdx;var btn=new UI.Button('-').onClick(function(){deletePointRow(idx);});pointsUI.push({row:pointRow,lbl:lbl,x:txtX,y:txtY});lastPointIdx++;pointRow.add(lbl,txtX,txtY,btn);return pointRow;}
function deletePointRow(idx){if(!pointsUI[idx])return;pointsList.remove(pointsUI[idx].row);pointsUI[idx]=null;update();}
function update(){var points=[];var count=0;for(var i=0;i<pointsUI.length;i++){var pointUI=pointsUI[i];if(!pointUI)continue;points.push(new THREE.Vector2(pointUI.x.getValue(),pointUI.y.getValue()));count++;pointUI.lbl.setValue(count);}
editor.execute(new SetGeometryCommand(object,new THREE[geometry.type](points,segments.getValue(),phiStart.getValue()/180*Math.PI,phiLength.getValue()/180*Math.PI)));}
return container;};Sidebar.Geometry.LatheBufferGeometry=Sidebar.Geometry.LatheGeometry;Sidebar.Material=function(editor){var signals=editor.signals;var currentObject;var container=new UI.Panel();container.setBorderTop('0');container.setPaddingTop('20px');var materialWireframeRow=new UI.Row();var materialWireframe=new UI.Checkbox(false).onChange(update);materialWireframeRow.add(new UI.Text('Wireframe').setWidth('90px'));materialWireframeRow.add(materialWireframe);container.add(materialWireframeRow);function update(){var currentObject=editor.selected;if(currentObject){var cmds=[];var objects=currentObject.children;var object
for(var i=0,l=objects.length;i<l;i++){object=objects[i];cmds.push(new SetMaterialValueCommand(object,'wireframe',materialWireframe.getValue()));}
editor.execute(new MultiCmdsCommand(cmds),'wireframe');refreshUI();}
if(textureWarning){console.warn("Can't set texture, model doesn't have texture coordinates");}}
function refreshUI(resetTextureSelectors){if(!currentObject)return;var material=currentObject.material;material=editor.getObjectMaterial(currentObject);if(material.wireframe!==undefined){materialWireframe.setValue(material.wireframe);}}
signals.objectSelected.add(function(object){var objectChanged=object;currentObject=object;refreshUI(objectChanged);container.setDisplay('');});signals.materialChanged.add(function(){refreshUI();});return container;};Sidebar.Animation=function(editor){var signals=editor.signals;var options={};var possibleAnimations={};var container=new UI.Panel();container.setDisplay('none');container.add(new UI.Text('Animation').setTextTransform('uppercase'));container.add(new UI.Break());container.add(new UI.Break());var animationsRow=new UI.Row();container.add(animationsRow);return container;};Sidebar.History=function(editor){var signals=editor.signals;var config=editor.config;var history=editor.history;var container=new UI.Panel();container.add(new UI.Text('HISTORY'));container.add(new UI.Break());container.add(new UI.Break());var ignoreObjectSelectedSignal=false;var outliner=new UI.Outliner(editor);outliner.onChange(function(){ignoreObjectSelectedSignal=true;editor.history.goToState(parseInt(outliner.getValue()));ignoreObjectSelectedSignal=false;});container.add(outliner);var refreshUI=function(){var options=[];var enumerator=1;function buildOption(object){var option=document.createElement('div');option.value=object.id;return option;}
(function addObjects(objects){for(var i=0,l=objects.length;i<l;i++){var object=objects[i];var option=buildOption(object);option.innerHTML='&nbsp;'+object.name;options.push(option);}})(history.undos);(function addObjects(objects,pad){for(var i=objects.length-1;i>=0;i--){var object=objects[i];var option=buildOption(object);option.innerHTML='&nbsp;'+object.name;option.style.opacity=0.3;options.push(option);}})(history.redos,'&nbsp;');outliner.setOptions(options);};refreshUI();signals.editorCleared.add(refreshUI);signals.historyChanged.add(refreshUI);signals.historyChanged.add(function(cmd){outliner.setValue(cmd!==undefined?cmd.id:null);});return container;};THREE.RenderableObject=function(){this.id=0;this.object=null;this.z=0;this.renderOrder=0;};THREE.RenderableFace=function(){this.id=0;this.v1=new THREE.RenderableVertex();this.v2=new THREE.RenderableVertex();this.v3=new THREE.RenderableVertex();this.normalModel=new THREE.Vector3();this.vertexNormalsModel=[new THREE.Vector3(),new THREE.Vector3(),new THREE.Vector3()];this.vertexNormalsLength=0;this.color=new THREE.Color();this.material=null;this.uvs=[new THREE.Vector2(),new THREE.Vector2(),new THREE.Vector2()];this.z=0;this.renderOrder=0;};THREE.RenderableVertex=function(){this.position=new THREE.Vector3();this.positionWorld=new THREE.Vector3();this.positionScreen=new THREE.Vector4();this.visible=true;};THREE.RenderableVertex.prototype.copy=function(vertex){this.positionWorld.copy(vertex.positionWorld);this.positionScreen.copy(vertex.positionScreen);};THREE.RenderableLine=function(){this.id=0;this.v1=new THREE.RenderableVertex();this.v2=new THREE.RenderableVertex();this.vertexColors=[new THREE.Color(),new THREE.Color()];this.material=null;this.z=0;this.renderOrder=0;};THREE.RenderableSprite=function(){this.id=0;this.object=null;this.x=0;this.y=0;this.z=0;this.rotation=0;this.scale=new THREE.Vector2();this.material=null;this.renderOrder=0;};THREE.Projector=function(){var _object,_objectCount,_objectPool=[],_objectPoolLength=0,_vertex,_vertexCount,_vertexPool=[],_vertexPoolLength=0,_face,_faceCount,_facePool=[],_facePoolLength=0,_line,_lineCount,_linePool=[],_linePoolLength=0,_sprite,_spriteCount,_spritePool=[],_spritePoolLength=0,_renderData={objects:[],lights:[],elements:[]},_vector3=new THREE.Vector3(),_vector4=new THREE.Vector4(),_clipBox=new THREE.Box3(new THREE.Vector3(-1,-1,-1),new THREE.Vector3(1,1,1)),_boundingBox=new THREE.Box3(),_points3=new Array(3),_viewMatrix=new THREE.Matrix4(),_viewProjectionMatrix=new THREE.Matrix4(),_modelMatrix,_modelViewProjectionMatrix=new THREE.Matrix4(),_normalMatrix=new THREE.Matrix3(),_frustum=new THREE.Frustum(),_clippedVertex1PositionScreen=new THREE.Vector4(),_clippedVertex2PositionScreen=new THREE.Vector4();this.projectVector=function(vector,camera){console.warn('THREE.Projector: .projectVector() is now vector.project().');vector.project(camera);};this.unprojectVector=function(vector,camera){console.warn('THREE.Projector: .unprojectVector() is now vector.unproject().');vector.unproject(camera);};this.pickingRay=function(){console.error('THREE.Projector: .pickingRay() is now raycaster.setFromCamera().');};var RenderList=function(){var normals=[];var colors=[];var uvs=[];var object=null;var material=null;var normalMatrix=new THREE.Matrix3();function setObject(value){object=value;material=object.material;normalMatrix.getNormalMatrix(object.matrixWorld);normals.length=0;colors.length=0;uvs.length=0;}
function projectVertex(vertex){var position=vertex.position;var positionWorld=vertex.positionWorld;var positionScreen=vertex.positionScreen;positionWorld.copy(position).applyMatrix4(_modelMatrix);positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);var invW=1/positionScreen.w;positionScreen.x*=invW;positionScreen.y*=invW;positionScreen.z*=invW;vertex.visible=positionScreen.x>=-1&&positionScreen.x<=1&&positionScreen.y>=-1&&positionScreen.y<=1&&positionScreen.z>=-1&&positionScreen.z<=1;}
function pushVertex(x,y,z){_vertex=getNextVertexInPool();_vertex.position.set(x,y,z);projectVertex(_vertex);}
function pushNormal(x,y,z){normals.push(x,y,z);}
function pushColor(r,g,b){colors.push(r,g,b);}
function pushUv(x,y){uvs.push(x,y);}
function checkTriangleVisibility(v1,v2,v3){if(v1.visible===true||v2.visible===true||v3.visible===true)return true;_points3[0]=v1.positionScreen;_points3[1]=v2.positionScreen;_points3[2]=v3.positionScreen;return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));}
function checkBackfaceCulling(v1,v2,v3){return((v3.positionScreen.x-v1.positionScreen.x)*(v2.positionScreen.y-v1.positionScreen.y)-
(v3.positionScreen.y-v1.positionScreen.y)*(v2.positionScreen.x-v1.positionScreen.x))<0;}
function pushLine(a,b){var v1=_vertexPool[a];var v2=_vertexPool[b];v1.positionScreen.copy(v1.position).applyMatrix4(_modelViewProjectionMatrix);v2.positionScreen.copy(v2.position).applyMatrix4(_modelViewProjectionMatrix);if(clipLine(v1.positionScreen,v2.positionScreen)===true){v1.positionScreen.multiplyScalar(1/v1.positionScreen.w);v2.positionScreen.multiplyScalar(1/v2.positionScreen.w);_line=getNextLineInPool();_line.id=object.id;_line.v1.copy(v1);_line.v2.copy(v2);_line.z=Math.max(v1.positionScreen.z,v2.positionScreen.z);_line.renderOrder=object.renderOrder;_line.material=object.material;if(object.material.vertexColors===THREE.VertexColors){_line.vertexColors[0].fromArray(colors,a*3);_line.vertexColors[1].fromArray(colors,b*3);}
_renderData.elements.push(_line);}}
function pushTriangle(a,b,c){var v1=_vertexPool[a];var v2=_vertexPool[b];var v3=_vertexPool[c];if(checkTriangleVisibility(v1,v2,v3)===false)return;if(material.side===THREE.DoubleSide||checkBackfaceCulling(v1,v2,v3)===true){_face=getNextFaceInPool();_face.id=object.id;_face.v1.copy(v1);_face.v2.copy(v2);_face.v3.copy(v3);_face.z=(v1.positionScreen.z+v2.positionScreen.z+v3.positionScreen.z)/3;_face.renderOrder=object.renderOrder;_face.normalModel.fromArray(normals,a*3);_face.normalModel.applyMatrix3(normalMatrix).normalize();for(var i=0;i<3;i++){var normal=_face.vertexNormalsModel[i];normal.fromArray(normals,arguments[i]*3);normal.applyMatrix3(normalMatrix).normalize();var uv=_face.uvs[i];uv.fromArray(uvs,arguments[i]*2);}
_face.vertexNormalsLength=3;_face.material=object.material;_renderData.elements.push(_face);}}
return{setObject:setObject,projectVertex:projectVertex,checkTriangleVisibility:checkTriangleVisibility,checkBackfaceCulling:checkBackfaceCulling,pushVertex:pushVertex,pushNormal:pushNormal,pushColor:pushColor,pushUv:pushUv,pushLine:pushLine,pushTriangle:pushTriangle};};var renderList=new RenderList();function projectObject(object){if(object.visible===false)return;if(object instanceof THREE.Light){_renderData.lights.push(object);}else if(object instanceof THREE.Mesh||object instanceof THREE.Line||object instanceof THREE.Points){if(object.material.visible===false)return;if(object.frustumCulled===true&&_frustum.intersectsObject(object)===false)return;addObject(object);}else if(object instanceof THREE.Sprite){if(object.material.visible===false)return;if(object.frustumCulled===true&&_frustum.intersectsSprite(object)===false)return;addObject(object);}
var children=object.children;for(var i=0,l=children.length;i<l;i++){projectObject(children[i]);}}
function addObject(object){_object=getNextObjectInPool();_object.id=object.id;_object.object=object;_vector3.setFromMatrixPosition(object.matrixWorld);_vector3.applyMatrix4(_viewProjectionMatrix);_object.z=_vector3.z;_object.renderOrder=object.renderOrder;_renderData.objects.push(_object);}
this.projectScene=function(scene,camera,sortObjects,sortElements){_faceCount=0;_lineCount=0;_spriteCount=0;_renderData.elements.length=0;if(scene.autoUpdate===true)scene.updateMatrixWorld();if(camera.parent===null)camera.updateMatrixWorld();_viewMatrix.copy(camera.matrixWorldInverse);_viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix,_viewMatrix);_frustum.setFromMatrix(_viewProjectionMatrix);_objectCount=0;_renderData.objects.length=0;_renderData.lights.length=0;projectObject(scene);if(sortObjects===true){_renderData.objects.sort(painterSort);}
var objects=_renderData.objects;for(var o=0,ol=objects.length;o<ol;o++){var object=objects[o].object;var geometry=object.geometry;renderList.setObject(object);_modelMatrix=object.matrixWorld;_vertexCount=0;if(object instanceof THREE.Mesh){if(geometry instanceof THREE.BufferGeometry){var attributes=geometry.attributes;var groups=geometry.groups;if(attributes.position===undefined)continue;var positions=attributes.position.array;for(var i=0,l=positions.length;i<l;i+=3){renderList.pushVertex(positions[i],positions[i+1],positions[i+2]);}
if(attributes.normal!==undefined){var normals=attributes.normal.array;for(var i=0,l=normals.length;i<l;i+=3){renderList.pushNormal(normals[i],normals[i+1],normals[i+2]);}}
if(attributes.uv!==undefined){var uvs=attributes.uv.array;for(var i=0,l=uvs.length;i<l;i+=2){renderList.pushUv(uvs[i],uvs[i+1]);}}
if(geometry.index!==null){var indices=geometry.index.array;if(groups.length>0){for(var g=0;g<groups.length;g++){var group=groups[g];for(var i=group.start,l=group.start+group.count;i<l;i+=3){renderList.pushTriangle(indices[i],indices[i+1],indices[i+2]);}}}else{for(var i=0,l=indices.length;i<l;i+=3){renderList.pushTriangle(indices[i],indices[i+1],indices[i+2]);}}}else{for(var i=0,l=positions.length/3;i<l;i+=3){renderList.pushTriangle(i,i+1,i+2);}}}else if(geometry instanceof THREE.Geometry){var vertices=geometry.vertices;var faces=geometry.faces;var faceVertexUvs=geometry.faceVertexUvs[0];_normalMatrix.getNormalMatrix(_modelMatrix);var material=object.material;var isMultiMaterial=Array.isArray(material);for(var v=0,vl=vertices.length;v<vl;v++){var vertex=vertices[v];_vector3.copy(vertex);if(material.morphTargets===true){var morphTargets=geometry.morphTargets;var morphInfluences=object.morphTargetInfluences;for(var t=0,tl=morphTargets.length;t<tl;t++){var influence=morphInfluences[t];if(influence===0)continue;var target=morphTargets[t];var targetVertex=target.vertices[v];_vector3.x+=(targetVertex.x-vertex.x)*influence;_vector3.y+=(targetVertex.y-vertex.y)*influence;_vector3.z+=(targetVertex.z-vertex.z)*influence;}}
renderList.pushVertex(_vector3.x,_vector3.y,_vector3.z);}
for(var f=0,fl=faces.length;f<fl;f++){var face=faces[f];material=isMultiMaterial===true?object.material[face.materialIndex]:object.material;if(material===undefined)continue;var side=material.side;var v1=_vertexPool[face.a];var v2=_vertexPool[face.b];var v3=_vertexPool[face.c];if(renderList.checkTriangleVisibility(v1,v2,v3)===false)continue;var visible=renderList.checkBackfaceCulling(v1,v2,v3);if(side!==THREE.DoubleSide){if(side===THREE.FrontSide&&visible===false)continue;if(side===THREE.BackSide&&visible===true)continue;}
_face=getNextFaceInPool();_face.id=object.id;_face.v1.copy(v1);_face.v2.copy(v2);_face.v3.copy(v3);_face.normalModel.copy(face.normal);if(visible===false&&(side===THREE.BackSide||side===THREE.DoubleSide)){_face.normalModel.negate();}
_face.normalModel.applyMatrix3(_normalMatrix).normalize();var faceVertexNormals=face.vertexNormals;for(var n=0,nl=Math.min(faceVertexNormals.length,3);n<nl;n++){var normalModel=_face.vertexNormalsModel[n];normalModel.copy(faceVertexNormals[n]);if(visible===false&&(side===THREE.BackSide||side===THREE.DoubleSide)){normalModel.negate();}
normalModel.applyMatrix3(_normalMatrix).normalize();}
_face.vertexNormalsLength=faceVertexNormals.length;var vertexUvs=faceVertexUvs[f];if(vertexUvs!==undefined){for(var u=0;u<3;u++){_face.uvs[u].copy(vertexUvs[u]);}}
_face.color=face.color;_face.material=material;_face.z=(v1.positionScreen.z+v2.positionScreen.z+v3.positionScreen.z)/3;_face.renderOrder=object.renderOrder;_renderData.elements.push(_face);}}}else if(object instanceof THREE.Line){_modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix,_modelMatrix);if(geometry instanceof THREE.BufferGeometry){var attributes=geometry.attributes;if(attributes.position!==undefined){var positions=attributes.position.array;for(var i=0,l=positions.length;i<l;i+=3){renderList.pushVertex(positions[i],positions[i+1],positions[i+2]);}
if(attributes.color!==undefined){var colors=attributes.color.array;for(var i=0,l=colors.length;i<l;i+=3){renderList.pushColor(colors[i],colors[i+1],colors[i+2]);}}
if(geometry.index!==null){var indices=geometry.index.array;for(var i=0,l=indices.length;i<l;i+=2){renderList.pushLine(indices[i],indices[i+1]);}}else{var step=object instanceof THREE.LineSegments?2:1;for(var i=0,l=(positions.length/3)-1;i<l;i+=step){renderList.pushLine(i,i+1);}}}}else if(geometry instanceof THREE.Geometry){var vertices=object.geometry.vertices;if(vertices.length===0)continue;v1=getNextVertexInPool();v1.positionScreen.copy(vertices[0]).applyMatrix4(_modelViewProjectionMatrix);var step=object instanceof THREE.LineSegments?2:1;for(var v=1,vl=vertices.length;v<vl;v++){v1=getNextVertexInPool();v1.positionScreen.copy(vertices[v]).applyMatrix4(_modelViewProjectionMatrix);if((v+1)%step>0)continue;v2=_vertexPool[_vertexCount-2];_clippedVertex1PositionScreen.copy(v1.positionScreen);_clippedVertex2PositionScreen.copy(v2.positionScreen);if(clipLine(_clippedVertex1PositionScreen,_clippedVertex2PositionScreen)===true){_clippedVertex1PositionScreen.multiplyScalar(1/_clippedVertex1PositionScreen.w);_clippedVertex2PositionScreen.multiplyScalar(1/_clippedVertex2PositionScreen.w);_line=getNextLineInPool();_line.id=object.id;_line.v1.positionScreen.copy(_clippedVertex1PositionScreen);_line.v2.positionScreen.copy(_clippedVertex2PositionScreen);_line.z=Math.max(_clippedVertex1PositionScreen.z,_clippedVertex2PositionScreen.z);_line.renderOrder=object.renderOrder;_line.material=object.material;if(object.material.vertexColors===THREE.VertexColors){_line.vertexColors[0].copy(object.geometry.colors[v]);_line.vertexColors[1].copy(object.geometry.colors[v-1]);}
_renderData.elements.push(_line);}}}}else if(object instanceof THREE.Points){_modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix,_modelMatrix);if(geometry instanceof THREE.Geometry){var vertices=object.geometry.vertices;for(var v=0,vl=vertices.length;v<vl;v++){var vertex=vertices[v];_vector4.set(vertex.x,vertex.y,vertex.z,1);_vector4.applyMatrix4(_modelViewProjectionMatrix);pushPoint(_vector4,object,camera);}}else if(geometry instanceof THREE.BufferGeometry){var attributes=geometry.attributes;if(attributes.position!==undefined){var positions=attributes.position.array;for(var i=0,l=positions.length;i<l;i+=3){_vector4.set(positions[i],positions[i+1],positions[i+2],1);_vector4.applyMatrix4(_modelViewProjectionMatrix);pushPoint(_vector4,object,camera);}}}}else if(object instanceof THREE.Sprite){_vector4.set(_modelMatrix.elements[12],_modelMatrix.elements[13],_modelMatrix.elements[14],1);_vector4.applyMatrix4(_viewProjectionMatrix);pushPoint(_vector4,object,camera);}}
if(sortElements===true){_renderData.elements.sort(painterSort);}
return _renderData;};function pushPoint(_vector4,object,camera){var invW=1/_vector4.w;_vector4.z*=invW;if(_vector4.z>=-1&&_vector4.z<=1){_sprite=getNextSpriteInPool();_sprite.id=object.id;_sprite.x=_vector4.x*invW;_sprite.y=_vector4.y*invW;_sprite.z=_vector4.z;_sprite.renderOrder=object.renderOrder;_sprite.object=object;_sprite.rotation=object.rotation;_sprite.scale.x=object.scale.x*Math.abs(_sprite.x-(_vector4.x+camera.projectionMatrix.elements[0])/(_vector4.w+camera.projectionMatrix.elements[12]));_sprite.scale.y=object.scale.y*Math.abs(_sprite.y-(_vector4.y+camera.projectionMatrix.elements[5])/(_vector4.w+camera.projectionMatrix.elements[13]));_sprite.material=object.material;_renderData.elements.push(_sprite);}}
function getNextObjectInPool(){if(_objectCount===_objectPoolLength){var object=new THREE.RenderableObject();_objectPool.push(object);_objectPoolLength++;_objectCount++;return object;}
return _objectPool[_objectCount++];}
function getNextVertexInPool(){if(_vertexCount===_vertexPoolLength){var vertex=new THREE.RenderableVertex();_vertexPool.push(vertex);_vertexPoolLength++;_vertexCount++;return vertex;}
return _vertexPool[_vertexCount++];}
function getNextFaceInPool(){if(_faceCount===_facePoolLength){var face=new THREE.RenderableFace();_facePool.push(face);_facePoolLength++;_faceCount++;return face;}
return _facePool[_faceCount++];}
function getNextLineInPool(){if(_lineCount===_linePoolLength){var line=new THREE.RenderableLine();_linePool.push(line);_linePoolLength++;_lineCount++;return line;}
return _linePool[_lineCount++];}
function getNextSpriteInPool(){if(_spriteCount===_spritePoolLength){var sprite=new THREE.RenderableSprite();_spritePool.push(sprite);_spritePoolLength++;_spriteCount++;return sprite;}
return _spritePool[_spriteCount++];}
function painterSort(a,b){if(a.renderOrder!==b.renderOrder){return a.renderOrder-b.renderOrder;}else if(a.z!==b.z){return b.z-a.z;}else if(a.id!==b.id){return a.id-b.id;}else{return 0;}}
function clipLine(s1,s2){var alpha1=0,alpha2=1,bc1near=s1.z+s1.w,bc2near=s2.z+s2.w,bc1far=-s1.z+s1.w,bc2far=-s2.z+s2.w;if(bc1near>=0&&bc2near>=0&&bc1far>=0&&bc2far>=0){return true;}else if((bc1near<0&&bc2near<0)||(bc1far<0&&bc2far<0)){return false;}else{if(bc1near<0){alpha1=Math.max(alpha1,bc1near/(bc1near-bc2near));}else if(bc2near<0){alpha2=Math.min(alpha2,bc1near/(bc1near-bc2near));}
if(bc1far<0){alpha1=Math.max(alpha1,bc1far/(bc1far-bc2far));}else if(bc2far<0){alpha2=Math.min(alpha2,bc1far/(bc1far-bc2far));}
if(alpha2<alpha1){return false;}else{s1.lerp(s2,alpha1);s2.lerp(s1,1-alpha2);return true;}}}};THREE.SpriteCanvasMaterial=function(parameters){THREE.Material.call(this);this.type='SpriteCanvasMaterial';this.color=new THREE.Color(0xffffff);this.program=function(){};this.setValues(parameters);};THREE.SpriteCanvasMaterial.prototype=Object.create(THREE.Material.prototype);THREE.SpriteCanvasMaterial.prototype.constructor=THREE.SpriteCanvasMaterial;THREE.SpriteCanvasMaterial.prototype.isSpriteCanvasMaterial=true;THREE.SpriteCanvasMaterial.prototype.clone=function(){var material=new THREE.SpriteCanvasMaterial();material.copy(this);material.color.copy(this.color);material.program=this.program;return material;};THREE.CanvasRenderer=function(parameters){console.log('THREE.CanvasRenderer',THREE.REVISION);parameters=parameters||{};var _this=this,_renderData,_elements,_lights,_projector=new THREE.Projector(),_canvas=parameters.canvas!==undefined?parameters.canvas:document.createElement('canvas'),_canvasWidth=_canvas.width,_canvasHeight=_canvas.height,_canvasWidthHalf=Math.floor(_canvasWidth/2),_canvasHeightHalf=Math.floor(_canvasHeight/2),_viewportX=0,_viewportY=0,_viewportWidth=_canvasWidth,_viewportHeight=_canvasHeight,_pixelRatio=1,_context=_canvas.getContext('2d',{alpha:parameters.alpha===true}),_clearColor=new THREE.Color(0x000000),_clearAlpha=parameters.alpha===true?0:1,_contextGlobalAlpha=1,_contextGlobalCompositeOperation=0,_contextStrokeStyle=null,_contextFillStyle=null,_contextLineWidth=null,_contextLineCap=null,_contextLineJoin=null,_contextLineDash=[],_v1,_v2,_v3,_v1x,_v1y,_v2x,_v2y,_v3x,_v3y,_color=new THREE.Color(),_diffuseColor=new THREE.Color(),_emissiveColor=new THREE.Color(),_lightColor=new THREE.Color(),_patterns={},_uvs,_uv1x,_uv1y,_uv2x,_uv2y,_uv3x,_uv3y,_clipBox=new THREE.Box2(),_clearBox=new THREE.Box2(),_elemBox=new THREE.Box2(),_ambientLight=new THREE.Color(),_directionalLights=new THREE.Color(),_pointLights=new THREE.Color(),_vector3=new THREE.Vector3(),_centroid=new THREE.Vector3(),_normal=new THREE.Vector3(),_normalViewMatrix=new THREE.Matrix3();if(_context.setLineDash===undefined){_context.setLineDash=function(){};}
this.domElement=_canvas;this.autoClear=true;this.sortObjects=true;this.sortElements=true;this.info={render:{vertices:0,faces:0}};this.supportsVertexTextures=function(){};this.setFaceCulling=function(){};this.getContext=function(){return _context;};this.getContextAttributes=function(){return _context.getContextAttributes();};this.getPixelRatio=function(){return _pixelRatio;};this.setPixelRatio=function(value){if(value!==undefined)_pixelRatio=value;};this.setSize=function(width,height,updateStyle){_canvasWidth=width*_pixelRatio;_canvasHeight=height*_pixelRatio;_canvas.width=_canvasWidth;_canvas.height=_canvasHeight;_canvasWidthHalf=Math.floor(_canvasWidth/2);_canvasHeightHalf=Math.floor(_canvasHeight/2);if(updateStyle!==false){_canvas.style.width=width+'px';_canvas.style.height=height+'px';}
_clipBox.min.set(-_canvasWidthHalf,-_canvasHeightHalf);_clipBox.max.set(_canvasWidthHalf,_canvasHeightHalf);_clearBox.min.set(-_canvasWidthHalf,-_canvasHeightHalf);_clearBox.max.set(_canvasWidthHalf,_canvasHeightHalf);_contextGlobalAlpha=1;_contextGlobalCompositeOperation=0;_contextStrokeStyle=null;_contextFillStyle=null;_contextLineWidth=null;_contextLineCap=null;_contextLineJoin=null;this.setViewport(0,0,width,height);};this.setViewport=function(x,y,width,height){_viewportX=x*_pixelRatio;_viewportY=y*_pixelRatio;_viewportWidth=width*_pixelRatio;_viewportHeight=height*_pixelRatio;};this.setScissor=function(){};this.setScissorTest=function(){};this.setClearColor=function(color,alpha){_clearColor.set(color);_clearAlpha=alpha!==undefined?alpha:1;_clearBox.min.set(-_canvasWidthHalf,-_canvasHeightHalf);_clearBox.max.set(_canvasWidthHalf,_canvasHeightHalf);};this.setClearColorHex=function(hex,alpha){console.warn('THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.');this.setClearColor(hex,alpha);};this.getClearColor=function(){return _clearColor;};this.getClearAlpha=function(){return _clearAlpha;};this.getMaxAnisotropy=function(){return 0;};this.clear=function(){if(_clearBox.isEmpty()===false){_clearBox.intersect(_clipBox);_clearBox.expandByScalar(2);_clearBox.min.x=_clearBox.min.x+_canvasWidthHalf;_clearBox.min.y=-_clearBox.min.y+_canvasHeightHalf;_clearBox.max.x=_clearBox.max.x+_canvasWidthHalf;_clearBox.max.y=-_clearBox.max.y+_canvasHeightHalf;if(_clearAlpha<1){_context.clearRect(_clearBox.min.x|0,_clearBox.max.y|0,(_clearBox.max.x-_clearBox.min.x)|0,(_clearBox.min.y-_clearBox.max.y)|0);}
if(_clearAlpha>0){setOpacity(1);setBlending(THREE.NormalBlending);setFillStyle('rgba('+Math.floor(_clearColor.r*255)+','+Math.floor(_clearColor.g*255)+','+Math.floor(_clearColor.b*255)+','+_clearAlpha+')');_context.fillRect(_clearBox.min.x|0,_clearBox.max.y|0,(_clearBox.max.x-_clearBox.min.x)|0,(_clearBox.min.y-_clearBox.max.y)|0);}
_clearBox.makeEmpty();}};this.clearColor=function(){};this.clearDepth=function(){};this.clearStencil=function(){};this.render=function(scene,camera){if(camera.isCamera===undefined){console.error('THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.');return;}
var background=scene.background;if(background&&background.isColor){setOpacity(1);setBlending(THREE.NormalBlending);setFillStyle(background.getStyle());_context.fillRect(0,0,_canvasWidth,_canvasHeight);}else if(this.autoClear===true){this.clear();}
_this.info.render.vertices=0;_this.info.render.faces=0;_context.setTransform(_viewportWidth/_canvasWidth,0,0,-_viewportHeight/_canvasHeight,_viewportX,_canvasHeight-_viewportY);_context.translate(_canvasWidthHalf,_canvasHeightHalf);_renderData=_projector.projectScene(scene,camera,this.sortObjects,this.sortElements);_elements=_renderData.elements;_lights=_renderData.lights;_normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);calculateLights();for(var e=0,el=_elements.length;e<el;e++){var element=_elements[e];var material=element.material;if(material===undefined||material.opacity===0)continue;_elemBox.makeEmpty();if(element instanceof THREE.RenderableSprite){_v1=element;_v1.x*=_canvasWidthHalf;_v1.y*=_canvasHeightHalf;renderSprite(_v1,element,material);}else if(element instanceof THREE.RenderableLine){_v1=element.v1;_v2=element.v2;_v1.positionScreen.x*=_canvasWidthHalf;_v1.positionScreen.y*=_canvasHeightHalf;_v2.positionScreen.x*=_canvasWidthHalf;_v2.positionScreen.y*=_canvasHeightHalf;_elemBox.setFromPoints([_v1.positionScreen,_v2.positionScreen]);if(_clipBox.intersectsBox(_elemBox)===true){renderLine(_v1,_v2,element,material);}}else if(element instanceof THREE.RenderableFace){_v1=element.v1;_v2=element.v2;_v3=element.v3;if(_v1.positionScreen.z<-1||_v1.positionScreen.z>1)continue;if(_v2.positionScreen.z<-1||_v2.positionScreen.z>1)continue;if(_v3.positionScreen.z<-1||_v3.positionScreen.z>1)continue;_v1.positionScreen.x*=_canvasWidthHalf;_v1.positionScreen.y*=_canvasHeightHalf;_v2.positionScreen.x*=_canvasWidthHalf;_v2.positionScreen.y*=_canvasHeightHalf;_v3.positionScreen.x*=_canvasWidthHalf;_v3.positionScreen.y*=_canvasHeightHalf;if(material.overdraw>0){expand(_v1.positionScreen,_v2.positionScreen,material.overdraw);expand(_v2.positionScreen,_v3.positionScreen,material.overdraw);expand(_v3.positionScreen,_v1.positionScreen,material.overdraw);}
_elemBox.setFromPoints([_v1.positionScreen,_v2.positionScreen,_v3.positionScreen]);if(_clipBox.intersectsBox(_elemBox)===true){renderFace3(_v1,_v2,_v3,0,1,2,element,material);}}
_clearBox.union(_elemBox);}
_context.setTransform(1,0,0,1,0,0);};function calculateLights(){_ambientLight.setRGB(0,0,0);_directionalLights.setRGB(0,0,0);_pointLights.setRGB(0,0,0);for(var l=0,ll=_lights.length;l<ll;l++){var light=_lights[l];var lightColor=light.color;if(light.isAmbientLight){_ambientLight.add(lightColor);}else if(light.isDirectionalLight){_directionalLights.add(lightColor);}else if(light.isPointLight){_pointLights.add(lightColor);}}}
function calculateLight(position,normal,color){for(var l=0,ll=_lights.length;l<ll;l++){var light=_lights[l];_lightColor.copy(light.color);if(light.isDirectionalLight){var lightPosition=_vector3.setFromMatrixPosition(light.matrixWorld).normalize();var amount=normal.dot(lightPosition);if(amount<=0)continue;amount*=light.intensity;color.add(_lightColor.multiplyScalar(amount));}else if(light.isPointLight){var lightPosition=_vector3.setFromMatrixPosition(light.matrixWorld);var amount=normal.dot(_vector3.subVectors(lightPosition,position).normalize());if(amount<=0)continue;amount*=light.distance==0?1:1-Math.min(position.distanceTo(lightPosition)/light.distance,1);if(amount==0)continue;amount*=light.intensity;color.add(_lightColor.multiplyScalar(amount));}}}
function renderSprite(v1,element,material){setOpacity(material.opacity);setBlending(material.blending);var scaleX=element.scale.x*_canvasWidthHalf;var scaleY=element.scale.y*_canvasHeightHalf;var dist=Math.sqrt(scaleX*scaleX+scaleY*scaleY);_elemBox.min.set(v1.x-dist,v1.y-dist);_elemBox.max.set(v1.x+dist,v1.y+dist);if(material.isSpriteMaterial){var texture=material.map;if(texture!==null){var pattern=_patterns[texture.id];if(pattern===undefined||pattern.version!==texture.version){pattern=textureToPattern(texture);_patterns[texture.id]=pattern;}
if(pattern.canvas!==undefined){setFillStyle(pattern.canvas);var bitmap=texture.image;var ox=bitmap.width*texture.offset.x;var oy=bitmap.height*texture.offset.y;var sx=bitmap.width*texture.repeat.x;var sy=bitmap.height*texture.repeat.y;var cx=scaleX/sx;var cy=scaleY/sy;_context.save();_context.translate(v1.x,v1.y);if(material.rotation!==0)_context.rotate(material.rotation);_context.translate(-scaleX/2,-scaleY/2);_context.scale(cx,cy);_context.translate(-ox,-oy);_context.fillRect(ox,oy,sx,sy);_context.restore();}}else{setFillStyle(material.color.getStyle());_context.save();_context.translate(v1.x,v1.y);if(material.rotation!==0)_context.rotate(material.rotation);_context.scale(scaleX,-scaleY);_context.fillRect(-0.5,-0.5,1,1);_context.restore();}}else if(material.isSpriteCanvasMaterial){setStrokeStyle(material.color.getStyle());setFillStyle(material.color.getStyle());_context.save();_context.translate(v1.x,v1.y);if(material.rotation!==0)_context.rotate(material.rotation);_context.scale(scaleX,scaleY);material.program(_context);_context.restore();}else if(material.isPointsMaterial){setFillStyle(material.color.getStyle());_context.save();_context.translate(v1.x,v1.y);if(material.rotation!==0)_context.rotate(material.rotation);_context.scale(scaleX*material.size,-scaleY*material.size);_context.fillRect(-0.5,-0.5,1,1);_context.restore();}}
function renderLine(v1,v2,element,material){setOpacity(material.opacity);setBlending(material.blending);_context.beginPath();_context.moveTo(v1.positionScreen.x,v1.positionScreen.y);_context.lineTo(v2.positionScreen.x,v2.positionScreen.y);if(material.isLineBasicMaterial){setLineWidth(material.linewidth);setLineCap(material.linecap);setLineJoin(material.linejoin);if(material.vertexColors!==THREE.VertexColors){setStrokeStyle(material.color.getStyle());}else{var colorStyle1=element.vertexColors[0].getStyle();var colorStyle2=element.vertexColors[1].getStyle();if(colorStyle1===colorStyle2){setStrokeStyle(colorStyle1);}else{try{var grad=_context.createLinearGradient(v1.positionScreen.x,v1.positionScreen.y,v2.positionScreen.x,v2.positionScreen.y);grad.addColorStop(0,colorStyle1);grad.addColorStop(1,colorStyle2);}catch(exception){grad=colorStyle1;}
setStrokeStyle(grad);}}
if(material.isLineDashedMaterial){setLineDash([material.dashSize,material.gapSize]);}
_context.stroke();_elemBox.expandByScalar(material.linewidth*2);if(material.isLineDashedMaterial){setLineDash([]);}}}
function renderFace3(v1,v2,v3,uv1,uv2,uv3,element,material){_this.info.render.vertices+=3;_this.info.render.faces++;setOpacity(material.opacity);setBlending(material.blending);_v1x=v1.positionScreen.x;_v1y=v1.positionScreen.y;_v2x=v2.positionScreen.x;_v2y=v2.positionScreen.y;_v3x=v3.positionScreen.x;_v3y=v3.positionScreen.y;drawTriangle(_v1x,_v1y,_v2x,_v2y,_v3x,_v3y);if((material.isMeshLambertMaterial||material.isMeshPhongMaterial||material.isMeshStandardMaterial)&&material.map===null){_diffuseColor.copy(material.color);_emissiveColor.copy(material.emissive);if(material.vertexColors===THREE.FaceColors){_diffuseColor.multiply(element.color);}
_color.copy(_ambientLight);_centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);calculateLight(_centroid,element.normalModel,_color);_color.multiply(_diffuseColor).add(_emissiveColor);material.wireframe===true?strokePath(_color,material.wireframeLinewidth,material.wireframeLinecap,material.wireframeLinejoin):fillPath(_color);}else if(material.isMeshBasicMaterial||material.isMeshLambertMaterial||material.isMeshPhongMaterial||material.isMeshStandardMaterial){if(material.map!==null){var mapping=material.map.mapping;if(mapping===THREE.UVMapping){_uvs=element.uvs;patternPath(_v1x,_v1y,_v2x,_v2y,_v3x,_v3y,_uvs[uv1].x,_uvs[uv1].y,_uvs[uv2].x,_uvs[uv2].y,_uvs[uv3].x,_uvs[uv3].y,material.map);}}else if(material.envMap!==null){if(material.envMap.mapping===THREE.SphericalReflectionMapping){_normal.copy(element.vertexNormalsModel[uv1]).applyMatrix3(_normalViewMatrix);_uv1x=0.5*_normal.x+0.5;_uv1y=0.5*_normal.y+0.5;_normal.copy(element.vertexNormalsModel[uv2]).applyMatrix3(_normalViewMatrix);_uv2x=0.5*_normal.x+0.5;_uv2y=0.5*_normal.y+0.5;_normal.copy(element.vertexNormalsModel[uv3]).applyMatrix3(_normalViewMatrix);_uv3x=0.5*_normal.x+0.5;_uv3y=0.5*_normal.y+0.5;patternPath(_v1x,_v1y,_v2x,_v2y,_v3x,_v3y,_uv1x,_uv1y,_uv2x,_uv2y,_uv3x,_uv3y,material.envMap);}}else{_color.copy(material.color);if(material.vertexColors===THREE.FaceColors){_color.multiply(element.color);}
material.wireframe===true?strokePath(_color,material.wireframeLinewidth,material.wireframeLinecap,material.wireframeLinejoin):fillPath(_color);}}else if(material.isMeshNormalMaterial){_normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix);_color.setRGB(_normal.x,_normal.y,_normal.z).multiplyScalar(0.5).addScalar(0.5);material.wireframe===true?strokePath(_color,material.wireframeLinewidth,material.wireframeLinecap,material.wireframeLinejoin):fillPath(_color);}else{_color.setRGB(1,1,1);material.wireframe===true?strokePath(_color,material.wireframeLinewidth,material.wireframeLinecap,material.wireframeLinejoin):fillPath(_color);}}
function drawTriangle(x0,y0,x1,y1,x2,y2){_context.beginPath();_context.moveTo(x0,y0);_context.lineTo(x1,y1);_context.lineTo(x2,y2);_context.closePath();}
function strokePath(color,linewidth,linecap,linejoin){setLineWidth(linewidth);setLineCap(linecap);setLineJoin(linejoin);setStrokeStyle(color.getStyle());_context.stroke();_elemBox.expandByScalar(linewidth*2);}
function fillPath(color){setFillStyle(color.getStyle());_context.fill();}
function textureToPattern(texture){if(texture.version===0||texture instanceof THREE.CompressedTexture||texture instanceof THREE.DataTexture){return{canvas:undefined,version:texture.version};}
var image=texture.image;if(image.complete===false){return{canvas:undefined,version:0};}
var repeatX=texture.wrapS===THREE.RepeatWrapping||texture.wrapS===THREE.MirroredRepeatWrapping;var repeatY=texture.wrapT===THREE.RepeatWrapping||texture.wrapT===THREE.MirroredRepeatWrapping;var mirrorX=texture.wrapS===THREE.MirroredRepeatWrapping;var mirrorY=texture.wrapT===THREE.MirroredRepeatWrapping;var canvas=document.createElement('canvas');canvas.width=image.width*(mirrorX?2:1);canvas.height=image.height*(mirrorY?2:1);var context=canvas.getContext('2d');context.setTransform(1,0,0,-1,0,image.height);context.drawImage(image,0,0);if(mirrorX===true){context.setTransform(-1,0,0,-1,image.width,image.height);context.drawImage(image,-image.width,0);}
if(mirrorY===true){context.setTransform(1,0,0,1,0,0);context.drawImage(image,0,image.height);}
if(mirrorX===true&&mirrorY===true){context.setTransform(-1,0,0,1,image.width,0);context.drawImage(image,-image.width,image.height);}
var repeat='no-repeat';if(repeatX===true&&repeatY===true){repeat='repeat';}else if(repeatX===true){repeat='repeat-x';}else if(repeatY===true){repeat='repeat-y';}
var pattern=_context.createPattern(canvas,repeat);if(texture.onUpdate)texture.onUpdate(texture);return{canvas:pattern,version:texture.version};}
function patternPath(x0,y0,x1,y1,x2,y2,u0,v0,u1,v1,u2,v2,texture){var pattern=_patterns[texture.id];if(pattern===undefined||pattern.version!==texture.version){pattern=textureToPattern(texture);_patterns[texture.id]=pattern;}
if(pattern.canvas!==undefined){setFillStyle(pattern.canvas);}else{setFillStyle('rgba( 0, 0, 0, 1)');_context.fill();return;}
var a,b,c,d,e,f,det,idet,offsetX=texture.offset.x/texture.repeat.x,offsetY=texture.offset.y/texture.repeat.y,width=texture.image.width*texture.repeat.x,height=texture.image.height*texture.repeat.y;u0=(u0+offsetX)*width;v0=(v0+offsetY)*height;u1=(u1+offsetX)*width;v1=(v1+offsetY)*height;u2=(u2+offsetX)*width;v2=(v2+offsetY)*height;x1-=x0;y1-=y0;x2-=x0;y2-=y0;u1-=u0;v1-=v0;u2-=u0;v2-=v0;det=u1*v2-u2*v1;if(det===0)return;idet=1/det;a=(v2*x1-v1*x2)*idet;b=(v2*y1-v1*y2)*idet;c=(u1*x2-u2*x1)*idet;d=(u1*y2-u2*y1)*idet;e=x0-a*u0-c*v0;f=y0-b*u0-d*v0;_context.save();_context.transform(a,b,c,d,e,f);_context.fill();_context.restore();}
function expand(v1,v2,pixels){var x=v2.x-v1.x,y=v2.y-v1.y,det=x*x+y*y,idet;if(det===0)return;idet=pixels/Math.sqrt(det);x*=idet;y*=idet;v2.x+=x;v2.y+=y;v1.x-=x;v1.y-=y;}
function setOpacity(value){if(_contextGlobalAlpha!==value){_context.globalAlpha=value;_contextGlobalAlpha=value;}}
function setBlending(value){if(_contextGlobalCompositeOperation!==value){if(value===THREE.NormalBlending){_context.globalCompositeOperation='source-over';}else if(value===THREE.AdditiveBlending){_context.globalCompositeOperation='lighter';}else if(value===THREE.SubtractiveBlending){_context.globalCompositeOperation='darker';}else if(value===THREE.MultiplyBlending){_context.globalCompositeOperation='multiply';}
_contextGlobalCompositeOperation=value;}}
function setLineWidth(value){if(_contextLineWidth!==value){_context.lineWidth=value;_contextLineWidth=value;}}
function setLineCap(value){if(_contextLineCap!==value){_context.lineCap=value;_contextLineCap=value;}}
function setLineJoin(value){if(_contextLineJoin!==value){_context.lineJoin=value;_contextLineJoin=value;}}
function setStrokeStyle(value){if(_contextStrokeStyle!==value){_context.strokeStyle=value;_contextStrokeStyle=value;}}
function setFillStyle(value){if(_contextFillStyle!==value){_context.fillStyle=value;_contextFillStyle=value;}}
function setLineDash(value){if(_contextLineDash.length!==value.length){_context.setLineDash(value);_contextLineDash=value;}}};THREE.RaytracingRenderer=function(parameters){console.log('THREE.RaytracingRenderer',THREE.REVISION);parameters=parameters||{};var scope=this;var pool=[];var renderering=false;var canvas=document.createElement('canvas');var context=canvas.getContext('2d',{alpha:parameters.alpha===true});var maxRecursionDepth=3;var canvasWidth,canvasHeight;var clearColor=new THREE.Color(0x000000);this.domElement=canvas;this.autoClear=true;var workers=parameters.workers;var blockSize=parameters.blockSize||64;this.randomize=parameters.randomize;var toRender=[],workerId=0,sceneId=0;console.log('%cSpinning off '+workers+' Workers ','font-size: 20px; background: black; color: white; font-family: monospace;');this.setWorkers=function(w){workers=w||navigator.hardwareConcurrency||4;while(pool.length<workers){var worker=new Worker(parameters.workerPath);worker.id=workerId++;worker.onmessage=function(e){var data=e.data;if(!data)return;if(data.blockSize&&sceneId==data.sceneId){var imagedata=new ImageData(new Uint8ClampedArray(data.data),data.blockSize,data.blockSize);context.putImageData(imagedata,data.blockX,data.blockY);console.log('Worker '+this.id,data.time/1000,(Date.now()-reallyThen)/1000+' s');if(pool.length>workers){pool.splice(pool.indexOf(this),1);return this.terminate();}
renderNext(this);}};worker.color=new THREE.Color().setHSL(Math.random(),0.8,0.8).getHexString();pool.push(worker);if(renderering){updateSettings(worker);worker.postMessage({scene:sceneJSON,camera:cameraJSON,annex:materials,sceneId:sceneId});renderNext(worker);}}
if(!renderering){while(pool.length>workers){pool.pop().terminate();}}};this.setWorkers(workers);this.setClearColor=function(color,alpha){clearColor.set(color);};this.setPixelRatio=function(){};this.setSize=function(width,height){canvas.width=width;canvas.height=height;canvasWidth=canvas.width;canvasHeight=canvas.height;context.fillStyle='white';pool.forEach(updateSettings);};this.setSize(canvas.width,canvas.height);this.clear=function(){};var totalBlocks,xblocks,yblocks;function updateSettings(worker){worker.postMessage({init:[canvasWidth,canvasHeight],worker:worker.id,blockSize:blockSize});}
function renderNext(worker){if(!toRender.length){renderering=false;return scope.dispatchEvent({type:"complete"});}
var current=toRender.pop();var blockX=(current%xblocks)*blockSize;var blockY=(current/xblocks|0)*blockSize;worker.postMessage({render:true,x:blockX,y:blockY,sceneId:sceneId});context.fillStyle='#'+worker.color;context.fillRect(blockX,blockY,blockSize,blockSize);}
var materials={};var sceneJSON,cameraJSON,reallyThen;var _annex={mirror:1,reflectivity:1,refractionRatio:1,glass:1};function serializeObject(o){var mat=o.material;if(!mat||mat.uuid in materials)return;var props={};for(var m in _annex){if(mat[m]!==undefined){props[m]=mat[m];}}
materials[mat.uuid]=props;}
this.render=function(scene,camera){renderering=true;if(scene.autoUpdate===true)scene.updateMatrixWorld();if(camera.parent===null)camera.updateMatrixWorld();sceneJSON=scene.toJSON();cameraJSON=camera.toJSON();++sceneId;scene.traverse(serializeObject);pool.forEach(function(worker){worker.postMessage({scene:sceneJSON,camera:cameraJSON,annex:materials,sceneId:sceneId});});context.clearRect(0,0,canvasWidth,canvasHeight);reallyThen=Date.now();xblocks=Math.ceil(canvasWidth/blockSize);yblocks=Math.ceil(canvasHeight/blockSize);totalBlocks=xblocks*yblocks;toRender=[];for(var i=0;i<totalBlocks;i++){toRender.push(i);}
if(scope.randomize){for(var i=0;i<totalBlocks;i++){var swap=Math.random()*totalBlocks|0;var tmp=toRender[swap];toRender[swap]=toRender[i];toRender[i]=tmp;}}
pool.forEach(renderNext);};};Object.assign(THREE.RaytracingRenderer.prototype,THREE.EventDispatcher.prototype);THREE.SoftwareRenderer=function(parameters){console.log('THREE.SoftwareRenderer',THREE.REVISION);parameters=parameters||{};var canvas=parameters.canvas!==undefined?parameters.canvas:document.createElement('canvas');var context=canvas.getContext('2d',{alpha:parameters.alpha===true});var alpha=parameters.alpha;var shaders={};var textures={};var canvasWidth,canvasHeight;var canvasWBlocks,canvasHBlocks;var viewportXScale,viewportYScale,viewportZScale;var viewportXOffs,viewportYOffs,viewportZOffs;var clearColor=new THREE.Color(0x000000);var imagedata,data,zbuffer;var numBlocks,blockMaxZ,blockFlags;var BLOCK_ISCLEAR=(1<<0);var BLOCK_NEEDCLEAR=(1<<1);var subpixelBits=4;var subpixelBias=(1<<subpixelBits)-1;var blockShift=3;var blockSize=1<<blockShift;var maxZVal=(1<<24);var lineMode=false;var lookVector=new THREE.Vector3(0,0,1);var crossVector=new THREE.Vector3();var rectx1=Infinity,recty1=Infinity;var rectx2=0,recty2=0;var prevrectx1=Infinity,prevrecty1=Infinity;var prevrectx2=0,prevrecty2=0;var projector=new THREE.Projector();var spriteV1=new THREE.Vector4();var spriteV2=new THREE.Vector4();var spriteV3=new THREE.Vector4();var spriteUV1=new THREE.Vector2();var spriteUV2=new THREE.Vector2();var spriteUV3=new THREE.Vector2();var mpVPool=[];var mpVPoolCount=0;var mpNPool=[];var mpNPoolCount=0;var mpUVPool=[];var mpUVPoolCount=0;this.domElement=canvas;this.autoClear=true;this.supportsVertexTextures=function(){};this.setFaceCulling=function(){};this.setClearColor=function(color){clearColor.set(color);clearColorBuffer(clearColor);};this.setPixelRatio=function(){};this.setSize=function(width,height){canvasWBlocks=Math.floor(width/blockSize);canvasHBlocks=Math.floor(height/blockSize);canvasWidth=canvasWBlocks*blockSize;canvasHeight=canvasHBlocks*blockSize;var fixScale=1<<subpixelBits;viewportXScale=fixScale*canvasWidth/2;viewportYScale=-fixScale*canvasHeight/2;viewportZScale=maxZVal/2;viewportXOffs=fixScale*canvasWidth/2+0.5;viewportYOffs=fixScale*canvasHeight/2+0.5;viewportZOffs=maxZVal/2+0.5;canvas.width=canvasWidth;canvas.height=canvasHeight;context.fillStyle=alpha?"rgba(0, 0, 0, 0)":clearColor.getStyle();context.fillRect(0,0,canvasWidth,canvasHeight);imagedata=context.getImageData(0,0,canvasWidth,canvasHeight);data=imagedata.data;zbuffer=new Int32Array(data.length/4);numBlocks=canvasWBlocks*canvasHBlocks;blockMaxZ=new Int32Array(numBlocks);blockFlags=new Uint8Array(numBlocks);for(var i=0,l=zbuffer.length;i<l;i++){zbuffer[i]=maxZVal;}
for(var i=0;i<numBlocks;i++){blockFlags[i]=BLOCK_ISCLEAR;}
clearColorBuffer(clearColor);};this.setSize(canvas.width,canvas.height);this.clear=function(){rectx1=Infinity;recty1=Infinity;rectx2=0;recty2=0;mpVPoolCount=0;mpNPoolCount=0;mpUVPoolCount=0;for(var i=0;i<numBlocks;i++){blockMaxZ[i]=maxZVal;blockFlags[i]=(blockFlags[i]&BLOCK_ISCLEAR)?BLOCK_ISCLEAR:BLOCK_NEEDCLEAR;}};this.render=function(scene,camera){this.clear();var background=scene.background;if(background&&background.isColor){clearColorBuffer(background);}
var renderData=projector.projectScene(scene,camera,false,false);var elements=renderData.elements;for(var e=0,el=elements.length;e<el;e++){var element=elements[e];var material=element.material;var shader=getMaterialShader(material);if(!shader)continue;if(element instanceof THREE.RenderableFace){if(!element.uvs){drawTriangle(element.v1.positionScreen,element.v2.positionScreen,element.v3.positionScreen,null,null,null,shader,element,material);}else{drawTriangle(element.v1.positionScreen,element.v2.positionScreen,element.v3.positionScreen,element.uvs[0],element.uvs[1],element.uvs[2],shader,element,material);}}else if(element instanceof THREE.RenderableSprite){var scaleX=element.scale.x*0.5;var scaleY=element.scale.y*0.5;spriteV1.copy(element);spriteV1.x-=scaleX;spriteV1.y+=scaleY;spriteV2.copy(element);spriteV2.x-=scaleX;spriteV2.y-=scaleY;spriteV3.copy(element);spriteV3.x+=scaleX;spriteV3.y+=scaleY;if(material.map){spriteUV1.set(0,1);spriteUV2.set(0,0);spriteUV3.set(1,1);drawTriangle(spriteV1,spriteV2,spriteV3,spriteUV1,spriteUV2,spriteUV3,shader,element,material);}else{drawTriangle(spriteV1,spriteV2,spriteV3,null,null,null,shader,element,material);}
spriteV1.copy(element);spriteV1.x+=scaleX;spriteV1.y+=scaleY;spriteV2.copy(element);spriteV2.x-=scaleX;spriteV2.y-=scaleY;spriteV3.copy(element);spriteV3.x+=scaleX;spriteV3.y-=scaleY;if(material.map){spriteUV1.set(1,1);spriteUV2.set(0,0);spriteUV3.set(1,0);drawTriangle(spriteV1,spriteV2,spriteV3,spriteUV1,spriteUV2,spriteUV3,shader,element,material);}else{drawTriangle(spriteV1,spriteV2,spriteV3,null,null,null,shader,element,material);}}else if(element instanceof THREE.RenderableLine){var shader=getMaterialShader(material);drawLine(element.v1.positionScreen,element.v2.positionScreen,element.vertexColors[0],element.vertexColors[1],shader,material);}}
finishClear();var x=Math.min(rectx1,prevrectx1);var y=Math.min(recty1,prevrecty1);var width=Math.max(rectx2,prevrectx2)-x;var height=Math.max(recty2,prevrecty2)-y;if(x!==Infinity){context.putImageData(imagedata,0,0,x,y,width,height);}
prevrectx1=rectx1;prevrecty1=recty1;prevrectx2=rectx2;prevrecty2=recty2;};function setSize(width,height){canvasWBlocks=Math.floor(width/blockSize);canvasHBlocks=Math.floor(height/blockSize);canvasWidth=canvasWBlocks*blockSize;canvasHeight=canvasHBlocks*blockSize;var fixScale=1<<subpixelBits;viewportXScale=fixScale*canvasWidth/2;viewportYScale=-fixScale*canvasHeight/2;viewportZScale=maxZVal/2;viewportXOffs=fixScale*canvasWidth/2+0.5;viewportYOffs=fixScale*canvasHeight/2+0.5;viewportZOffs=maxZVal/2+0.5;canvas.width=canvasWidth;canvas.height=canvasHeight;context.fillStyle=alpha?"rgba(0, 0, 0, 0)":clearColor.getStyle();context.fillRect(0,0,canvasWidth,canvasHeight);imagedata=context.getImageData(0,0,canvasWidth,canvasHeight);data=imagedata.data;zbuffer=new Int32Array(data.length/4);numBlocks=canvasWBlocks*canvasHBlocks;blockMaxZ=new Int32Array(numBlocks);blockFlags=new Uint8Array(numBlocks);for(var i=0,l=zbuffer.length;i<l;i++){zbuffer[i]=maxZVal;}
for(var i=0;i<numBlocks;i++){blockFlags[i]=BLOCK_ISCLEAR;}
clearColorBuffer(clearColor);}
function clearColorBuffer(color){var size=canvasWidth*canvasHeight*4;for(var i=0;i<size;i+=4){data[i]=color.r*255|0;data[i+1]=color.g*255|0;data[i+2]=color.b*255|0;data[i+3]=alpha?0:255;}
context.fillStyle=alpha?"rgba(0, 0, 0, 0)":color.getStyle();context.fillRect(0,0,canvasWidth,canvasHeight);}
function getPalette(material,bSimulateSpecular){var i=0,j=0;var diffuseR=material.color.r*255;var diffuseG=material.color.g*255;var diffuseB=material.color.b*255;var palette=new Uint8Array(256*3);if(bSimulateSpecular){while(i<204){palette[j++]=Math.min(i*diffuseR/204,255);palette[j++]=Math.min(i*diffuseG/204,255);palette[j++]=Math.min(i*diffuseB/204,255);++i;}
while(i<256){palette[j++]=Math.min(diffuseR+(i-204)*(255-diffuseR)/82,255);palette[j++]=Math.min(diffuseG+(i-204)*(255-diffuseG)/82,255);palette[j++]=Math.min(diffuseB+(i-204)*(255-diffuseB)/82,255);++i;}}else{while(i<256){palette[j++]=Math.min(i*diffuseR/255,255);palette[j++]=Math.min(i*diffuseG/255,255);palette[j++]=Math.min(i*diffuseB/255,255);++i;}}
return palette;}
function basicMaterialShader(buffer,depthBuf,offset,depth,u,v,n,face,material){var colorOffset=offset*4;var texture=textures[material.map.id];if(!texture.data)
return;var tdim=texture.width;var isTransparent=material.transparent;var tbound=tdim-1;var tdata=texture.data;var tIndex=(((v*tdim)&tbound)*tdim+((u*tdim)&tbound))*4;if(!isTransparent){buffer[colorOffset]=tdata[tIndex];buffer[colorOffset+1]=tdata[tIndex+1];buffer[colorOffset+2]=tdata[tIndex+2];buffer[colorOffset+3]=(material.opacity<<8)-1;depthBuf[offset]=depth;}else{var srcR=tdata[tIndex];var srcG=tdata[tIndex+1];var srcB=tdata[tIndex+2];var opaci=tdata[tIndex+3]*material.opacity/255;var destR=buffer[colorOffset];var destG=buffer[colorOffset+1];var destB=buffer[colorOffset+2];buffer[colorOffset]=(srcR*opaci+destR*(1-opaci));buffer[colorOffset+1]=(srcG*opaci+destG*(1-opaci));buffer[colorOffset+2]=(srcB*opaci+destB*(1-opaci));buffer[colorOffset+3]=(material.opacity<<8)-1;if(buffer[colorOffset+3]==255)
depthBuf[offset]=depth;}}
function lightingMaterialShader(buffer,depthBuf,offset,depth,u,v,n,face,material){var colorOffset=offset*4;var texture=textures[material.map.id];if(!texture.data)
return;var tdim=texture.width;var isTransparent=material.transparent;var cIndex=(n>0?(~~n):0)*3;var tbound=tdim-1;var tdata=texture.data;var tIndex=(((v*tdim)&tbound)*tdim+((u*tdim)&tbound))*4;if(!isTransparent){buffer[colorOffset]=(material.palette[cIndex]*tdata[tIndex])>>8;buffer[colorOffset+1]=(material.palette[cIndex+1]*tdata[tIndex+1])>>8;buffer[colorOffset+2]=(material.palette[cIndex+2]*tdata[tIndex+2])>>8;buffer[colorOffset+3]=(material.opacity<<8)-1;depthBuf[offset]=depth;}else{var foreColorR=material.palette[cIndex]*tdata[tIndex];var foreColorG=material.palette[cIndex+1]*tdata[tIndex+1];var foreColorB=material.palette[cIndex+2]*tdata[tIndex+2];var opaci=tdata[tIndex+3]*material.opacity/256;var destR=buffer[colorOffset];var destG=buffer[colorOffset+1];var destB=buffer[colorOffset+2];buffer[colorOffset]=foreColorR*opaci+destR*(1-opaci);buffer[colorOffset+1]=foreColorG*opaci+destG*(1-opaci);buffer[colorOffset+2]=foreColorB*opaci+destB*(1-opaci);buffer[colorOffset+3]=(material.opacity<<8)-1;if(buffer[colorOffset+3]==255)
depthBuf[offset]=depth;}}
function getMaterialShader(material){var id=material.id;var shader=shaders[id];if(shader&&material.map&&!textures[material.map.id])delete shaders[id];if(shaders[id]===undefined||material.needsUpdate===true){if(material instanceof THREE.MeshBasicMaterial||material instanceof THREE.MeshLambertMaterial||material instanceof THREE.MeshPhongMaterial||material instanceof THREE.SpriteMaterial){if(material instanceof THREE.MeshLambertMaterial){if(!material.palette){material.palette=getPalette(material,false);}}else if(material instanceof THREE.MeshPhongMaterial){if(!material.palette){material.palette=getPalette(material,true);}}
var string;if(material.map){var texture=new THREE.SoftwareRenderer.Texture();texture.fromImage(material.map.image);if(!texture.data)return;textures[material.map.id]=texture;if(material instanceof THREE.MeshBasicMaterial||material instanceof THREE.SpriteMaterial){shader=basicMaterialShader;}else{shader=lightingMaterialShader;}}else{if(material.vertexColors===THREE.FaceColors){string=['var colorOffset = offset * 4;','buffer[ colorOffset ] = face.color.r * 255;','buffer[ colorOffset + 1 ] = face.color.g * 255;','buffer[ colorOffset + 2 ] = face.color.b * 255;','buffer[ colorOffset + 3 ] = material.opacity * 255;','depthBuf[ offset ] = depth;'].join('\n');}else{string=['var colorOffset = offset * 4;','buffer[ colorOffset ] = material.color.r * 255;','buffer[ colorOffset + 1 ] = material.color.g * 255;','buffer[ colorOffset + 2 ] = material.color.b * 255;','buffer[ colorOffset + 3 ] = material.opacity * 255;','depthBuf[ offset ] = depth;'].join('\n');}
shader=new Function('buffer, depthBuf, offset, depth, u, v, n, face, material',string);}}else if(material instanceof THREE.LineBasicMaterial){var string=['var colorOffset = offset * 4;','buffer[ colorOffset ] = material.color.r * (color1.r+color2.r) * 0.5 * 255;','buffer[ colorOffset + 1 ] = material.color.g * (color1.g+color2.g) * 0.5 * 255;','buffer[ colorOffset + 2 ] = material.color.b * (color1.b+color2.b) * 0.5 * 255;','buffer[ colorOffset + 3 ] = 255;','depthBuf[ offset ] = depth;'].join('\n');shader=new Function('buffer, depthBuf, offset, depth, color1, color2, material',string);}else{var string=['var colorOffset = offset * 4;','buffer[ colorOffset ] = u * 255;','buffer[ colorOffset + 1 ] = v * 255;','buffer[ colorOffset + 2 ] = 0;','buffer[ colorOffset + 3 ] = 255;','depthBuf[ offset ] = depth;'].join('\n');shader=new Function('buffer, depthBuf, offset, depth, u, v, n, face, material',string);}
shaders[id]=shader;material.needsUpdate=false;}
return shader;}
function drawTriangle(v1,v2,v3,uv1,uv2,uv3,shader,face,material){if(v1.z<-1||v1.z>1||v2.z<-1||v2.z>1||v3.z<-1||v3.z>1)return;var fixscale=(1<<subpixelBits);var x1=(v1.x*viewportXScale+viewportXOffs)|0;var x2=(v2.x*viewportXScale+viewportXOffs)|0;var x3=(v3.x*viewportXScale+viewportXOffs)|0;var y1=(v1.y*viewportYScale+viewportYOffs)|0;var y2=(v2.y*viewportYScale+viewportYOffs)|0;var y3=(v3.y*viewportYScale+viewportYOffs)|0;var bHasNormal=face.vertexNormalsModel&&face.vertexNormalsModel.length;var bHasUV=uv1&&uv2&&uv3;var longestSide=Math.max(Math.sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)),Math.sqrt((x2-x3)*(x2-x3)+(y2-y3)*(y2-y3)),Math.sqrt((x3-x1)*(x3-x1)+(y3-y1)*(y3-y1)));if(!(face instanceof THREE.RenderableSprite)&&(longestSide>100*fixscale)){var tempFace={vertexNormalsModel:[],color:face.color};var mpUV12,mpUV23,mpUV31;if(bHasUV){if(mpUVPoolCount===mpUVPool.length){mpUV12=new THREE.Vector2();mpUVPool.push(mpUV12);++mpUVPoolCount;mpUV23=new THREE.Vector2();mpUVPool.push(mpUV23);++mpUVPoolCount;mpUV31=new THREE.Vector2();mpUVPool.push(mpUV31);++mpUVPoolCount;}else{mpUV12=mpUVPool[mpUVPoolCount];++mpUVPoolCount;mpUV23=mpUVPool[mpUVPoolCount];++mpUVPoolCount;mpUV31=mpUVPool[mpUVPoolCount];++mpUVPoolCount;}
var weight;weight=(1+v2.z)*(v2.w/v1.w)/(1+v1.z);mpUV12.copy(uv1).multiplyScalar(weight).add(uv2).multiplyScalar(1/(weight+1));weight=(1+v3.z)*(v3.w/v2.w)/(1+v2.z);mpUV23.copy(uv2).multiplyScalar(weight).add(uv3).multiplyScalar(1/(weight+1));weight=(1+v1.z)*(v1.w/v3.w)/(1+v3.z);mpUV31.copy(uv3).multiplyScalar(weight).add(uv1).multiplyScalar(1/(weight+1));}
var mpV12,mpV23,mpV31;if(mpVPoolCount===mpVPool.length){mpV12=new THREE.Vector4();mpVPool.push(mpV12);++mpVPoolCount;mpV23=new THREE.Vector4();mpVPool.push(mpV23);++mpVPoolCount;mpV31=new THREE.Vector4();mpVPool.push(mpV31);++mpVPoolCount;}else{mpV12=mpVPool[mpVPoolCount];++mpVPoolCount;mpV23=mpVPool[mpVPoolCount];++mpVPoolCount;mpV31=mpVPool[mpVPoolCount];++mpVPoolCount;}
mpV12.copy(v1).add(v2).multiplyScalar(0.5);mpV23.copy(v2).add(v3).multiplyScalar(0.5);mpV31.copy(v3).add(v1).multiplyScalar(0.5);var mpN12,mpN23,mpN31;if(bHasNormal){if(mpNPoolCount===mpNPool.length){mpN12=new THREE.Vector3();mpNPool.push(mpN12);++mpNPoolCount;mpN23=new THREE.Vector3();mpNPool.push(mpN23);++mpNPoolCount;mpN31=new THREE.Vector3();mpNPool.push(mpN31);++mpNPoolCount;}else{mpN12=mpNPool[mpNPoolCount];++mpNPoolCount;mpN23=mpNPool[mpNPoolCount];++mpNPoolCount;mpN31=mpNPool[mpNPoolCount];++mpNPoolCount;}
mpN12.copy(face.vertexNormalsModel[0]).add(face.vertexNormalsModel[1]).normalize();mpN23.copy(face.vertexNormalsModel[1]).add(face.vertexNormalsModel[2]).normalize();mpN31.copy(face.vertexNormalsModel[2]).add(face.vertexNormalsModel[0]).normalize();}
if(bHasNormal){tempFace.vertexNormalsModel[0]=face.vertexNormalsModel[0];tempFace.vertexNormalsModel[1]=mpN12;tempFace.vertexNormalsModel[2]=mpN31;}
drawTriangle(v1,mpV12,mpV31,uv1,mpUV12,mpUV31,shader,tempFace,material);if(bHasNormal){tempFace.vertexNormalsModel[0]=face.vertexNormalsModel[1];tempFace.vertexNormalsModel[1]=mpN23;tempFace.vertexNormalsModel[2]=mpN12;}
drawTriangle(v2,mpV23,mpV12,uv2,mpUV23,mpUV12,shader,tempFace,material);if(bHasNormal){tempFace.vertexNormalsModel[0]=mpN12;tempFace.vertexNormalsModel[1]=mpN23;tempFace.vertexNormalsModel[2]=mpN31;}
drawTriangle(mpV12,mpV23,mpV31,mpUV12,mpUV23,mpUV31,shader,tempFace,material);if(bHasNormal){tempFace.vertexNormalsModel[0]=face.vertexNormalsModel[2];tempFace.vertexNormalsModel[1]=mpN31;tempFace.vertexNormalsModel[2]=mpN23;}
drawTriangle(v3,mpV31,mpV23,uv3,mpUV31,mpUV23,shader,tempFace,material);return;}
var z1=(v1.z*viewportZScale+viewportZOffs)|0;var z2=(v2.z*viewportZScale+viewportZOffs)|0;var z3=(v3.z*viewportZScale+viewportZOffs)|0;var bHasUV=false;var tu1,tv1,tu2,tv2,tu3,tv3;if(uv1&&uv2&&uv3){bHasUV=true;tu1=uv1.x;tv1=1-uv1.y;tu2=uv2.x;tv2=1-uv2.y;tu3=uv3.x;tv3=1-uv3.y;}
var n1,n2,n3,nz1,nz2,nz3;if(bHasNormal){n1=face.vertexNormalsModel[0];n2=face.vertexNormalsModel[1];n3=face.vertexNormalsModel[2];nz1=n1.z*255;nz2=n2.z*255;nz3=n3.z*255;}
var dx12=x1-x2,dy12=y2-y1;var dx23=x2-x3,dy23=y3-y2;var dx31=x3-x1,dy31=y1-y3;var minx=Math.max((Math.min(x1,x2,x3)+subpixelBias)>>subpixelBits,0);var maxx=Math.min((Math.max(x1,x2,x3)+subpixelBias)>>subpixelBits,canvasWidth);var miny=Math.max((Math.min(y1,y2,y3)+subpixelBias)>>subpixelBits,0);var maxy=Math.min((Math.max(y1,y2,y3)+subpixelBias)>>subpixelBits,canvasHeight);rectx1=Math.min(minx,rectx1);rectx2=Math.max(maxx,rectx2);recty1=Math.min(miny,recty1);recty2=Math.max(maxy,recty2);var q=blockSize;minx&=~(q-1);miny&=~(q-1);var minXfixscale=(minx<<subpixelBits);var minYfixscale=(miny<<subpixelBits);var c1=dy12*((minXfixscale)-x1)+dx12*((minYfixscale)-y1);var c2=dy23*((minXfixscale)-x2)+dx23*((minYfixscale)-y2);var c3=dy31*((minXfixscale)-x3)+dx31*((minYfixscale)-y3);if(dy12>0||(dy12==0&&dx12>0))c1++;if(dy23>0||(dy23==0&&dx23>0))c2++;if(dy31>0||(dy31==0&&dx31>0))c3++;c1=(c1-1)>>subpixelBits;c2=(c2-1)>>subpixelBits;c3=(c3-1)>>subpixelBits;var dz12=z1-z2,dz31=z3-z1;var invDet=1.0/(dx12*dy31-dx31*dy12);var dzdx=(invDet*(dz12*dy31-dz31*dy12));var dzdy=(invDet*(dz12*dx31-dx12*dz31));var cz=(z1+((minXfixscale)-x1)*dzdx+((minYfixscale)-y1)*dzdy)|0;dzdx=(dzdx*fixscale)|0;dzdy=(dzdy*fixscale)|0;var dtvdx,dtvdy,cbtu,cbtv;if(bHasUV){var dtu12=tu1-tu2,dtu31=tu3-tu1;var dtudx=(invDet*(dtu12*dy31-dtu31*dy12));var dtudy=(invDet*(dtu12*dx31-dx12*dtu31));var dtv12=tv1-tv2,dtv31=tv3-tv1;dtvdx=(invDet*(dtv12*dy31-dtv31*dy12));dtvdy=(invDet*(dtv12*dx31-dx12*dtv31));cbtu=(tu1+(minXfixscale-x1)*dtudx+(minYfixscale-y1)*dtudy);cbtv=(tv1+(minXfixscale-x1)*dtvdx+(minYfixscale-y1)*dtvdy);dtudx=dtudx*fixscale;dtudy=dtudy*fixscale;dtvdx=dtvdx*fixscale;dtvdy=dtvdy*fixscale;}
var dnzdy,cbnz;if(bHasNormal){var dnz12=nz1-nz2,dnz31=nz3-nz1;var dnzdx=(invDet*(dnz12*dy31-dnz31*dy12));var dnzdy=(invDet*(dnz12*dx31-dx12*dnz31));cbnz=(nz1+(minXfixscale-x1)*dnzdx+(minYfixscale-y1)*dnzdy);dnzdx=(dnzdx*fixscale);dnzdy=(dnzdy*fixscale);}
var qm1=q-1;var nmin1=0,nmax1=0;var nmin2=0,nmax2=0;var nmin3=0,nmax3=0;var nminz=0,nmaxz=0;if(dx12>=0)nmax1-=qm1*dx12;else nmin1-=qm1*dx12;if(dy12>=0)nmax1-=qm1*dy12;else nmin1-=qm1*dy12;if(dx23>=0)nmax2-=qm1*dx23;else nmin2-=qm1*dx23;if(dy23>=0)nmax2-=qm1*dy23;else nmin2-=qm1*dy23;if(dx31>=0)nmax3-=qm1*dx31;else nmin3-=qm1*dx31;if(dy31>=0)nmax3-=qm1*dy31;else nmin3-=qm1*dy31;if(dzdx>=0)nmaxz+=qm1*dzdx;else nminz+=qm1*dzdx;if(dzdy>=0)nmaxz+=qm1*dzdy;else nminz+=qm1*dzdy;var linestep=canvasWidth-q;var cb1=c1;var cb2=c2;var cb3=c3;var cbz=cz;var qstep=-q;var e1x=qstep*dy12;var e2x=qstep*dy23;var e3x=qstep*dy31;var ezx=qstep*dzdx;var etux,etvx;if(bHasUV){etux=qstep*dtudx;etvx=qstep*dtvdx;}
var enzx;if(bHasNormal){enzx=qstep*dnzdx;}
var x0=minx;for(var y0=miny;y0<maxy;y0+=q){while(x0>=minx&&x0<maxx&&cb1>=nmax1&&cb2>=nmax2&&cb3>=nmax3){x0+=qstep;cb1+=e1x;cb2+=e2x;cb3+=e3x;cbz+=ezx;if(bHasUV){cbtu+=etux;cbtv+=etvx;}
if(bHasNormal){cbnz+=enzx;}}
qstep=-qstep;e1x=-e1x;e2x=-e2x;e3x=-e3x;ezx=-ezx;if(bHasUV){etux=-etux;etvx=-etvx;}
if(bHasNormal){enzx=-enzx;}
while(1){x0+=qstep;cb1+=e1x;cb2+=e2x;cb3+=e3x;cbz+=ezx;if(bHasUV){cbtu+=etux;cbtv+=etvx;}
if(bHasNormal){cbnz+=enzx;}
if(x0<minx||x0>=maxx)break;if(cb1<nmax1)if(e1x<0)break;else continue;if(cb2<nmax2)if(e2x<0)break;else continue;if(cb3<nmax3)if(e3x<0)break;else continue;var blockX=x0>>blockShift;var blockY=y0>>blockShift;var blockId=blockX+blockY*canvasWBlocks;var minz=cbz+nminz;if(blockMaxZ[blockId]<minz)continue;var bflags=blockFlags[blockId];if(bflags&BLOCK_NEEDCLEAR)clearBlock(blockX,blockY);blockFlags[blockId]=bflags&~(BLOCK_ISCLEAR|BLOCK_NEEDCLEAR);var offset=x0+y0*canvasWidth;if(cb1>=nmin1&&cb2>=nmin2&&cb3>=nmin3){var maxz=cbz+nmaxz;blockMaxZ[blockId]=Math.min(blockMaxZ[blockId],maxz);var cy1=cb1;var cy2=cb2;var cyz=cbz;var cytu,cytv;if(bHasUV){cytu=cbtu;cytv=cbtv;}
var cynz;if(bHasNormal){cynz=cbnz;}
for(var iy=0;iy<q;iy++){var cx1=cy1;var cx2=cy2;var cxz=cyz;var cxtu;var cxtv;if(bHasUV){cxtu=cytu;cxtv=cytv;}
var cxnz;if(bHasNormal){cxnz=cynz;}
for(var ix=0;ix<q;ix++){var z=cxz;if(z<zbuffer[offset]){shader(data,zbuffer,offset,z,cxtu,cxtv,cxnz,face,material);}
cx1+=dy12;cx2+=dy23;cxz+=dzdx;if(bHasUV){cxtu+=dtudx;cxtv+=dtvdx;}
if(bHasNormal){cxnz+=dnzdx;}
offset++;}
cy1+=dx12;cy2+=dx23;cyz+=dzdy;if(bHasUV){cytu+=dtudy;cytv+=dtvdy;}
if(bHasNormal){cynz+=dnzdy;}
offset+=linestep;}}else{var cy1=cb1;var cy2=cb2;var cy3=cb3;var cyz=cbz;var cytu,cytv;if(bHasUV){cytu=cbtu;cytv=cbtv;}
var cynz;if(bHasNormal){cynz=cbnz;}
for(var iy=0;iy<q;iy++){var cx1=cy1;var cx2=cy2;var cx3=cy3;var cxz=cyz;var cxtu;var cxtv;if(bHasUV){cxtu=cytu;cxtv=cytv;}
var cxnz;if(bHasNormal){cxnz=cynz;}
for(var ix=0;ix<q;ix++){if((cx1|cx2|cx3)>=0){var z=cxz;if(z<zbuffer[offset]){shader(data,zbuffer,offset,z,cxtu,cxtv,cxnz,face,material);}}
cx1+=dy12;cx2+=dy23;cx3+=dy31;cxz+=dzdx;if(bHasUV){cxtu+=dtudx;cxtv+=dtvdx;}
if(bHasNormal){cxnz+=dnzdx;}
offset++;}
cy1+=dx12;cy2+=dx23;cy3+=dx31;cyz+=dzdy;if(bHasUV){cytu+=dtudy;cytv+=dtvdy;}
if(bHasNormal){cynz+=dnzdy;}
offset+=linestep;}}}
cb1+=q*dx12;cb2+=q*dx23;cb3+=q*dx31;cbz+=q*dzdy;if(bHasUV){cbtu+=q*dtudy;cbtv+=q*dtvdy;}
if(bHasNormal){cbnz+=q*dnzdy;}}}
function drawLine(v1,v2,color1,color2,shader,material){if(!lineMode){lineMode=true;blockShift=0;blockSize=1<<blockShift;setSize(canvas.width,canvas.height);}
if(v1.z<-1||v1.z>1||v2.z<-1||v2.z>1)return;var halfLineWidth=Math.floor((material.linewidth-1)*0.5);var x1=(v1.x*viewportXScale+viewportXOffs)|0;var x2=(v2.x*viewportXScale+viewportXOffs)|0;var y1=(v1.y*viewportYScale+viewportYOffs)|0;var y2=(v2.y*viewportYScale+viewportYOffs)|0;var z1=(v1.z*viewportZScale+viewportZOffs)|0;var z2=(v2.z*viewportZScale+viewportZOffs)|0;var dx12=x1-x2,dy12=y1-y2,dz12=z1-z2;var minx=Math.max((Math.min(x1,x2)+subpixelBias)>>subpixelBits,0);var maxx=Math.min((Math.max(x1,x2)+subpixelBias)>>subpixelBits,canvasWidth);var miny=Math.max((Math.min(y1,y2)+subpixelBias)>>subpixelBits,0);var maxy=Math.min((Math.max(y1,y2)+subpixelBias)>>subpixelBits,canvasHeight);var minz=Math.max((Math.min(z1,z2)+subpixelBias)>>subpixelBits,0);var maxz=(Math.max(z1,z2)+subpixelBias)>>subpixelBits;rectx1=Math.min(minx,rectx1);rectx2=Math.max(maxx,rectx2);recty1=Math.min(miny,recty1);recty2=Math.max(maxy,recty2);var length=Math.sqrt((dy12*dy12)+(dx12*dx12));var unitX=(dx12/length);var unitY=(dy12/length);var unitZ=(dz12/length);var pixelX,pixelY,pixelZ;var pX,pY,pZ;crossVector.set(unitX,unitY,unitZ);crossVector.cross(lookVector);crossVector.normalize();while(length>0){pixelX=x2+length*unitX;pixelY=y2+length*unitY;pixelZ=z2+length*unitZ;pixelX=(pixelX+subpixelBias)>>subpixelBits;pixelY=(pixelY+subpixelBias)>>subpixelBits;pZ=(pixelZ+subpixelBias)>>subpixelBits;for(var i=-halfLineWidth;i<=halfLineWidth;++i){pX=Math.floor((pixelX+crossVector.x*i));pY=Math.floor((pixelY+crossVector.y*i));if(rectx1>=pX||rectx2<=pX||recty1>=pY||recty2<=pY)
continue;var blockX=pX>>blockShift;var blockY=pY>>blockShift;var blockId=blockX+blockY*canvasWBlocks;if(blockMaxZ[blockId]<minz)continue;blockMaxZ[blockId]=Math.min(blockMaxZ[blockId],maxz);var bflags=blockFlags[blockId];if(bflags&BLOCK_NEEDCLEAR)clearBlock(blockX,blockY);blockFlags[blockId]=bflags&~(BLOCK_ISCLEAR|BLOCK_NEEDCLEAR);var offset=pX+pY*canvasWidth;if(pZ<zbuffer[offset]){shader(data,zbuffer,offset,pZ,color1,color2,material);}}
--length;}}
function clearBlock(blockX,blockY){var zoffset=blockX*blockSize+blockY*blockSize*canvasWidth;var poffset=zoffset*4;var zlinestep=canvasWidth-blockSize;var plinestep=zlinestep*4;for(var y=0;y<blockSize;y++){for(var x=0;x<blockSize;x++){zbuffer[zoffset++]=maxZVal;data[poffset++]=clearColor.r*255|0;data[poffset++]=clearColor.g*255|0;data[poffset++]=clearColor.b*255|0;data[poffset++]=alpha?0:255;}
zoffset+=zlinestep;poffset+=plinestep;}}
function finishClear(){var block=0;for(var y=0;y<canvasHBlocks;y++){for(var x=0;x<canvasWBlocks;x++){if(blockFlags[block]&BLOCK_NEEDCLEAR){clearBlock(x,y);blockFlags[block]=BLOCK_ISCLEAR;}
block++;}}}};THREE.SoftwareRenderer.Texture=function(){var canvas;this.fromImage=function(image){if(!image||image.width<=0||image.height<=0)
return;if(canvas===undefined){canvas=document.createElement('canvas');}
var size=image.width>image.height?image.width:image.height;size=THREE.Math.nextPowerOfTwo(size);if(canvas.width!=size||canvas.height!=size){canvas.width=size;canvas.height=size;}
var ctx=canvas.getContext('2d');ctx.clearRect(0,0,size,size);ctx.drawImage(image,0,0,size,size);var imgData=ctx.getImageData(0,0,size,size);this.data=imgData.data;this.width=size;this.height=size;this.srcUrl=image.src;};};THREE.SVGObject=function(node){THREE.Object3D.call(this);this.node=node;};THREE.SVGObject.prototype=Object.create(THREE.Object3D.prototype);THREE.SVGObject.prototype.constructor=THREE.SVGObject;THREE.SVGRenderer=function(){console.log('THREE.SVGRenderer',THREE.REVISION);var _this=this,_renderData,_elements,_lights,_projector=new THREE.Projector(),_svg=document.createElementNS('http://www.w3.org/2000/svg','svg'),_svgWidth,_svgHeight,_svgWidthHalf,_svgHeightHalf,_v1,_v2,_v3,_v4,_clipBox=new THREE.Box2(),_elemBox=new THREE.Box2(),_color=new THREE.Color(),_diffuseColor=new THREE.Color(),_ambientLight=new THREE.Color(),_directionalLights=new THREE.Color(),_pointLights=new THREE.Color(),_clearColor=new THREE.Color(),_clearAlpha=1,_vector3=new THREE.Vector3(),_centroid=new THREE.Vector3(),_normal=new THREE.Vector3(),_normalViewMatrix=new THREE.Matrix3(),_viewMatrix=new THREE.Matrix4(),_viewProjectionMatrix=new THREE.Matrix4(),_svgPathPool=[],_svgNode,_pathCount=0,_currentPath,_currentStyle,_quality=1,_precision=null;this.domElement=_svg;this.autoClear=true;this.sortObjects=true;this.sortElements=true;this.info={render:{vertices:0,faces:0}};this.setQuality=function(quality){switch(quality){case"high":_quality=1;break;case"low":_quality=0;break;}};this.supportsVertexTextures=function(){};this.setFaceCulling=function(){};this.setClearColor=function(color,alpha){_clearColor.set(color);_clearAlpha=alpha!==undefined?alpha:1;};this.setPixelRatio=function(){};this.setSize=function(width,height){_svgWidth=width;_svgHeight=height;_svgWidthHalf=_svgWidth/2;_svgHeightHalf=_svgHeight/2;_svg.setAttribute('viewBox',(-_svgWidthHalf)+' '+(-_svgHeightHalf)+' '+_svgWidth+' '+_svgHeight);_svg.setAttribute('width',_svgWidth);_svg.setAttribute('height',_svgHeight);_clipBox.min.set(-_svgWidthHalf,-_svgHeightHalf);_clipBox.max.set(_svgWidthHalf,_svgHeightHalf);};this.setPrecision=function(precision){_precision=precision;};function removeChildNodes(){_pathCount=0;while(_svg.childNodes.length>0){_svg.removeChild(_svg.childNodes[0]);}}
function getSvgColor(color,opacity){var arg=Math.floor(color.r*255)+','+Math.floor(color.g*255)+','+Math.floor(color.b*255);if(opacity===undefined||opacity===1)return'rgb('+arg+')';return'rgb('+arg+'); fill-opacity: '+opacity;}
function convert(c){return _precision!==null?c.toFixed(_precision):c;}
this.clear=function(){removeChildNodes();_svg.style.backgroundColor=getSvgColor(_clearColor,_clearAlpha);};this.render=function(scene,camera){if(camera instanceof THREE.Camera===false){console.error('THREE.SVGRenderer.render: camera is not an instance of THREE.Camera.');return;}
var background=scene.background;if(background&&background.isColor){removeChildNodes();_svg.style.backgroundColor=getSvgColor(background);}else if(this.autoClear===true){this.clear();}
_this.info.render.vertices=0;_this.info.render.faces=0;_viewMatrix.copy(camera.matrixWorldInverse);_viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix,_viewMatrix);_renderData=_projector.projectScene(scene,camera,this.sortObjects,this.sortElements);_elements=_renderData.elements;_lights=_renderData.lights;_normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);calculateLights(_lights);_currentPath='';_currentStyle='';for(var e=0,el=_elements.length;e<el;e++){var element=_elements[e];var material=element.material;if(material===undefined||material.opacity===0)continue;_elemBox.makeEmpty();if(element instanceof THREE.RenderableSprite){_v1=element;_v1.x*=_svgWidthHalf;_v1.y*=-_svgHeightHalf;renderSprite(_v1,element,material);}else if(element instanceof THREE.RenderableLine){_v1=element.v1;_v2=element.v2;_v1.positionScreen.x*=_svgWidthHalf;_v1.positionScreen.y*=-_svgHeightHalf;_v2.positionScreen.x*=_svgWidthHalf;_v2.positionScreen.y*=-_svgHeightHalf;_elemBox.setFromPoints([_v1.positionScreen,_v2.positionScreen]);if(_clipBox.intersectsBox(_elemBox)===true){renderLine(_v1,_v2,element,material);}}else if(element instanceof THREE.RenderableFace){_v1=element.v1;_v2=element.v2;_v3=element.v3;if(_v1.positionScreen.z<-1||_v1.positionScreen.z>1)continue;if(_v2.positionScreen.z<-1||_v2.positionScreen.z>1)continue;if(_v3.positionScreen.z<-1||_v3.positionScreen.z>1)continue;_v1.positionScreen.x*=_svgWidthHalf;_v1.positionScreen.y*=-_svgHeightHalf;_v2.positionScreen.x*=_svgWidthHalf;_v2.positionScreen.y*=-_svgHeightHalf;_v3.positionScreen.x*=_svgWidthHalf;_v3.positionScreen.y*=-_svgHeightHalf;_elemBox.setFromPoints([_v1.positionScreen,_v2.positionScreen,_v3.positionScreen]);if(_clipBox.intersectsBox(_elemBox)===true){renderFace3(_v1,_v2,_v3,element,material);}}}
flushPath();scene.traverseVisible(function(object){if(object instanceof THREE.SVGObject){_vector3.setFromMatrixPosition(object.matrixWorld);_vector3.applyMatrix4(_viewProjectionMatrix);var x=_vector3.x*_svgWidthHalf;var y=-_vector3.y*_svgHeightHalf;var node=object.node;node.setAttribute('transform','translate('+x+','+y+')');_svg.appendChild(node);}});};function calculateLights(lights){_ambientLight.setRGB(0,0,0);_directionalLights.setRGB(0,0,0);_pointLights.setRGB(0,0,0);for(var l=0,ll=lights.length;l<ll;l++){var light=lights[l];var lightColor=light.color;if(light instanceof THREE.AmbientLight){_ambientLight.r+=lightColor.r;_ambientLight.g+=lightColor.g;_ambientLight.b+=lightColor.b;}else if(light instanceof THREE.DirectionalLight){_directionalLights.r+=lightColor.r;_directionalLights.g+=lightColor.g;_directionalLights.b+=lightColor.b;}else if(light instanceof THREE.PointLight){_pointLights.r+=lightColor.r;_pointLights.g+=lightColor.g;_pointLights.b+=lightColor.b;}}}
function calculateLight(lights,position,normal,color){for(var l=0,ll=lights.length;l<ll;l++){var light=lights[l];var lightColor=light.color;if(light instanceof THREE.DirectionalLight){var lightPosition=_vector3.setFromMatrixPosition(light.matrixWorld).normalize();var amount=normal.dot(lightPosition);if(amount<=0)continue;amount*=light.intensity;color.r+=lightColor.r*amount;color.g+=lightColor.g*amount;color.b+=lightColor.b*amount;}else if(light instanceof THREE.PointLight){var lightPosition=_vector3.setFromMatrixPosition(light.matrixWorld);var amount=normal.dot(_vector3.subVectors(lightPosition,position).normalize());if(amount<=0)continue;amount*=light.distance==0?1:1-Math.min(position.distanceTo(lightPosition)/light.distance,1);if(amount==0)continue;amount*=light.intensity;color.r+=lightColor.r*amount;color.g+=lightColor.g*amount;color.b+=lightColor.b*amount;}}}
function renderSprite(v1,element,material){var scaleX=element.scale.x*_svgWidthHalf;var scaleY=element.scale.y*_svgHeightHalf;if(material.isPointsMaterial){scaleX*=material.size;scaleY*=material.size;}
var path='M'+convert(v1.x-scaleX*0.5)+','+convert(v1.y-scaleY*0.5)+'h'+convert(scaleX)+'v'+convert(scaleY)+'h'+convert(-scaleX)+'z';var style="";if(material.isSpriteMaterial||material.isPointsMaterial){style='fill:'+getSvgColor(material.color,material.opacity);}
addPath(style,path);}
function renderLine(v1,v2,element,material){var path='M'+convert(v1.positionScreen.x)+','+convert(v1.positionScreen.y)+'L'+convert(v2.positionScreen.x)+','+convert(v2.positionScreen.y);if(material.isLineBasicMaterial){var style='fill:none;stroke:'+getSvgColor(material.color,material.opacity)+';stroke-width:'+material.linewidth+';stroke-linecap:'+material.linecap;if(material.isLineDashedMaterial){style=style+';stroke-dasharray:'+material.dashSize+","+material.gapSize;}
addPath(style,path);}}
function renderFace3(v1,v2,v3,element,material){_this.info.render.vertices+=3;_this.info.render.faces++;var path='M'+convert(v1.positionScreen.x)+','+convert(v1.positionScreen.y)+'L'+convert(v2.positionScreen.x)+','+convert(v2.positionScreen.y)+'L'+convert(v3.positionScreen.x)+','+convert(v3.positionScreen.y)+'z';var style='';if(material instanceof THREE.MeshBasicMaterial){_color.copy(material.color);if(material.vertexColors===THREE.FaceColors){_color.multiply(element.color);}}else if(material instanceof THREE.MeshLambertMaterial||material instanceof THREE.MeshPhongMaterial){_diffuseColor.copy(material.color);if(material.vertexColors===THREE.FaceColors){_diffuseColor.multiply(element.color);}
_color.copy(_ambientLight);_centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);calculateLight(_lights,_centroid,element.normalModel,_color);_color.multiply(_diffuseColor).add(material.emissive);}else if(material instanceof THREE.MeshNormalMaterial){_normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix);_color.setRGB(_normal.x,_normal.y,_normal.z).multiplyScalar(0.5).addScalar(0.5);}
if(material.wireframe){style='fill:none;stroke:'+getSvgColor(_color,material.opacity)+';stroke-width:'+material.wireframeLinewidth+';stroke-linecap:'+material.wireframeLinecap+';stroke-linejoin:'+material.wireframeLinejoin;}else{style='fill:'+getSvgColor(_color,material.opacity);}
addPath(style,path);}
function addPath(style,path){if(_currentStyle===style){_currentPath+=path}else{flushPath();_currentStyle=style;_currentPath=path;}}
function flushPath(){if(_currentPath){_svgNode=getPathNode(_pathCount++);_svgNode.setAttribute('d',_currentPath);_svgNode.setAttribute('style',_currentStyle);_svg.appendChild(_svgNode);}
_currentPath='';_currentStyle='';}
function getPathNode(id){if(_svgPathPool[id]==null){_svgPathPool[id]=document.createElementNS('http://www.w3.org/2000/svg','path');if(_quality==0){_svgPathPool[id].setAttribute('shape-rendering','crispEdges');}
return _svgPathPool[id];}
return _svgPathPool[id];}};THREE.EditorControls=function(object,domElement){domElement=(domElement!==undefined)?domElement:document;this.enabled=true;this.center=new THREE.Vector3();this.panSpeed=0.001;this.zoomSpeed=0.001;this.rotationSpeed=0.005;var scope=this;var vector=new THREE.Vector3();var STATE={NONE:-1,ROTATE:0,ZOOM:1,PAN:2};var state=STATE.NONE;var center=this.center;var normalMatrix=new THREE.Matrix3();var pointer=new THREE.Vector2();var pointerOld=new THREE.Vector2();var spherical=new THREE.Spherical();var changeEvent={type:'change'};this.focus=function(target){var box=new THREE.Box3().setFromObject(target);object.lookAt(center.copy(box.getCenter()));scope.dispatchEvent(changeEvent);};this.pan=function(delta){var distance=object.position.distanceTo(center);delta.multiplyScalar(distance*scope.panSpeed);delta.applyMatrix3(normalMatrix.getNormalMatrix(object.matrix));object.position.add(delta);center.add(delta);scope.dispatchEvent(changeEvent);};this.zoom=function(delta){var distance=object.position.distanceTo(center);delta.multiplyScalar(distance*scope.zoomSpeed);if(delta.length()>distance)return;delta.applyMatrix3(normalMatrix.getNormalMatrix(object.matrix));object.position.add(delta);scope.dispatchEvent(changeEvent);};this.rotate=function(delta){vector.copy(object.position).sub(center);spherical.setFromVector3(vector);spherical.theta+=delta.x;spherical.phi+=delta.y;spherical.makeSafe();vector.setFromSpherical(spherical);object.position.copy(center).add(vector);object.lookAt(center);scope.dispatchEvent(changeEvent);};function onMouseDown(event){if(scope.enabled===false)return;if(event.button===0){state=STATE.ROTATE;}else if(event.button===1){state=STATE.ZOOM;}else if(event.button===2){state=STATE.PAN;}
pointerOld.set(event.clientX,event.clientY);domElement.addEventListener('mousemove',onMouseMove,false);domElement.addEventListener('mouseup',onMouseUp,false);domElement.addEventListener('mouseout',onMouseUp,false);domElement.addEventListener('dblclick',onMouseUp,false);}
function onMouseMove(event){if(scope.enabled===false)return;pointer.set(event.clientX,event.clientY);var movementX=pointer.x-pointerOld.x;var movementY=pointer.y-pointerOld.y;if(state===STATE.ROTATE){scope.rotate(new THREE.Vector3(-movementX*scope.rotationSpeed,-movementY*scope.rotationSpeed,0));}else if(state===STATE.ZOOM){scope.zoom(new THREE.Vector3(0,0,movementY));}else if(state===STATE.PAN){scope.pan(new THREE.Vector3(-movementX,movementY,0));}
pointerOld.set(event.clientX,event.clientY);}
function onMouseUp(event){domElement.removeEventListener('mousemove',onMouseMove,false);domElement.removeEventListener('mouseup',onMouseUp,false);domElement.removeEventListener('mouseout',onMouseUp,false);domElement.removeEventListener('dblclick',onMouseUp,false);state=STATE.NONE;}
function onMouseWheel(event){event.preventDefault();scope.zoom(new THREE.Vector3(0,0,event.deltaY));}
function contextmenu(event){event.preventDefault();}
this.dispose=function(){domElement.removeEventListener('contextmenu',contextmenu,false);domElement.removeEventListener('mousedown',onMouseDown,false);domElement.removeEventListener('wheel',onMouseWheel,false);domElement.removeEventListener('mousemove',onMouseMove,false);domElement.removeEventListener('mouseup',onMouseUp,false);domElement.removeEventListener('mouseout',onMouseUp,false);domElement.removeEventListener('dblclick',onMouseUp,false);domElement.removeEventListener('touchstart',touchStart,false);domElement.removeEventListener('touchmove',touchMove,false);};domElement.addEventListener('contextmenu',contextmenu,false);domElement.addEventListener('mousedown',onMouseDown,false);domElement.addEventListener('wheel',onMouseWheel,false);var touches=[new THREE.Vector3(),new THREE.Vector3(),new THREE.Vector3()];var prevTouches=[new THREE.Vector3(),new THREE.Vector3(),new THREE.Vector3()];var prevDistance=null;function touchStart(event){if(scope.enabled===false)return;switch(event.touches.length){case 1:touches[0].set(event.touches[0].pageX,event.touches[0].pageY,0);touches[1].set(event.touches[0].pageX,event.touches[0].pageY,0);break;case 2:touches[0].set(event.touches[0].pageX,event.touches[0].pageY,0);touches[1].set(event.touches[1].pageX,event.touches[1].pageY,0);prevDistance=touches[0].distanceTo(touches[1]);break;}
prevTouches[0].copy(touches[0]);prevTouches[1].copy(touches[1]);}
function touchMove(event){if(scope.enabled===false)return;event.preventDefault();event.stopPropagation();function getClosest(touch,touches){var closest=touches[0];for(var i in touches){if(closest.distanceTo(touch)>touches[i].distanceTo(touch))closest=touches[i];}
return closest;}
switch(event.touches.length){case 1:touches[0].set(event.touches[0].pageX,event.touches[0].pageY,0);touches[1].set(event.touches[0].pageX,event.touches[0].pageY,0);scope.rotate(touches[0].sub(getClosest(touches[0],prevTouches)).multiplyScalar(-scope.rotationSpeed));break;case 2:touches[0].set(event.touches[0].pageX,event.touches[0].pageY,0);touches[1].set(event.touches[1].pageX,event.touches[1].pageY,0);var distance=touches[0].distanceTo(touches[1]);scope.zoom(new THREE.Vector3(0,0,prevDistance-distance));prevDistance=distance;var offset0=touches[0].clone().sub(getClosest(touches[0],prevTouches));var offset1=touches[1].clone().sub(getClosest(touches[1],prevTouches));offset0.x=-offset0.x;offset1.x=-offset1.x;scope.pan(offset0.add(offset1).multiplyScalar(0.5));break;}
prevTouches[0].copy(touches[0]);prevTouches[1].copy(touches[1]);}
domElement.addEventListener('touchstart',touchStart,false);domElement.addEventListener('touchmove',touchMove,false);};THREE.EditorControls.prototype=Object.create(THREE.EventDispatcher.prototype);THREE.EditorControls.prototype.constructor=THREE.EditorControls;(function(){'use strict';var GizmoMaterial=function(parameters){THREE.MeshBasicMaterial.call(this);this.depthTest=false;this.depthWrite=false;this.side=THREE.FrontSide;this.transparent=true;this.setValues(parameters);this.oldColor=this.color.clone();this.oldOpacity=this.opacity;this.highlight=function(highlighted){if(highlighted){this.color.setRGB(1,1,0);this.opacity=1;}else{this.color.copy(this.oldColor);this.opacity=this.oldOpacity;}};};GizmoMaterial.prototype=Object.create(THREE.MeshBasicMaterial.prototype);GizmoMaterial.prototype.constructor=GizmoMaterial;var GizmoLineMaterial=function(parameters){THREE.LineBasicMaterial.call(this);this.depthTest=false;this.depthWrite=false;this.transparent=true;this.linewidth=1;this.setValues(parameters);this.oldColor=this.color.clone();this.oldOpacity=this.opacity;this.highlight=function(highlighted){if(highlighted){this.color.setRGB(1,1,0);this.opacity=1;}else{this.color.copy(this.oldColor);this.opacity=this.oldOpacity;}};};GizmoLineMaterial.prototype=Object.create(THREE.LineBasicMaterial.prototype);GizmoLineMaterial.prototype.constructor=GizmoLineMaterial;var pickerMaterial=new GizmoMaterial({visible:false,transparent:false});THREE.TransformGizmo=function(){this.init=function(){THREE.Object3D.call(this);this.handles=new THREE.Object3D();this.pickers=new THREE.Object3D();this.planes=new THREE.Object3D();this.add(this.handles);this.add(this.pickers);this.add(this.planes);var planeGeometry=new THREE.PlaneBufferGeometry(50,50,2,2);var planeMaterial=new THREE.MeshBasicMaterial({visible:false,side:THREE.DoubleSide});var planes={"XY":new THREE.Mesh(planeGeometry,planeMaterial),"YZ":new THREE.Mesh(planeGeometry,planeMaterial),"XZ":new THREE.Mesh(planeGeometry,planeMaterial),"XYZE":new THREE.Mesh(planeGeometry,planeMaterial)};this.activePlane=planes["XYZE"];planes["YZ"].rotation.set(0,Math.PI/2,0);planes["XZ"].rotation.set(-Math.PI/2,0,0);for(var i in planes){planes[i].name=i;this.planes.add(planes[i]);this.planes[i]=planes[i];}
var setupGizmos=function(gizmoMap,parent){for(var name in gizmoMap){for(i=gizmoMap[name].length;i--;){var object=gizmoMap[name][i][0];var position=gizmoMap[name][i][1];var rotation=gizmoMap[name][i][2];object.name=name;if(position)object.position.set(position[0],position[1],position[2]);if(rotation)object.rotation.set(rotation[0],rotation[1],rotation[2]);parent.add(object);}}};setupGizmos(this.handleGizmos,this.handles);setupGizmos(this.pickerGizmos,this.pickers);this.traverse(function(child){if(child instanceof THREE.Mesh){child.updateMatrix();var tempGeometry=child.geometry.clone();tempGeometry.applyMatrix(child.matrix);child.geometry=tempGeometry;child.position.set(0,0,0);child.rotation.set(0,0,0);child.scale.set(1,1,1);}});};this.highlight=function(axis){this.traverse(function(child){if(child.material&&child.material.highlight){if(child.name===axis){child.material.highlight(true);}else{child.material.highlight(false);}}});};};THREE.TransformGizmo.prototype=Object.create(THREE.Object3D.prototype);THREE.TransformGizmo.prototype.constructor=THREE.TransformGizmo;THREE.TransformGizmo.prototype.update=function(rotation,eye){var vec1=new THREE.Vector3(0,0,0);var vec2=new THREE.Vector3(0,1,0);var lookAtMatrix=new THREE.Matrix4();this.traverse(function(child){if(child.name.search("E")!==-1){child.quaternion.setFromRotationMatrix(lookAtMatrix.lookAt(eye,vec1,vec2));}else if(child.name.search("X")!==-1||child.name.search("Y")!==-1||child.name.search("Z")!==-1){child.quaternion.setFromEuler(rotation);}});};THREE.TransformGizmoTranslate=function(){THREE.TransformGizmo.call(this);var arrowGeometry=new THREE.Geometry();var mesh=new THREE.Mesh(new THREE.CylinderGeometry(0,0.05,0.2,12,1,false));mesh.position.y=0.5;mesh.updateMatrix();arrowGeometry.merge(mesh.geometry,mesh.matrix);var lineXGeometry=new THREE.BufferGeometry();lineXGeometry.addAttribute('position',new THREE.Float32BufferAttribute([0,0,0,1,0,0],3));var lineYGeometry=new THREE.BufferGeometry();lineYGeometry.addAttribute('position',new THREE.Float32BufferAttribute([0,0,0,0,1,0],3));var lineZGeometry=new THREE.BufferGeometry();lineZGeometry.addAttribute('position',new THREE.Float32BufferAttribute([0,0,0,0,0,1],3));this.handleGizmos={X:[[new THREE.Mesh(arrowGeometry,new GizmoMaterial({color:0xff0000})),[0.5,0,0],[0,0,-Math.PI/2]],[new THREE.Line(lineXGeometry,new GizmoLineMaterial({color:0xff0000}))]],Y:[[new THREE.Mesh(arrowGeometry,new GizmoMaterial({color:0x00ff00})),[0,0.5,0]],[new THREE.Line(lineYGeometry,new GizmoLineMaterial({color:0x00ff00}))]],Z:[[new THREE.Mesh(arrowGeometry,new GizmoMaterial({color:0x0000ff})),[0,0,0.5],[Math.PI/2,0,0]],[new THREE.Line(lineZGeometry,new GizmoLineMaterial({color:0x0000ff}))]],XYZ:[[new THREE.Mesh(new THREE.OctahedronGeometry(0.1,0),new GizmoMaterial({color:0xffffff,opacity:0.25})),[0,0,0],[0,0,0]]],XY:[[new THREE.Mesh(new THREE.PlaneBufferGeometry(0.29,0.29),new GizmoMaterial({color:0xffff00,opacity:0.25})),[0.15,0.15,0]]],YZ:[[new THREE.Mesh(new THREE.PlaneBufferGeometry(0.29,0.29),new GizmoMaterial({color:0x00ffff,opacity:0.25})),[0,0.15,0.15],[0,Math.PI/2,0]]],XZ:[[new THREE.Mesh(new THREE.PlaneBufferGeometry(0.29,0.29),new GizmoMaterial({color:0xff00ff,opacity:0.25})),[0.15,0,0.15],[-Math.PI/2,0,0]]]};this.pickerGizmos={X:[[new THREE.Mesh(new THREE.CylinderBufferGeometry(0.2,0,1,4,1,false),pickerMaterial),[0.6,0,0],[0,0,-Math.PI/2]]],Y:[[new THREE.Mesh(new THREE.CylinderBufferGeometry(0.2,0,1,4,1,false),pickerMaterial),[0,0.6,0]]],Z:[[new THREE.Mesh(new THREE.CylinderBufferGeometry(0.2,0,1,4,1,false),pickerMaterial),[0,0,0.6],[Math.PI/2,0,0]]],XYZ:[[new THREE.Mesh(new THREE.OctahedronGeometry(0.2,0),pickerMaterial)]],XY:[[new THREE.Mesh(new THREE.PlaneBufferGeometry(0.4,0.4),pickerMaterial),[0.2,0.2,0]]],YZ:[[new THREE.Mesh(new THREE.PlaneBufferGeometry(0.4,0.4),pickerMaterial),[0,0.2,0.2],[0,Math.PI/2,0]]],XZ:[[new THREE.Mesh(new THREE.PlaneBufferGeometry(0.4,0.4),pickerMaterial),[0.2,0,0.2],[-Math.PI/2,0,0]]]};this.setActivePlane=function(axis,eye){var tempMatrix=new THREE.Matrix4();eye.applyMatrix4(tempMatrix.getInverse(tempMatrix.extractRotation(this.planes["XY"].matrixWorld)));if(axis==="X"){this.activePlane=this.planes["XY"];if(Math.abs(eye.y)>Math.abs(eye.z))this.activePlane=this.planes["XZ"];}
if(axis==="Y"){this.activePlane=this.planes["XY"];if(Math.abs(eye.x)>Math.abs(eye.z))this.activePlane=this.planes["YZ"];}
if(axis==="Z"){this.activePlane=this.planes["XZ"];if(Math.abs(eye.x)>Math.abs(eye.y))this.activePlane=this.planes["YZ"];}
if(axis==="XYZ")this.activePlane=this.planes["XYZE"];if(axis==="XY")this.activePlane=this.planes["XY"];if(axis==="YZ")this.activePlane=this.planes["YZ"];if(axis==="XZ")this.activePlane=this.planes["XZ"];};this.init();};THREE.TransformGizmoTranslate.prototype=Object.create(THREE.TransformGizmo.prototype);THREE.TransformGizmoTranslate.prototype.constructor=THREE.TransformGizmoTranslate;THREE.TransformGizmoRotate=function(){THREE.TransformGizmo.call(this);var CircleGeometry=function(radius,facing,arc){var geometry=new THREE.BufferGeometry();var vertices=[];arc=arc?arc:1;for(var i=0;i<=64*arc;++i){if(facing==='x')vertices.push(0,Math.cos(i/32*Math.PI)*radius,Math.sin(i/32*Math.PI)*radius);if(facing==='y')vertices.push(Math.cos(i/32*Math.PI)*radius,0,Math.sin(i/32*Math.PI)*radius);if(facing==='z')vertices.push(Math.sin(i/32*Math.PI)*radius,Math.cos(i/32*Math.PI)*radius,0);}
geometry.addAttribute('position',new THREE.Float32BufferAttribute(vertices,3));return geometry;};this.handleGizmos={X:[[new THREE.Line(new CircleGeometry(1,'x',0.5),new GizmoLineMaterial({color:0xff0000}))]],Y:[[new THREE.Line(new CircleGeometry(1,'y',0.5),new GizmoLineMaterial({color:0x00ff00}))]],Z:[[new THREE.Line(new CircleGeometry(1,'z',0.5),new GizmoLineMaterial({color:0x0000ff}))]],E:[[new THREE.Line(new CircleGeometry(1.25,'z',1),new GizmoLineMaterial({color:0xcccc00}))]],XYZE:[[new THREE.Line(new CircleGeometry(1,'z',1),new GizmoLineMaterial({color:0x787878}))]]};this.pickerGizmos={X:[[new THREE.Mesh(new THREE.TorusBufferGeometry(1,0.12,4,12,Math.PI),pickerMaterial),[0,0,0],[0,-Math.PI/2,-Math.PI/2]]],Y:[[new THREE.Mesh(new THREE.TorusBufferGeometry(1,0.12,4,12,Math.PI),pickerMaterial),[0,0,0],[Math.PI/2,0,0]]],Z:[[new THREE.Mesh(new THREE.TorusBufferGeometry(1,0.12,4,12,Math.PI),pickerMaterial),[0,0,0],[0,0,-Math.PI/2]]],E:[[new THREE.Mesh(new THREE.TorusBufferGeometry(1.25,0.12,2,24),pickerMaterial)]],XYZE:[[new THREE.Mesh()]]};this.setActivePlane=function(axis){if(axis==="E")this.activePlane=this.planes["XYZE"];if(axis==="X")this.activePlane=this.planes["YZ"];if(axis==="Y")this.activePlane=this.planes["XZ"];if(axis==="Z")this.activePlane=this.planes["XY"];};this.update=function(rotation,eye2){THREE.TransformGizmo.prototype.update.apply(this,arguments);var tempMatrix=new THREE.Matrix4();var worldRotation=new THREE.Euler(0,0,1);var tempQuaternion=new THREE.Quaternion();var unitX=new THREE.Vector3(1,0,0);var unitY=new THREE.Vector3(0,1,0);var unitZ=new THREE.Vector3(0,0,1);var quaternionX=new THREE.Quaternion();var quaternionY=new THREE.Quaternion();var quaternionZ=new THREE.Quaternion();var eye=eye2.clone();worldRotation.copy(this.planes["XY"].rotation);tempQuaternion.setFromEuler(worldRotation);tempMatrix.makeRotationFromQuaternion(tempQuaternion).getInverse(tempMatrix);eye.applyMatrix4(tempMatrix);this.traverse(function(child){tempQuaternion.setFromEuler(worldRotation);if(child.name==="X"){quaternionX.setFromAxisAngle(unitX,Math.atan2(-eye.y,eye.z));tempQuaternion.multiplyQuaternions(tempQuaternion,quaternionX);child.quaternion.copy(tempQuaternion);}
if(child.name==="Y"){quaternionY.setFromAxisAngle(unitY,Math.atan2(eye.x,eye.z));tempQuaternion.multiplyQuaternions(tempQuaternion,quaternionY);child.quaternion.copy(tempQuaternion);}
if(child.name==="Z"){quaternionZ.setFromAxisAngle(unitZ,Math.atan2(eye.y,eye.x));tempQuaternion.multiplyQuaternions(tempQuaternion,quaternionZ);child.quaternion.copy(tempQuaternion);}});};this.init();};THREE.TransformGizmoRotate.prototype=Object.create(THREE.TransformGizmo.prototype);THREE.TransformGizmoRotate.prototype.constructor=THREE.TransformGizmoRotate;THREE.TransformGizmoScale=function(){THREE.TransformGizmo.call(this);var arrowGeometry=new THREE.Geometry();var mesh=new THREE.Mesh(new THREE.BoxGeometry(0.125,0.125,0.125));mesh.position.y=0.5;mesh.updateMatrix();arrowGeometry.merge(mesh.geometry,mesh.matrix);var lineXGeometry=new THREE.BufferGeometry();lineXGeometry.addAttribute('position',new THREE.Float32BufferAttribute([0,0,0,1,0,0],3));var lineYGeometry=new THREE.BufferGeometry();lineYGeometry.addAttribute('position',new THREE.Float32BufferAttribute([0,0,0,0,1,0],3));var lineZGeometry=new THREE.BufferGeometry();lineZGeometry.addAttribute('position',new THREE.Float32BufferAttribute([0,0,0,0,0,1],3));this.handleGizmos={X:[[new THREE.Mesh(arrowGeometry,new GizmoMaterial({color:0xff0000})),[0.5,0,0],[0,0,-Math.PI/2]],[new THREE.Line(lineXGeometry,new GizmoLineMaterial({color:0xff0000}))]],Y:[[new THREE.Mesh(arrowGeometry,new GizmoMaterial({color:0x00ff00})),[0,0.5,0]],[new THREE.Line(lineYGeometry,new GizmoLineMaterial({color:0x00ff00}))]],Z:[[new THREE.Mesh(arrowGeometry,new GizmoMaterial({color:0x0000ff})),[0,0,0.5],[Math.PI/2,0,0]],[new THREE.Line(lineZGeometry,new GizmoLineMaterial({color:0x0000ff}))]],XYZ:[[new THREE.Mesh(new THREE.BoxBufferGeometry(0.125,0.125,0.125),new GizmoMaterial({color:0xffffff,opacity:0.25}))]]};this.pickerGizmos={X:[[new THREE.Mesh(new THREE.CylinderBufferGeometry(0.2,0,1,4,1,false),pickerMaterial),[0.6,0,0],[0,0,-Math.PI/2]]],Y:[[new THREE.Mesh(new THREE.CylinderBufferGeometry(0.2,0,1,4,1,false),pickerMaterial),[0,0.6,0]]],Z:[[new THREE.Mesh(new THREE.CylinderBufferGeometry(0.2,0,1,4,1,false),pickerMaterial),[0,0,0.6],[Math.PI/2,0,0]]],XYZ:[[new THREE.Mesh(new THREE.BoxBufferGeometry(0.4,0.4,0.4),pickerMaterial)]]};this.setActivePlane=function(axis,eye){var tempMatrix=new THREE.Matrix4();eye.applyMatrix4(tempMatrix.getInverse(tempMatrix.extractRotation(this.planes["XY"].matrixWorld)));if(axis==="X"){this.activePlane=this.planes["XY"];if(Math.abs(eye.y)>Math.abs(eye.z))this.activePlane=this.planes["XZ"];}
if(axis==="Y"){this.activePlane=this.planes["XY"];if(Math.abs(eye.x)>Math.abs(eye.z))this.activePlane=this.planes["YZ"];}
if(axis==="Z"){this.activePlane=this.planes["XZ"];if(Math.abs(eye.x)>Math.abs(eye.y))this.activePlane=this.planes["YZ"];}
if(axis==="XYZ")this.activePlane=this.planes["XYZE"];};this.init();};THREE.TransformGizmoScale.prototype=Object.create(THREE.TransformGizmo.prototype);THREE.TransformGizmoScale.prototype.constructor=THREE.TransformGizmoScale;THREE.TransformControls=function(camera,domElement){THREE.Object3D.call(this);domElement=(domElement!==undefined)?domElement:document;this.object=undefined;this.visible=false;this.translationSnap=null;this.rotationSnap=null;this.space="world";this.size=1;this.axis=null;var scope=this;var _mode="translate";var _dragging=false;var _gizmo={"translate":new THREE.TransformGizmoTranslate(),"rotate":new THREE.TransformGizmoRotate(),"scale":new THREE.TransformGizmoScale()};for(var type in _gizmo){var gizmoObj=_gizmo[type];gizmoObj.visible=(type===_mode);this.add(gizmoObj);}
var changeEvent={type:"change"};var mouseDownEvent={type:"mouseDown"};var mouseUpEvent={type:"mouseUp",mode:_mode};var objectChangeEvent={type:"objectChange"};var ray=new THREE.Raycaster();var pointerVector=new THREE.Vector2();var point=new THREE.Vector3();var offset=new THREE.Vector3();var rotation=new THREE.Vector3();var offsetRotation=new THREE.Vector3();var scale=1;var lookAtMatrix=new THREE.Matrix4();var eye=new THREE.Vector3();var tempMatrix=new THREE.Matrix4();var tempVector=new THREE.Vector3();var tempQuaternion=new THREE.Quaternion();var unitX=new THREE.Vector3(1,0,0);var unitY=new THREE.Vector3(0,1,0);var unitZ=new THREE.Vector3(0,0,1);var quaternionXYZ=new THREE.Quaternion();var quaternionX=new THREE.Quaternion();var quaternionY=new THREE.Quaternion();var quaternionZ=new THREE.Quaternion();var quaternionE=new THREE.Quaternion();var oldPosition=new THREE.Vector3();var oldScale=new THREE.Vector3();var oldRotationMatrix=new THREE.Matrix4();var parentRotationMatrix=new THREE.Matrix4();var parentScale=new THREE.Vector3();var worldPosition=new THREE.Vector3();var worldRotation=new THREE.Euler();var worldRotationMatrix=new THREE.Matrix4();var camPosition=new THREE.Vector3();var camRotation=new THREE.Euler();domElement.addEventListener("mousedown",onPointerDown,false);domElement.addEventListener("touchstart",onPointerDown,false);domElement.addEventListener("mousemove",onPointerHover,false);domElement.addEventListener("touchmove",onPointerHover,false);domElement.addEventListener("mousemove",onPointerMove,false);domElement.addEventListener("touchmove",onPointerMove,false);domElement.addEventListener("mouseup",onPointerUp,false);domElement.addEventListener("mouseout",onPointerUp,false);domElement.addEventListener("touchend",onPointerUp,false);domElement.addEventListener("touchcancel",onPointerUp,false);domElement.addEventListener("touchleave",onPointerUp,false);this.dispose=function(){domElement.removeEventListener("mousedown",onPointerDown);domElement.removeEventListener("touchstart",onPointerDown);domElement.removeEventListener("mousemove",onPointerHover);domElement.removeEventListener("touchmove",onPointerHover);domElement.removeEventListener("mousemove",onPointerMove);domElement.removeEventListener("touchmove",onPointerMove);domElement.removeEventListener("mouseup",onPointerUp);domElement.removeEventListener("mouseout",onPointerUp);domElement.removeEventListener("touchend",onPointerUp);domElement.removeEventListener("touchcancel",onPointerUp);domElement.removeEventListener("touchleave",onPointerUp);};this.attach=function(object){this.object=object;this.visible=true;this.update();};this.detach=function(){this.object=undefined;this.visible=false;this.axis=null;};this.getMode=function(){return _mode;};this.setMode=function(mode){_mode=mode?mode:_mode;if(_mode==="scale")scope.space="local";for(var type in _gizmo)_gizmo[type].visible=(type===_mode);this.update();scope.dispatchEvent(changeEvent);};this.setTranslationSnap=function(translationSnap){scope.translationSnap=translationSnap;};this.setRotationSnap=function(rotationSnap){scope.rotationSnap=rotationSnap;};this.setSize=function(size){scope.size=size;this.update();scope.dispatchEvent(changeEvent);};this.setSpace=function(space){scope.space=space;this.update();scope.dispatchEvent(changeEvent);};this.update=function(){if(scope.object===undefined)return;scope.object.updateMatrixWorld();worldPosition.setFromMatrixPosition(scope.object.matrixWorld);worldRotation.setFromRotationMatrix(tempMatrix.extractRotation(scope.object.matrixWorld));camera.updateMatrixWorld();camPosition.setFromMatrixPosition(camera.matrixWorld);camRotation.setFromRotationMatrix(tempMatrix.extractRotation(camera.matrixWorld));scale=worldPosition.distanceTo(camPosition)/6*scope.size;this.position.copy(worldPosition);this.scale.set(scale,scale,scale);if(camera instanceof THREE.PerspectiveCamera){eye.copy(camPosition).sub(worldPosition).normalize();}else if(camera instanceof THREE.OrthographicCamera){eye.copy(camPosition).normalize();}
if(scope.space==="local"){_gizmo[_mode].update(worldRotation,eye);}else if(scope.space==="world"){_gizmo[_mode].update(new THREE.Euler(),eye);}
_gizmo[_mode].highlight(scope.axis);};function onPointerHover(event){if(scope.object===undefined||_dragging===true||(event.button!==undefined&&event.button!==0))return;var pointer=event.changedTouches?event.changedTouches[0]:event;var intersect=intersectObjects(pointer,_gizmo[_mode].pickers.children);var axis=null;if(intersect){axis=intersect.object.name;event.preventDefault();}
if(scope.axis!==axis){scope.axis=axis;scope.update();scope.dispatchEvent(changeEvent);}}
function onPointerDown(event){if(scope.object===undefined||_dragging===true||(event.button!==undefined&&event.button!==0))return;var pointer=event.changedTouches?event.changedTouches[0]:event;if(pointer.button===0||pointer.button===undefined){var intersect=intersectObjects(pointer,_gizmo[_mode].pickers.children);if(intersect){event.preventDefault();event.stopPropagation();scope.dispatchEvent(mouseDownEvent);scope.axis=intersect.object.name;scope.update();eye.copy(camPosition).sub(worldPosition).normalize();_gizmo[_mode].setActivePlane(scope.axis,eye);var planeIntersect=intersectObjects(pointer,[_gizmo[_mode].activePlane]);if(planeIntersect){oldPosition.copy(scope.object.position);oldScale.copy(scope.object.scale);oldRotationMatrix.extractRotation(scope.object.matrix);worldRotationMatrix.extractRotation(scope.object.matrixWorld);parentRotationMatrix.extractRotation(scope.object.parent.matrixWorld);parentScale.setFromMatrixScale(tempMatrix.getInverse(scope.object.parent.matrixWorld));offset.copy(planeIntersect.point);}}}
_dragging=true;}
function onPointerMove(event){if(scope.object===undefined||scope.axis===null||_dragging===false||(event.button!==undefined&&event.button!==0))return;var pointer=event.changedTouches?event.changedTouches[0]:event;var planeIntersect=intersectObjects(pointer,[_gizmo[_mode].activePlane]);if(planeIntersect===false)return;event.preventDefault();event.stopPropagation();point.copy(planeIntersect.point);if(_mode==="translate"){point.sub(offset);point.multiply(parentScale);if(scope.space==="local"){point.applyMatrix4(tempMatrix.getInverse(worldRotationMatrix));if(scope.axis.search("X")===-1)point.x=0;if(scope.axis.search("Y")===-1)point.y=0;if(scope.axis.search("Z")===-1)point.z=0;point.applyMatrix4(oldRotationMatrix);scope.object.position.copy(oldPosition);scope.object.position.add(point);}
if(scope.space==="world"||scope.axis.search("XYZ")!==-1){if(scope.axis.search("X")===-1)point.x=0;if(scope.axis.search("Y")===-1)point.y=0;if(scope.axis.search("Z")===-1)point.z=0;point.applyMatrix4(tempMatrix.getInverse(parentRotationMatrix));scope.object.position.copy(oldPosition);scope.object.position.add(point);}
if(scope.translationSnap!==null){if(scope.space==="local"){scope.object.position.applyMatrix4(tempMatrix.getInverse(worldRotationMatrix));}
if(scope.axis.search("X")!==-1)scope.object.position.x=Math.round(scope.object.position.x/scope.translationSnap)*scope.translationSnap;if(scope.axis.search("Y")!==-1)scope.object.position.y=Math.round(scope.object.position.y/scope.translationSnap)*scope.translationSnap;if(scope.axis.search("Z")!==-1)scope.object.position.z=Math.round(scope.object.position.z/scope.translationSnap)*scope.translationSnap;if(scope.space==="local"){scope.object.position.applyMatrix4(worldRotationMatrix);}}}else if(_mode==="scale"){point.sub(offset);point.multiply(parentScale);if(scope.space==="local"){if(scope.axis==="XYZ"){scale=1+((point.y)/Math.max(oldScale.x,oldScale.y,oldScale.z));scope.object.scale.x=oldScale.x*scale;scope.object.scale.y=oldScale.y*scale;scope.object.scale.z=oldScale.z*scale;}else{point.applyMatrix4(tempMatrix.getInverse(worldRotationMatrix));if(scope.axis==="X")scope.object.scale.x=oldScale.x*(1+point.x/oldScale.x);if(scope.axis==="Y")scope.object.scale.y=oldScale.y*(1+point.y/oldScale.y);if(scope.axis==="Z")scope.object.scale.z=oldScale.z*(1+point.z/oldScale.z);}}}else if(_mode==="rotate"){point.sub(worldPosition);point.multiply(parentScale);tempVector.copy(offset).sub(worldPosition);tempVector.multiply(parentScale);if(scope.axis==="E"){point.applyMatrix4(tempMatrix.getInverse(lookAtMatrix));tempVector.applyMatrix4(tempMatrix.getInverse(lookAtMatrix));rotation.set(Math.atan2(point.z,point.y),Math.atan2(point.x,point.z),Math.atan2(point.y,point.x));offsetRotation.set(Math.atan2(tempVector.z,tempVector.y),Math.atan2(tempVector.x,tempVector.z),Math.atan2(tempVector.y,tempVector.x));tempQuaternion.setFromRotationMatrix(tempMatrix.getInverse(parentRotationMatrix));quaternionE.setFromAxisAngle(eye,rotation.z-offsetRotation.z);quaternionXYZ.setFromRotationMatrix(worldRotationMatrix);tempQuaternion.multiplyQuaternions(tempQuaternion,quaternionE);tempQuaternion.multiplyQuaternions(tempQuaternion,quaternionXYZ);scope.object.quaternion.copy(tempQuaternion);}else if(scope.axis==="XYZE"){quaternionE.setFromEuler(point.clone().cross(tempVector).normalize());tempQuaternion.setFromRotationMatrix(tempMatrix.getInverse(parentRotationMatrix));quaternionX.setFromAxisAngle(quaternionE,-point.clone().angleTo(tempVector));quaternionXYZ.setFromRotationMatrix(worldRotationMatrix);tempQuaternion.multiplyQuaternions(tempQuaternion,quaternionX);tempQuaternion.multiplyQuaternions(tempQuaternion,quaternionXYZ);scope.object.quaternion.copy(tempQuaternion);}else if(scope.space==="local"){point.applyMatrix4(tempMatrix.getInverse(worldRotationMatrix));tempVector.applyMatrix4(tempMatrix.getInverse(worldRotationMatrix));rotation.set(Math.atan2(point.z,point.y),Math.atan2(point.x,point.z),Math.atan2(point.y,point.x));offsetRotation.set(Math.atan2(tempVector.z,tempVector.y),Math.atan2(tempVector.x,tempVector.z),Math.atan2(tempVector.y,tempVector.x));quaternionXYZ.setFromRotationMatrix(oldRotationMatrix);if(scope.rotationSnap!==null){quaternionX.setFromAxisAngle(unitX,Math.round((rotation.x-offsetRotation.x)/scope.rotationSnap)*scope.rotationSnap);quaternionY.setFromAxisAngle(unitY,Math.round((rotation.y-offsetRotation.y)/scope.rotationSnap)*scope.rotationSnap);quaternionZ.setFromAxisAngle(unitZ,Math.round((rotation.z-offsetRotation.z)/scope.rotationSnap)*scope.rotationSnap);}else{quaternionX.setFromAxisAngle(unitX,rotation.x-offsetRotation.x);quaternionY.setFromAxisAngle(unitY,rotation.y-offsetRotation.y);quaternionZ.setFromAxisAngle(unitZ,rotation.z-offsetRotation.z);}
if(scope.axis==="X")quaternionXYZ.multiplyQuaternions(quaternionXYZ,quaternionX);if(scope.axis==="Y")quaternionXYZ.multiplyQuaternions(quaternionXYZ,quaternionY);if(scope.axis==="Z")quaternionXYZ.multiplyQuaternions(quaternionXYZ,quaternionZ);scope.object.quaternion.copy(quaternionXYZ);}else if(scope.space==="world"){rotation.set(Math.atan2(point.z,point.y),Math.atan2(point.x,point.z),Math.atan2(point.y,point.x));offsetRotation.set(Math.atan2(tempVector.z,tempVector.y),Math.atan2(tempVector.x,tempVector.z),Math.atan2(tempVector.y,tempVector.x));tempQuaternion.setFromRotationMatrix(tempMatrix.getInverse(parentRotationMatrix));if(scope.rotationSnap!==null){quaternionX.setFromAxisAngle(unitX,Math.round((rotation.x-offsetRotation.x)/scope.rotationSnap)*scope.rotationSnap);quaternionY.setFromAxisAngle(unitY,Math.round((rotation.y-offsetRotation.y)/scope.rotationSnap)*scope.rotationSnap);quaternionZ.setFromAxisAngle(unitZ,Math.round((rotation.z-offsetRotation.z)/scope.rotationSnap)*scope.rotationSnap);}else{quaternionX.setFromAxisAngle(unitX,rotation.x-offsetRotation.x);quaternionY.setFromAxisAngle(unitY,rotation.y-offsetRotation.y);quaternionZ.setFromAxisAngle(unitZ,rotation.z-offsetRotation.z);}
quaternionXYZ.setFromRotationMatrix(worldRotationMatrix);if(scope.axis==="X")tempQuaternion.multiplyQuaternions(tempQuaternion,quaternionX);if(scope.axis==="Y")tempQuaternion.multiplyQuaternions(tempQuaternion,quaternionY);if(scope.axis==="Z")tempQuaternion.multiplyQuaternions(tempQuaternion,quaternionZ);tempQuaternion.multiplyQuaternions(tempQuaternion,quaternionXYZ);scope.object.quaternion.copy(tempQuaternion);}}
scope.update();scope.dispatchEvent(changeEvent);scope.dispatchEvent(objectChangeEvent);}
function onPointerUp(event){event.preventDefault();if(event.button!==undefined&&event.button!==0)return;if(_dragging&&(scope.axis!==null)){mouseUpEvent.mode=_mode;scope.dispatchEvent(mouseUpEvent);}
_dragging=false;if('TouchEvent'in window&&event instanceof TouchEvent){scope.axis=null;scope.update();scope.dispatchEvent(changeEvent);}else{onPointerHover(event);}}
function intersectObjects(pointer,objects){var rect=domElement.getBoundingClientRect();var x=(pointer.clientX-rect.left)/rect.width;var y=(pointer.clientY-rect.top)/rect.height;pointerVector.set((x*2)-1,-(y*2)+1);ray.setFromCamera(pointerVector,camera);var intersections=ray.intersectObjects(objects,true);return intersections[0]?intersections[0]:false;}};THREE.TransformControls.prototype=Object.create(THREE.Object3D.prototype);THREE.TransformControls.prototype.constructor=THREE.TransformControls;}());THREE.AMFLoader=function(manager){this.manager=(manager!==undefined)?manager:THREE.DefaultLoadingManager;};THREE.AMFLoader.prototype={constructor:THREE.AMFLoader,load:function(url,onLoad,onProgress,onError){var scope=this;var loader=new THREE.FileLoader(scope.manager);loader.setResponseType('arraybuffer');loader.load(url,function(text){onLoad(scope.parse(text));},onProgress,onError);},parse:function(data){function loadDocument(data){var view=new DataView(data);var magic=String.fromCharCode(view.getUint8(0),view.getUint8(1));if(magic==='PK'){var zip=null;var file=null;console.log('THREE.AMFLoader: Loading Zip');try{zip=new JSZip(data);}catch(e){if(e instanceof ReferenceError){console.log('THREE.AMFLoader: jszip missing and file is compressed.');return null;}}
for(file in zip.files){if(file.toLowerCase().substr(-4)==='.amf'){break;}}
console.log('THREE.AMFLoader: Trying to load file asset: '+file);view=new DataView(zip.file(file).asArrayBuffer());}
if(window.TextDecoder===undefined){console.log('THREE.AMFLoader: TextDecoder not present. Please use TextDecoder polyfill.');return null;}
var fileText=new TextDecoder('utf-8').decode(view);var xmlData=new DOMParser().parseFromString(fileText,'application/xml');if(xmlData.documentElement.nodeName.toLowerCase()!=='amf'){console.log('THREE.AMFLoader: Error loading AMF - no AMF document found.');return null;}
return xmlData;}
function loadDocumentScale(node){var scale=1.0;var unit='millimeter';if(node.documentElement.attributes.unit!==undefined){unit=node.documentElement.attributes.unit.value.toLowerCase();}
var scaleUnits={millimeter:1.0,inch:25.4,feet:304.8,meter:1000.0,micron:0.001};if(scaleUnits[unit]!==undefined){scale=scaleUnits[unit];}
console.log('THREE.AMFLoader: Unit scale: '+scale);return scale;}
function loadMaterials(node){var matName='AMF Material';var matId=node.attributes.id.textContent;var color={r:1.0,g:1.0,b:1.0,a:1.0};var loadedMaterial=null;for(var i=0;i<node.childNodes.length;i++){var matChildEl=node.childNodes[i];if(matChildEl.nodeName==='metadata'&&matChildEl.attributes.type!==undefined){if(matChildEl.attributes.type.value==='name'){matName=matChildEl.textContent;}}else if(matChildEl.nodeName==='color'){color=loadColor(matChildEl);}}
loadedMaterial=new THREE.MeshPhongMaterial({flatShading:true,color:new THREE.Color(color.r,color.g,color.b),name:matName});if(color.a!==1.0){loadedMaterial.transparent=true;loadedMaterial.opacity=color.a;}
return{id:matId,material:loadedMaterial};}
function loadColor(node){var color={r:1.0,g:1.0,b:1.0,a:1.0};for(var i=0;i<node.childNodes.length;i++){var matColor=node.childNodes[i];if(matColor.nodeName==='r'){color.r=matColor.textContent;}else if(matColor.nodeName==='g'){color.g=matColor.textContent;}else if(matColor.nodeName==='b'){color.b=matColor.textContent;}else if(matColor.nodeName==='a'){color.a=matColor.textContent;}}
return color;}
function loadMeshVolume(node){var volume={name:'',triangles:[],materialid:null};var currVolumeNode=node.firstElementChild;if(node.attributes.materialid!==undefined){volume.materialId=node.attributes.materialid.nodeValue;}
while(currVolumeNode){if(currVolumeNode.nodeName==='metadata'){if(currVolumeNode.attributes.type!==undefined){if(currVolumeNode.attributes.type.value==='name'){volume.name=currVolumeNode.textContent;}}}else if(currVolumeNode.nodeName==='triangle'){var v1=currVolumeNode.getElementsByTagName('v1')[0].textContent;var v2=currVolumeNode.getElementsByTagName('v2')[0].textContent;var v3=currVolumeNode.getElementsByTagName('v3')[0].textContent;volume.triangles.push(v1,v2,v3);}
currVolumeNode=currVolumeNode.nextElementSibling;}
return volume;}
function loadMeshVertices(node){var vertArray=[];var normalArray=[];var currVerticesNode=node.firstElementChild;while(currVerticesNode){if(currVerticesNode.nodeName==='vertex'){var vNode=currVerticesNode.firstElementChild;while(vNode){if(vNode.nodeName==='coordinates'){var x=vNode.getElementsByTagName('x')[0].textContent;var y=vNode.getElementsByTagName('y')[0].textContent;var z=vNode.getElementsByTagName('z')[0].textContent;vertArray.push(x,y,z);}else if(vNode.nodeName==='normal'){var nx=vNode.getElementsByTagName('nx')[0].textContent;var ny=vNode.getElementsByTagName('ny')[0].textContent;var nz=vNode.getElementsByTagName('nz')[0].textContent;normalArray.push(nx,ny,nz);}
vNode=vNode.nextElementSibling;}}
currVerticesNode=currVerticesNode.nextElementSibling;}
return{'vertices':vertArray,'normals':normalArray};}
function loadObject(node){var objId=node.attributes.id.textContent;var loadedObject={name:'amfobject',meshes:[]};var currColor=null;var currObjNode=node.firstElementChild;while(currObjNode){if(currObjNode.nodeName==='metadata'){if(currObjNode.attributes.type!==undefined){if(currObjNode.attributes.type.value==='name'){loadedObject.name=currObjNode.textContent;}}}else if(currObjNode.nodeName==='color'){currColor=loadColor(currObjNode);}else if(currObjNode.nodeName==='mesh'){var currMeshNode=currObjNode.firstElementChild;var mesh={vertices:[],normals:[],volumes:[],color:currColor};while(currMeshNode){if(currMeshNode.nodeName==='vertices'){var loadedVertices=loadMeshVertices(currMeshNode);mesh.normals=mesh.normals.concat(loadedVertices.normals);mesh.vertices=mesh.vertices.concat(loadedVertices.vertices);}else if(currMeshNode.nodeName==='volume'){mesh.volumes.push(loadMeshVolume(currMeshNode));}
currMeshNode=currMeshNode.nextElementSibling;}
loadedObject.meshes.push(mesh);}
currObjNode=currObjNode.nextElementSibling;}
return{'id':objId,'obj':loadedObject};}
var xmlData=loadDocument(data);var amfName='';var amfAuthor='';var amfScale=loadDocumentScale(xmlData);var amfMaterials={};var amfObjects={};var childNodes=xmlData.documentElement.childNodes;var i,j;for(i=0;i<childNodes.length;i++){var child=childNodes[i];if(child.nodeName==='metadata'){if(child.attributes.type!==undefined){if(child.attributes.type.value==='name'){amfName=child.textContent;}else if(child.attributes.type.value==='author'){amfAuthor=child.textContent;}}}else if(child.nodeName==='material'){var loadedMaterial=loadMaterials(child);amfMaterials[loadedMaterial.id]=loadedMaterial.material;}else if(child.nodeName==='object'){var loadedObject=loadObject(child);amfObjects[loadedObject.id]=loadedObject.obj;}}
var sceneObject=new THREE.Group();var defaultMaterial=new THREE.MeshPhongMaterial({color:0xaaaaff,flatShading:true});sceneObject.name=amfName;sceneObject.userData.author=amfAuthor;sceneObject.userData.loader='AMF';for(var id in amfObjects){var part=amfObjects[id];var meshes=part.meshes;var newObject=new THREE.Group();newObject.name=part.name||'';for(i=0;i<meshes.length;i++){var objDefaultMaterial=defaultMaterial;var mesh=meshes[i];var vertices=new THREE.Float32BufferAttribute(mesh.vertices,3);var normals=null;if(mesh.normals.length){normals=new THREE.Float32BufferAttribute(mesh.normals,3);}
if(mesh.color){var color=mesh.color;objDefaultMaterial=defaultMaterial.clone();objDefaultMaterial.color=new THREE.Color(color.r,color.g,color.b);if(color.a!==1.0){objDefaultMaterial.transparent=true;objDefaultMaterial.opacity=color.a;}}
var volumes=mesh.volumes;for(j=0;j<volumes.length;j++){var volume=volumes[j];var newGeometry=new THREE.BufferGeometry();var material=objDefaultMaterial;newGeometry.setIndex(volume.triangles);newGeometry.addAttribute('position',vertices.clone());if(normals){newGeometry.addAttribute('normal',normals.clone());}
if(amfMaterials[volume.materialId]!==undefined){material=amfMaterials[volume.materialId];}
newGeometry.scale(amfScale,amfScale,amfScale);newObject.add(new THREE.Mesh(newGeometry,material.clone()));}}
sceneObject.add(newObject);}
return sceneObject;}};(function(){var UNCOMPRESSED=0,DEFLATE=1,LZMA=2,AWD_FIELD_INT8=1,AWD_FIELD_INT16=2,AWD_FIELD_INT32=3,AWD_FIELD_UINT8=4,AWD_FIELD_UINT16=5,AWD_FIELD_UINT32=6,AWD_FIELD_FLOAT32=7,AWD_FIELD_FLOAT64=8,AWD_FIELD_BOOL=21,AWD_FIELD_COLOR=22,AWD_FIELD_BADDR=23,AWD_FIELD_STRING=31,AWD_FIELD_BYTEARRAY=32,AWD_FIELD_VECTOR2x1=41,AWD_FIELD_VECTOR3x1=42,AWD_FIELD_VECTOR4x1=43,AWD_FIELD_MTX3x2=44,AWD_FIELD_MTX3x3=45,AWD_FIELD_MTX4x3=46,AWD_FIELD_MTX4x4=47,BOOL=21,COLOR=22,BADDR=23,INT8=1,INT16=2,INT32=3,UINT8=4,UINT16=5,UINT32=6,FLOAT32=7,FLOAT64=8;var littleEndian=true;function Block(){this.id=0;this.data=null;}
function AWDProperties(){}
AWDProperties.prototype={set:function(key,value){this[key]=value;},get:function(key,fallback){if(this.hasOwnProperty(key)){return this[key];}else{return fallback;}}};THREE.AWDLoader=function(manager){this.manager=(manager!==undefined)?manager:THREE.DefaultLoadingManager;this.trunk=new THREE.Object3D();this.materialFactory=undefined;this._url='';this._baseDir='';this._data=undefined;this._ptr=0;this._version=[];this._streaming=false;this._optimized_for_accuracy=false;this._compression=0;this._bodylen=0xFFFFFFFF;this._blocks=[new Block()];this._accuracyMatrix=false;this._accuracyGeo=false;this._accuracyProps=false;};THREE.AWDLoader.prototype={constructor:THREE.AWDLoader,load:function(url,onLoad,onProgress,onError){var scope=this;this._url=url;this._baseDir=url.substr(0,url.lastIndexOf('/')+1);var loader=new THREE.FileLoader(this.manager);loader.setResponseType('arraybuffer');loader.load(url,function(text){onLoad(scope.parse(text));},onProgress,onError);},parse:function(data){var blen=data.byteLength;this._ptr=0;this._data=new DataView(data);this._parseHeader();if(this._compression!=0){console.error('compressed AWD not supported');}
if(!this._streaming&&this._bodylen!=data.byteLength-this._ptr){console.error('AWDLoader: body len does not match file length',this._bodylen,blen-this._ptr);}
while(this._ptr<blen){this.parseNextBlock();}
return this.trunk;},parseNextBlock:function(){var assetData,ns,type,len,block,blockId=this.readU32(),ns=this.readU8(),type=this.readU8(),flags=this.readU8(),len=this.readU32();switch(type){case 1:assetData=this.parseMeshData(len);break;case 22:assetData=this.parseContainer(len);break;case 23:assetData=this.parseMeshInstance(len);break;case 81:assetData=this.parseMaterial(len);break;case 82:assetData=this.parseTexture(len);break;case 101:assetData=this.parseSkeleton(len);break;case 112:assetData=this.parseMeshPoseAnimation(len,false);break;case 113:assetData=this.parseVertexAnimationSet(len);break;case 102:assetData=this.parseSkeletonPose(len);break;case 103:assetData=this.parseSkeletonAnimation(len);break;case 122:assetData=this.parseAnimatorSet(len);break;default:this._ptr+=len;break;}
this._blocks[blockId]=block=new Block();block.data=assetData;block.id=blockId;},_parseHeader:function(){var version=this._version,awdmagic=(this.readU8()<<16)|(this.readU8()<<8)|this.readU8();if(awdmagic!=4282180)
throw new Error("AWDLoader - bad magic");version[0]=this.readU8();version[1]=this.readU8();var flags=this.readU16();this._streaming=(flags&0x1)==0x1;if((version[0]===2)&&(version[1]===1)){this._accuracyMatrix=(flags&0x2)===0x2;this._accuracyGeo=(flags&0x4)===0x4;this._accuracyProps=(flags&0x8)===0x8;}
this._geoNrType=this._accuracyGeo?FLOAT64:FLOAT32;this._matrixNrType=this._accuracyMatrix?FLOAT64:FLOAT32;this._propsNrType=this._accuracyProps?FLOAT64:FLOAT32;this._optimized_for_accuracy=(flags&0x2)===0x2;this._compression=this.readU8();this._bodylen=this.readU32();},parseContainer:function(len){var parent,ctr=new THREE.Object3D(),par_id=this.readU32(),mtx=this.parseMatrix4();ctr.name=this.readUTF();ctr.applyMatrix(mtx);parent=this._blocks[par_id].data||this.trunk;parent.add(ctr);this.parseProperties({1:this._matrixNrType,2:this._matrixNrType,3:this._matrixNrType,4:UINT8});ctr.extra=this.parseUserAttributes();return ctr;},parseMeshInstance:function(len){var name,mesh,geometries,meshLen,meshes,par_id,data_id,mtx,materials,mat,mat_id,num_materials,parent,i;par_id=this.readU32();mtx=this.parseMatrix4();name=this.readUTF();data_id=this.readU32();num_materials=this.readU16();geometries=this.getBlock(data_id);materials=[];for(i=0;i<num_materials;i++){mat_id=this.readU32();mat=this.getBlock(mat_id);materials.push(mat);}
meshLen=geometries.length;meshes=[];if(meshLen>1){mesh=new THREE.Object3D();for(i=0;i<meshLen;i++){var sm=new THREE.Mesh(geometries[i]);meshes.push(sm);mesh.add(sm);}}else{mesh=new THREE.Mesh(geometries[0]);meshes.push(mesh);}
mesh.applyMatrix(mtx);mesh.name=name;parent=this.getBlock(par_id)||this.trunk;parent.add(mesh);var matLen=materials.length;var maxLen=Math.max(meshLen,matLen);for(i=0;i<maxLen;i++)
meshes[i%meshLen].material=materials[i%matLen];this.parseProperties(null);mesh.extra=this.parseUserAttributes();return mesh;},parseMaterial:function(len){var name,type,props,mat,attributes,finalize,num_methods,methods_parsed;name=this.readUTF();type=this.readU8();num_methods=this.readU8();props=this.parseProperties({1:AWD_FIELD_INT32,2:AWD_FIELD_BADDR,11:AWD_FIELD_BOOL,12:AWD_FIELD_FLOAT32,13:AWD_FIELD_BOOL});methods_parsed=0;while(methods_parsed<num_methods){var method_type=this.readU16();this.parseProperties(null);this.parseUserAttributes();}
attributes=this.parseUserAttributes();if(this.materialFactory!==undefined){mat=this.materialFactory(name);if(mat)return mat;}
mat=new THREE.MeshPhongMaterial();if(type===1){mat.color.setHex(props.get(1,0xcccccc));}else if(type===2){var tex_addr=props.get(2,0);mat.map=this.getBlock(tex_addr);}
mat.extra=attributes;mat.alphaThreshold=props.get(12,0.0);mat.repeat=props.get(13,false);return mat;},parseTexture:function(len){var name=this.readUTF(),type=this.readU8(),asset,data_len;if(type===0){data_len=this.readU32();var url=this.readUTFBytes(data_len);console.log(url);asset=this.loadTexture(url);}else{}
this.parseProperties(null);this.parseUserAttributes();return asset;},loadTexture:function(url){var tex=new THREE.Texture();var loader=new THREE.ImageLoader(this.manager);loader.load(this._baseDir+url,function(image){tex.image=image;tex.needsUpdate=true;});return tex;},parseSkeleton:function(len){var name=this.readUTF(),num_joints=this.readU16(),skeleton=[],joints_parsed=0;this.parseProperties(null);while(joints_parsed<num_joints){var joint,ibp;this.readU16();joint=new THREE.Bone();joint.parent=this.readU16()-1;joint.name=this.readUTF();ibp=this.parseMatrix4();joint.skinMatrix=ibp;this.parseProperties(null);this.parseUserAttributes();skeleton.push(joint);joints_parsed++;}
this.parseUserAttributes();return skeleton;},parseSkeletonPose:function(blockID){var name=this.readUTF();var num_joints=this.readU16();this.parseProperties(null);var pose=[];var joints_parsed=0;while(joints_parsed<num_joints){var joint_pose;var has_transform;var mtx_data;has_transform=this.readU8();if(has_transform===1){mtx_data=this.parseMatrix4();}else{mtx_data=new THREE.Matrix4();}
pose[joints_parsed]=mtx_data;joints_parsed++;}
this.parseUserAttributes();return pose;},parseSkeletonAnimation:function(blockID){var frame_dur;var pose_addr;var pose;var name=this.readUTF();var clip=[];var num_frames=this.readU16();this.parseProperties(null);var frames_parsed=0;var returnedArray;while(frames_parsed<num_frames){pose_addr=this.readU32();frame_dur=this.readU16();pose=this._blocks[pose_addr].data;clip.push({pose:pose,duration:frame_dur});frames_parsed++;}
if(clip.length===0){return;}
this.parseUserAttributes();return clip;},parseVertexAnimationSet:function(len){var poseBlockAdress,name=this.readUTF(),num_frames=this.readU16(),props=this.parseProperties({1:UINT16}),frames_parsed=0,skeletonFrames=[];while(frames_parsed<num_frames){poseBlockAdress=this.readU32();skeletonFrames.push(this._blocks[poseBlockAdress].data);frames_parsed++;}
this.parseUserAttributes();return skeletonFrames;},parseAnimatorSet:function(len){var targetMesh;var animSetBlockAdress;var targetAnimationSet;var outputString="";var name=this.readUTF();var type=this.readU16();var props=this.parseProperties({1:BADDR});animSetBlockAdress=this.readU32();var targetMeshLength=this.readU16();var meshAdresses=[];for(var i=0;i<targetMeshLength;i++)
meshAdresses.push(this.readU32());var activeState=this.readU16();var autoplay=Boolean(this.readU8());this.parseUserAttributes();this.parseUserAttributes();var returnedArray;var targetMeshes=[];for(i=0;i<meshAdresses.length;i++){targetMeshes.push(this._blocks[meshAdresses[i]].data);}
targetAnimationSet=this._blocks[animSetBlockAdress].data;var thisAnimator;if(type==1){thisAnimator={animationSet:targetAnimationSet,skeleton:this._blocks[props.get(1,0)].data};}else if(type==2){}
for(i=0;i<targetMeshes.length;i++){targetMeshes[i].animator=thisAnimator;}
return thisAnimator;},parseMeshData:function(len){var name=this.readUTF(),num_subs=this.readU16(),geom,subs_parsed=0,buffer,skinW,skinI,geometries=[];this.parseProperties({1:this._geoNrType,2:this._geoNrType});while(subs_parsed<num_subs){var sm_len,sm_end,attrib;geom=new THREE.BufferGeometry();geom.name=name;geometries.push(geom);sm_len=this.readU32();sm_end=this._ptr+sm_len;this.parseProperties({1:this._geoNrType,2:this._geoNrType});while(this._ptr<sm_end){var idx=0,str_type=this.readU8(),str_ftype=this.readU8(),str_len=this.readU32(),str_end=str_len+this._ptr;if(str_type===1){buffer=new Float32Array((str_len/12)*3);attrib=new THREE.BufferAttribute(buffer,3);geom.addAttribute('position',attrib);idx=0;while(this._ptr<str_end){buffer[idx]=-this.readF32();buffer[idx+1]=this.readF32();buffer[idx+2]=this.readF32();idx+=3;}}else if(str_type===2){buffer=new Uint16Array(str_len/2);attrib=new THREE.BufferAttribute(buffer,1);geom.setIndex(attrib);idx=0;while(this._ptr<str_end){buffer[idx+1]=this.readU16();buffer[idx]=this.readU16();buffer[idx+2]=this.readU16();idx+=3;}}else if(str_type===3){buffer=new Float32Array((str_len/8)*2);attrib=new THREE.BufferAttribute(buffer,2);geom.addAttribute('uv',attrib);idx=0;while(this._ptr<str_end){buffer[idx]=this.readF32();buffer[idx+1]=1.0-this.readF32();idx+=2;}}else if(str_type===4){buffer=new Float32Array((str_len/12)*3);attrib=new THREE.BufferAttribute(buffer,3);geom.addAttribute('normal',attrib);idx=0;while(this._ptr<str_end){buffer[idx]=-this.readF32();buffer[idx+1]=this.readF32();buffer[idx+2]=this.readF32();idx+=3;}}else{this._ptr=str_end;}}
this.parseUserAttributes();geom.computeBoundingSphere();subs_parsed++;}
this.parseUserAttributes();return geometries;},parseMeshPoseAnimation:function(len,poseOnly){var num_frames=1,num_submeshes,frames_parsed,subMeshParsed,frame_dur,x,y,z,str_len,str_end,geom,subGeom,idx=0,clip={},indices,verts,num_Streams,streamsParsed,streamtypes=[],props,thisGeo,name=this.readUTF(),geoAdress=this.readU32();var mesh=this.getBlock(geoAdress);if(mesh===null){console.log("parseMeshPoseAnimation target mesh not found at:",geoAdress);return;}
geom=mesh.geometry;geom.morphTargets=[];if(!poseOnly)
num_frames=this.readU16();num_submeshes=this.readU16();num_Streams=this.readU16();streamsParsed=0;while(streamsParsed<num_Streams){streamtypes.push(this.readU16());streamsParsed++;}
props=this.parseProperties({1:BOOL,2:BOOL});clip.looping=props.get(1,true);clip.stitchFinalFrame=props.get(2,false);frames_parsed=0;while(frames_parsed<num_frames){frame_dur=this.readU16();subMeshParsed=0;while(subMeshParsed<num_submeshes){streamsParsed=0;str_len=this.readU32();str_end=this._ptr+str_len;while(streamsParsed<num_Streams){if(streamtypes[streamsParsed]===1){var buffer=new Float32Array(str_len/4);geom.morphTargets.push({array:buffer});idx=0;while(this._ptr<str_end){buffer[idx]=this.readF32();buffer[idx+1]=this.readF32();buffer[idx+2]=this.readF32();idx+=3;}
subMeshParsed++;}else
this._ptr=str_end;streamsParsed++;}}
frames_parsed++;}
this.parseUserAttributes();return null;},getBlock:function(id){return this._blocks[id].data;},parseMatrix4:function(){var mtx=new THREE.Matrix4();var e=mtx.elements;e[0]=this.readF32();e[1]=this.readF32();e[2]=this.readF32();e[3]=0.0;e[4]=this.readF32();e[5]=this.readF32();e[6]=this.readF32();e[7]=0.0;e[8]=this.readF32();e[9]=this.readF32();e[10]=this.readF32();e[11]=0.0;e[12]=-this.readF32();e[13]=this.readF32();e[14]=this.readF32();e[15]=1.0;return mtx;},parseProperties:function(expected){var list_len=this.readU32();var list_end=this._ptr+list_len;var props=new AWDProperties();if(expected){while(this._ptr<list_end){var key=this.readU16();var len=this.readU32();var type;if(expected.hasOwnProperty(key)){type=expected[key];props.set(key,this.parseAttrValue(type,len));}else{this._ptr+=len;}}}
return props;},parseUserAttributes:function(){this._ptr=this.readU32()+this._ptr;return null;},parseAttrValue:function(type,len){var elem_len;var read_func;switch(type){case AWD_FIELD_INT8:elem_len=1;read_func=this.readI8;break;case AWD_FIELD_INT16:elem_len=2;read_func=this.readI16;break;case AWD_FIELD_INT32:elem_len=4;read_func=this.readI32;break;case AWD_FIELD_BOOL:case AWD_FIELD_UINT8:elem_len=1;read_func=this.readU8;break;case AWD_FIELD_UINT16:elem_len=2;read_func=this.readU16;break;case AWD_FIELD_UINT32:case AWD_FIELD_BADDR:elem_len=4;read_func=this.readU32;break;case AWD_FIELD_FLOAT32:elem_len=4;read_func=this.readF32;break;case AWD_FIELD_FLOAT64:elem_len=8;read_func=this.readF64;break;case AWD_FIELD_VECTOR2x1:case AWD_FIELD_VECTOR3x1:case AWD_FIELD_VECTOR4x1:case AWD_FIELD_MTX3x2:case AWD_FIELD_MTX3x3:case AWD_FIELD_MTX4x3:case AWD_FIELD_MTX4x4:elem_len=8;read_func=this.readF64;break;}
if(elem_len<len){var list;var num_read;var num_elems;list=[];num_read=0;num_elems=len/elem_len;while(num_read<num_elems){list.push(read_func.call(this));num_read++;}
return list;}else{return read_func.call(this);}},readU8:function(){return this._data.getUint8(this._ptr++);},readI8:function(){return this._data.getInt8(this._ptr++);},readU16:function(){var a=this._data.getUint16(this._ptr,littleEndian);this._ptr+=2;return a;},readI16:function(){var a=this._data.getInt16(this._ptr,littleEndian);this._ptr+=2;return a;},readU32:function(){var a=this._data.getUint32(this._ptr,littleEndian);this._ptr+=4;return a;},readI32:function(){var a=this._data.getInt32(this._ptr,littleEndian);this._ptr+=4;return a;},readF32:function(){var a=this._data.getFloat32(this._ptr,littleEndian);this._ptr+=4;return a;},readF64:function(){var a=this._data.getFloat64(this._ptr,littleEndian);this._ptr+=8;return a;},readUTF:function(){var len=this.readU16();return this.readUTFBytes(len);},readUTFBytes:function(len){var out=[],c=0;while(out.length<len){var c1=this._data.getUint8(this._ptr++,littleEndian);if(c1<128){out[c++]=String.fromCharCode(c1);}else if(c1>191&&c1<224){var c2=this._data.getUint8(this._ptr++,littleEndian);out[c++]=String.fromCharCode((c1&31)<<6|c2&63);}else{var c2=this._data.getUint8(this._ptr++,littleEndian);var c3=this._data.getUint8(this._ptr++,littleEndian);out[c++]=String.fromCharCode((c1&15)<<12|(c2&63)<<6|c3&63);}}
return out.join('');}};})();THREE.BabylonLoader=function(manager){this.manager=(manager!==undefined)?manager:THREE.DefaultLoadingManager;};THREE.BabylonLoader.prototype={constructor:THREE.BabylonLoader,load:function(url,onLoad,onProgress,onError){var scope=this;var loader=new THREE.FileLoader(scope.manager);loader.load(url,function(text){onLoad(scope.parse(JSON.parse(text)));},onProgress,onError);},parse:function(json){function parseMaterials(json){var materials={};for(var i=0,l=json.materials.length;i<l;i++){var data=json.materials[i];var material=new THREE.MeshPhongMaterial();material.name=data.name;material.color.fromArray(data.diffuse);material.emissive.fromArray(data.emissive);material.specular.fromArray(data.specular);material.shininess=data.specularPower;material.opacity=data.alpha;materials[data.id]=material;}
if(json.multiMaterials){for(var i=0,l=json.multiMaterials.length;i<l;i++){var data=json.multiMaterials[i];console.warn('THREE.BabylonLoader: Multi materials not yet supported.');materials[data.id]=new THREE.MeshPhongMaterial();}}
return materials;}
function parseGeometry(json){var geometry=new THREE.BufferGeometry();var indices=json.indices;var positions=json.positions;var normals=json.normals;var uvs=json.uvs;geometry.setIndex(indices);for(var j=2,jl=positions.length;j<jl;j+=3){positions[j]=-positions[j];}
geometry.addAttribute('position',new THREE.Float32BufferAttribute(positions,3));if(normals){for(var j=2,jl=normals.length;j<jl;j+=3){normals[j]=-normals[j];}
geometry.addAttribute('normal',new THREE.Float32BufferAttribute(normals,3));}
if(uvs){geometry.addAttribute('uv',new THREE.Float32BufferAttribute(uvs,2));}
var subMeshes=json.subMeshes;if(subMeshes){for(var j=0,jl=subMeshes.length;j<jl;j++){var subMesh=subMeshes[j];geometry.addGroup(subMesh.indexStart,subMesh.indexCount);}}
return geometry;}
function parseObjects(json,materials){var objects={};var scene=new THREE.Scene();var cameras=json.cameras;for(var i=0,l=cameras.length;i<l;i++){var data=cameras[i];var camera=new THREE.PerspectiveCamera((data.fov/Math.PI)*180,1.33,data.minZ,data.maxZ);camera.name=data.name;camera.position.fromArray(data.position);if(data.rotation)camera.rotation.fromArray(data.rotation);objects[data.id]=camera;}
var lights=json.lights;for(var i=0,l=lights.length;i<l;i++){var data=lights[i];var light;switch(data.type){case 0:light=new THREE.PointLight();break;case 1:light=new THREE.DirectionalLight();break;case 2:light=new THREE.SpotLight();break;case 3:light=new THREE.HemisphereLight();break;}
light.name=data.name;if(data.position)light.position.set(data.position[0],data.position[1],-data.position[2]);light.color.fromArray(data.diffuse);if(data.groundColor)light.groundColor.fromArray(data.groundColor);if(data.intensity)light.intensity=data.intensity;objects[data.id]=light;scene.add(light);}
var meshes=json.meshes;for(var i=0,l=meshes.length;i<l;i++){var data=meshes[i];var object;if(data.indices){var geometry=parseGeometry(data);object=new THREE.Mesh(geometry,materials[data.materialId]);}else{object=new THREE.Group();}
object.name=data.name;object.position.set(data.position[0],data.position[1],-data.position[2]);object.rotation.fromArray(data.rotation);if(data.rotationQuaternion)object.quaternion.fromArray(data.rotationQuaternion);object.scale.fromArray(data.scaling);if(data.parentId){objects[data.parentId].add(object);}else{scene.add(object);}
objects[data.id]=object;}
return scene;}
var materials=parseMaterials(json);var scene=parseObjects(json,materials);return scene;}};THREE.ColladaLoader=function(manager){this.manager=(manager!==undefined)?manager:THREE.DefaultLoadingManager;};THREE.ColladaLoader.prototype={constructor:THREE.ColladaLoader,crossOrigin:'Anonymous',load:function(url,onLoad,onProgress,onError){var scope=this;var path=THREE.Loader.prototype.extractUrlBase(url);var loader=new THREE.FileLoader(scope.manager);loader.load(url,function(text){onLoad(scope.parse(text,path));},onProgress,onError);},options:{set convertUpAxis(value){console.warn('THREE.ColladaLoader: options.convertUpAxis() has been removed. Up axis is converted automatically.');}},setCrossOrigin:function(value){this.crossOrigin=value;},parse:function(text,path){function getElementsByTagName(xml,name){var array=[];var childNodes=xml.childNodes;for(var i=0,l=childNodes.length;i<l;i++){var child=childNodes[i];if(child.nodeName===name){array.push(child);}}
return array;}
function parseStrings(text){if(text.length===0)return[];var parts=text.trim().split(/\s+/);var array=new Array(parts.length);for(var i=0,l=parts.length;i<l;i++){array[i]=parts[i];}
return array;}
function parseFloats(text){if(text.length===0)return[];var parts=text.trim().split(/\s+/);var array=new Array(parts.length);for(var i=0,l=parts.length;i<l;i++){array[i]=parseFloat(parts[i]);}
return array;}
function parseInts(text){if(text.length===0)return[];var parts=text.trim().split(/\s+/);var array=new Array(parts.length);for(var i=0,l=parts.length;i<l;i++){array[i]=parseInt(parts[i]);}
return array;}
function parseId(text){return text.substring(1);}
function isEmpty(object){return Object.keys(object).length===0;}
function parseAsset(xml){return{unit:parseAssetUnit(getElementsByTagName(xml,'unit')[0]),upAxis:parseAssetUpAxis(getElementsByTagName(xml,'up_axis')[0])};}
function parseAssetUnit(xml){return xml!==undefined?parseFloat(xml.getAttribute('meter')):1;}
function parseAssetUpAxis(xml){return xml!==undefined?xml.textContent:'Y_UP';}
function parseLibrary(xml,libraryName,nodeName,parser){var library=getElementsByTagName(xml,libraryName)[0];if(library!==undefined){var elements=getElementsByTagName(library,nodeName);for(var i=0;i<elements.length;i++){parser(elements[i]);}}}
function buildLibrary(data,builder){for(var name in data){var object=data[name];object.build=builder(data[name]);}}
function getBuild(data,builder){if(data.build!==undefined)return data.build;data.build=builder(data);return data.build;}
function parseAnimation(xml){var data={sources:{},samplers:{},channels:{}};for(var i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;var id;switch(child.nodeName){case'source':id=child.getAttribute('id');data.sources[id]=parseSource(child);break;case'sampler':id=child.getAttribute('id');data.samplers[id]=parseAnimationSampler(child);break;case'channel':id=child.getAttribute('target');data.channels[id]=parseAnimationChannel(child);break;default:console.log(child);}}
library.animations[xml.getAttribute('id')]=data;}
function parseAnimationSampler(xml){var data={inputs:{},};for(var i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'input':var id=parseId(child.getAttribute('source'));var semantic=child.getAttribute('semantic');data.inputs[semantic]=id;break;}}
return data;}
function parseAnimationChannel(xml){var data={};var target=xml.getAttribute('target');var parts=target.split('/');var id=parts.shift();var sid=parts.shift();var arraySyntax=(sid.indexOf('(')!==-1);var memberSyntax=(sid.indexOf('.')!==-1);if(memberSyntax){parts=sid.split('.');sid=parts.shift();data.member=parts.shift();}else if(arraySyntax){var indices=sid.split('(');sid=indices.shift();for(var i=0;i<indices.length;i++){indices[i]=parseInt(indices[i].replace(/\)/,''));}
data.indices=indices;}
data.id=id;data.sid=sid;data.arraySyntax=arraySyntax;data.memberSyntax=memberSyntax;data.sampler=parseId(xml.getAttribute('source'));return data;}
function buildAnimation(data){var tracks=[];var channels=data.channels;var samplers=data.samplers;var sources=data.sources;for(var target in channels){if(channels.hasOwnProperty(target)){var channel=channels[target];var sampler=samplers[channel.sampler];var inputId=sampler.inputs.INPUT;var outputId=sampler.inputs.OUTPUT;var inputSource=sources[inputId];var outputSource=sources[outputId];var animation=buildAnimationChannel(channel,inputSource,outputSource);createKeyframeTracks(animation,tracks);}}
return tracks;}
function getAnimation(id){return getBuild(library.animations[id],buildAnimation);}
function buildAnimationChannel(channel,inputSource,outputSource){var node=library.nodes[channel.id];var object3D=getNode(node.id);var transform=node.transforms[channel.sid];var defaultMatrix=node.matrix.clone().transpose();var time,stride;var i,il,j,jl;var data={};switch(transform){case'matrix':for(i=0,il=inputSource.array.length;i<il;i++){time=inputSource.array[i];stride=i*outputSource.stride;if(data[time]===undefined)data[time]={};if(channel.arraySyntax===true){var value=outputSource.array[stride];var index=channel.indices[0]+4*channel.indices[1];data[time][index]=value;}else{for(j=0,jl=outputSource.stride;j<jl;j++){data[time][j]=outputSource.array[stride+j];}}}
break;case'translate':console.warn('THREE.ColladaLoader: Animation transform type "%s" not yet implemented.',transform);break;case'rotate':console.warn('THREE.ColladaLoader: Animation transform type "%s" not yet implemented.',transform);break;case'scale':console.warn('THREE.ColladaLoader: Animation transform type "%s" not yet implemented.',transform);break;}
var keyframes=prepareAnimationData(data,defaultMatrix);var animation={name:object3D.uuid,keyframes:keyframes};return animation;}
function prepareAnimationData(data,defaultMatrix){var keyframes=[];for(var time in data){keyframes.push({time:parseFloat(time),value:data[time]});}
keyframes.sort(ascending);for(var i=0;i<16;i++){transformAnimationData(keyframes,i,defaultMatrix.elements[i]);}
return keyframes;function ascending(a,b){return a.time-b.time;}}
var position=new THREE.Vector3();var scale=new THREE.Vector3();var quaternion=new THREE.Quaternion();function createKeyframeTracks(animation,tracks){var keyframes=animation.keyframes;var name=animation.name;var times=[];var positionData=[];var quaternionData=[];var scaleData=[];for(var i=0,l=keyframes.length;i<l;i++){var keyframe=keyframes[i];var time=keyframe.time;var value=keyframe.value;matrix.fromArray(value).transpose();matrix.decompose(position,quaternion,scale);times.push(time);positionData.push(position.x,position.y,position.z);quaternionData.push(quaternion.x,quaternion.y,quaternion.z,quaternion.w);scaleData.push(scale.x,scale.y,scale.z);}
if(positionData.length>0)tracks.push(new THREE.VectorKeyframeTrack(name+'.position',times,positionData));if(quaternionData.length>0)tracks.push(new THREE.QuaternionKeyframeTrack(name+'.quaternion',times,quaternionData));if(scaleData.length>0)tracks.push(new THREE.VectorKeyframeTrack(name+'.scale',times,scaleData));return tracks;}
function transformAnimationData(keyframes,property,defaultValue){var keyframe;var empty=true;var i,l;for(i=0,l=keyframes.length;i<l;i++){keyframe=keyframes[i];if(keyframe.value[property]===undefined){keyframe.value[property]=null;}else{empty=false;}}
if(empty===true){for(i=0,l=keyframes.length;i<l;i++){keyframe=keyframes[i];keyframe.value[property]=defaultValue;}}else{createMissingKeyframes(keyframes,property);}}
function createMissingKeyframes(keyframes,property){var prev,next;for(var i=0,l=keyframes.length;i<l;i++){var keyframe=keyframes[i];if(keyframe.value[property]===null){prev=getPrev(keyframes,i,property);next=getNext(keyframes,i,property);if(prev===null){keyframe.value[property]=next.value[property];continue;}
if(next===null){keyframe.value[property]=prev.value[property];continue;}
interpolate(keyframe,prev,next,property);}}}
function getPrev(keyframes,i,property){while(i>=0){var keyframe=keyframes[i];if(keyframe.value[property]!==null)return keyframe;i--;}
return null;}
function getNext(keyframes,i,property){while(i<keyframes.length){var keyframe=keyframes[i];if(keyframe.value[property]!==null)return keyframe;i++;}
return null;}
function interpolate(key,prev,next,property){if((next.time-prev.time)===0){key.value[property]=prev.value[property];return;}
key.value[property]=((key.time-prev.time)*(next.value[property]-prev.value[property])/(next.time-prev.time))+prev.value[property];}
function parseAnimationClip(xml){var data={name:xml.getAttribute('id')||'default',start:parseFloat(xml.getAttribute('start')||0),end:parseFloat(xml.getAttribute('end')||0),animations:[]};for(var i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'instance_animation':data.animations.push(parseId(child.getAttribute('url')));break;}}
library.clips[xml.getAttribute('id')]=data;}
function buildAnimationClip(data){var tracks=[];var name=data.name;var duration=(data.end-data.start)||-1;var animations=data.animations;for(var i=0,il=animations.length;i<il;i++){var animationTracks=getAnimation(animations[i]);for(var j=0,jl=animationTracks.length;j<jl;j++){tracks.push(animationTracks[j]);}}
return new THREE.AnimationClip(name,duration,tracks);}
function getAnimationClip(id){return getBuild(library.clips[id],buildAnimationClip);}
function parseController(xml){var data={};for(var i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'skin':data.id=parseId(child.getAttribute('source'));data.skin=parseSkin(child);break;case'morph':data.id=parseId(child.getAttribute('source'));console.warn('THREE.ColladaLoader: Morph target animation not supported yet.');break;}}
library.controllers[xml.getAttribute('id')]=data;}
function parseSkin(xml){var data={sources:{}};for(var i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'bind_shape_matrix':data.bindShapeMatrix=parseFloats(child.textContent);break;case'source':var id=child.getAttribute('id');data.sources[id]=parseSource(child);break;case'joints':data.joints=parseJoints(child);break;case'vertex_weights':data.vertexWeights=parseVertexWeights(child);break;}}
return data;}
function parseJoints(xml){var data={inputs:{}};for(var i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'input':var semantic=child.getAttribute('semantic');var id=parseId(child.getAttribute('source'));data.inputs[semantic]=id;break;}}
return data;}
function parseVertexWeights(xml){var data={inputs:{}};for(var i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'input':var semantic=child.getAttribute('semantic');var id=parseId(child.getAttribute('source'));var offset=parseInt(child.getAttribute('offset'));data.inputs[semantic]={id:id,offset:offset};break;case'vcount':data.vcount=parseInts(child.textContent);break;case'v':data.v=parseInts(child.textContent);break;}}
return data;}
function buildController(data){var build={id:data.id};var geometry=library.geometries[build.id];if(data.skin!==undefined){build.skin=buildSkin(data.skin);geometry.sources.skinIndices=build.skin.indices;geometry.sources.skinWeights=build.skin.weights;}
return build;}
function buildSkin(data){var BONE_LIMIT=4;var build={joints:[],indices:{array:[],stride:BONE_LIMIT},weights:{array:[],stride:BONE_LIMIT}};var sources=data.sources;var vertexWeights=data.vertexWeights;var vcount=vertexWeights.vcount;var v=vertexWeights.v;var jointOffset=vertexWeights.inputs.JOINT.offset;var weightOffset=vertexWeights.inputs.WEIGHT.offset;var jointSource=data.sources[data.joints.inputs.JOINT];var inverseSource=data.sources[data.joints.inputs.INV_BIND_MATRIX];var weights=sources[vertexWeights.inputs.WEIGHT.id].array;var stride=0;var i,j,l;for(i=0,l=vcount.length;i<l;i++){var jointCount=vcount[i];var vertexSkinData=[];for(j=0;j<jointCount;j++){var skinIndex=v[stride+jointOffset];var weightId=v[stride+weightOffset];var skinWeight=weights[weightId];vertexSkinData.push({index:skinIndex,weight:skinWeight});stride+=2;}
vertexSkinData.sort(descending);for(j=0;j<BONE_LIMIT;j++){var d=vertexSkinData[j];if(d!==undefined){build.indices.array.push(d.index);build.weights.array.push(d.weight);}else{build.indices.array.push(0);build.weights.array.push(0);}}}
build.bindMatrix=new THREE.Matrix4().fromArray(data.bindShapeMatrix).transpose();for(i=0,l=jointSource.array.length;i<l;i++){var name=jointSource.array[i];var boneInverse=new THREE.Matrix4().fromArray(inverseSource.array,i*inverseSource.stride).transpose();build.joints.push({name:name,boneInverse:boneInverse});}
return build;function descending(a,b){return b.weight-a.weight;}}
function getController(id){return getBuild(library.controllers[id],buildController);}
function parseImage(xml){var data={init_from:getElementsByTagName(xml,'init_from')[0].textContent};library.images[xml.getAttribute('id')]=data;}
function buildImage(data){if(data.build!==undefined)return data.build;return data.init_from;}
function getImage(id){return getBuild(library.images[id],buildImage);}
function parseEffect(xml){var data={};for(var i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'profile_COMMON':data.profile=parseEffectProfileCOMMON(child);break;}}
library.effects[xml.getAttribute('id')]=data;}
function parseEffectProfileCOMMON(xml){var data={surfaces:{},samplers:{}};for(var i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'newparam':parseEffectNewparam(child,data);break;case'technique':data.technique=parseEffectTechnique(child);break;}}
return data;}
function parseEffectNewparam(xml,data){var sid=xml.getAttribute('sid');for(var i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'surface':data.surfaces[sid]=parseEffectSurface(child);break;case'sampler2D':data.samplers[sid]=parseEffectSampler(child);break;}}}
function parseEffectSurface(xml){var data={};for(var i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'init_from':data.init_from=child.textContent;break;}}
return data;}
function parseEffectSampler(xml){var data={};for(var i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'source':data.source=child.textContent;break;}}
return data;}
function parseEffectTechnique(xml){var data={};for(var i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'constant':case'lambert':case'blinn':case'phong':data.type=child.nodeName;data.parameters=parseEffectParameters(child);break;}}
return data;}
function parseEffectParameters(xml){var data={};for(var i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'emission':case'diffuse':case'specular':case'shininess':case'transparent':case'transparency':data[child.nodeName]=parseEffectParameter(child);break;}}
return data;}
function parseEffectParameter(xml){var data={};for(var i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'color':data[child.nodeName]=parseFloats(child.textContent);break;case'float':data[child.nodeName]=parseFloat(child.textContent);break;case'texture':data[child.nodeName]={id:child.getAttribute('texture'),extra:parseEffectParameterTexture(child)};break;}}
return data;}
function parseEffectParameterTexture(xml){var data={technique:{}};for(var i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'extra':parseEffectParameterTextureExtra(child,data);break;}}
return data;}
function parseEffectParameterTextureExtra(xml,data){for(var i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'technique':parseEffectParameterTextureExtraTechnique(child,data);break;}}}
function parseEffectParameterTextureExtraTechnique(xml,data){for(var i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'repeatU':case'repeatV':case'offsetU':case'offsetV':data.technique[child.nodeName]=parseFloat(child.textContent);break;case'wrapU':case'wrapV':if(child.textContent.toUpperCase()==='TRUE'){data.technique[child.nodeName]=1;}else if(child.textContent.toUpperCase()==='FALSE'){data.technique[child.nodeName]=0;}else{data.technique[child.nodeName]=parseInt(child.textContent);}
break;}}}
function buildEffect(data){return data;}
function getEffect(id){return getBuild(library.effects[id],buildEffect);}
function parseMaterial(xml){var data={name:xml.getAttribute('name')};for(var i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'instance_effect':data.url=parseId(child.getAttribute('url'));break;}}
library.materials[xml.getAttribute('id')]=data;}
function buildMaterial(data){var effect=getEffect(data.url);var technique=effect.profile.technique;var material;switch(technique.type){case'phong':case'blinn':material=new THREE.MeshPhongMaterial();break;case'lambert':material=new THREE.MeshLambertMaterial();break;default:material=new THREE.MeshBasicMaterial();break;}
material.name=data.name;function getTexture(textureObject){var sampler=effect.profile.samplers[textureObject.id];if(sampler!==undefined){var surface=effect.profile.surfaces[sampler.source];var texture=textureLoader.load(getImage(surface.init_from));var extra=textureObject.extra;if(extra!==undefined&&extra.technique!==undefined&&isEmpty(extra.technique)===false){var technique=extra.technique;texture.wrapS=technique.wrapU?THREE.RepeatWrapping:THREE.ClampToEdgeWrapping;texture.wrapT=technique.wrapV?THREE.RepeatWrapping:THREE.ClampToEdgeWrapping;texture.offset.set(technique.offsetU||0,technique.offsetV||0);texture.repeat.set(technique.repeatU||1,technique.repeatV||1);}else{texture.wrapS=THREE.RepeatWrapping;texture.wrapT=THREE.RepeatWrapping;}
return texture;}
console.error('THREE.ColladaLoader: Undefined sampler',textureObject.id);return null;}
var parameters=technique.parameters;for(var key in parameters){var parameter=parameters[key];switch(key){case'diffuse':if(parameter.color)material.color.fromArray(parameter.color);if(parameter.texture)material.map=getTexture(parameter.texture);break;case'specular':if(parameter.color&&material.specular)material.specular.fromArray(parameter.color);if(parameter.texture)material.specularMap=getTexture(parameter.texture);break;case'shininess':if(parameter.float&&material.shininess)
material.shininess=parameter.float;break;case'emission':if(parameter.color&&material.emissive)
material.emissive.fromArray(parameter.color);break;case'transparent':material.transparent=true;break;case'transparency':if(parameter.float!==undefined)material.opacity=parameter.float;material.transparent=true;break;}}
return material;}
function getMaterial(id){return getBuild(library.materials[id],buildMaterial);}
function parseCamera(xml){var data={name:xml.getAttribute('name')};for(var i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'optics':data.optics=parseCameraOptics(child);break;}}
library.cameras[xml.getAttribute('id')]=data;}
function parseCameraOptics(xml){for(var i=0;i<xml.childNodes.length;i++){var child=xml.childNodes[i];switch(child.nodeName){case'technique_common':return parseCameraTechnique(child);}}
return{};}
function parseCameraTechnique(xml){var data={};for(var i=0;i<xml.childNodes.length;i++){var child=xml.childNodes[i];switch(child.nodeName){case'perspective':case'orthographic':data.technique=child.nodeName;data.parameters=parseCameraParameters(child);break;}}
return data;}
function parseCameraParameters(xml){var data={};for(var i=0;i<xml.childNodes.length;i++){var child=xml.childNodes[i];switch(child.nodeName){case'xfov':case'yfov':case'xmag':case'ymag':case'znear':case'zfar':case'aspect_ratio':data[child.nodeName]=parseFloat(child.textContent);break;}}
return data;}
function buildCamera(data){var camera;switch(data.optics.technique){case'perspective':camera=new THREE.PerspectiveCamera(data.optics.parameters.yfov,data.optics.parameters.aspect_ratio,data.optics.parameters.znear,data.optics.parameters.zfar);break;case'orthographic':var ymag=data.optics.parameters.ymag;var xmag=data.optics.parameters.xmag;var aspectRatio=data.optics.parameters.aspect_ratio;xmag=(xmag===undefined)?(ymag*aspectRatio):xmag;ymag=(ymag===undefined)?(xmag/aspectRatio):ymag;xmag*=0.5;ymag*=0.5;camera=new THREE.OrthographicCamera(-xmag,xmag,ymag,-ymag,data.optics.parameters.znear,data.optics.parameters.zfar);break;default:camera=new THREE.PerspectiveCamera();break;}
camera.name=data.name;return camera;}
function getCamera(id){return getBuild(library.cameras[id],buildCamera);}
function parseLight(xml){var data={};for(var i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'technique_common':data=parseLightTechnique(child);break;}}
library.lights[xml.getAttribute('id')]=data;}
function parseLightTechnique(xml){var data={};for(var i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'directional':case'point':case'spot':case'ambient':data.technique=child.nodeName;data.parameters=parseLightParameters(child);}}
return data;}
function parseLightParameters(xml){var data={};for(var i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'color':var array=parseFloats(child.textContent);data.color=new THREE.Color().fromArray(array);break;case'falloff_angle':data.falloffAngle=parseFloat(child.textContent);break;case'quadratic_attenuation':var f=parseFloat(child.textContent);data.distance=f?Math.sqrt(1/f):0;break;}}
return data;}
function buildLight(data){var light;switch(data.technique){case'directional':light=new THREE.DirectionalLight();break;case'point':light=new THREE.PointLight();break;case'spot':light=new THREE.SpotLight();break;case'ambient':light=new THREE.AmbientLight();break;}
if(data.parameters.color)light.color.copy(data.parameters.color);if(data.parameters.distance)light.distance=data.parameters.distance;return light;}
function getLight(id){return getBuild(library.lights[id],buildLight);}
function parseGeometry(xml){var data={name:xml.getAttribute('name'),sources:{},vertices:{},primitives:[]};var mesh=getElementsByTagName(xml,'mesh')[0];for(var i=0;i<mesh.childNodes.length;i++){var child=mesh.childNodes[i];if(child.nodeType!==1)continue;var id=child.getAttribute('id');switch(child.nodeName){case'source':data.sources[id]=parseSource(child);break;case'vertices':data.vertices=parseGeometryVertices(child);break;case'polygons':console.warn('THREE.ColladaLoader: Unsupported primitive type: ',child.nodeName);break;case'lines':case'linestrips':case'polylist':case'triangles':data.primitives.push(parseGeometryPrimitive(child));break;default:console.log(child);}}
library.geometries[xml.getAttribute('id')]=data;}
function parseSource(xml){var data={array:[],stride:3};for(var i=0;i<xml.childNodes.length;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'float_array':data.array=parseFloats(child.textContent);break;case'Name_array':data.array=parseStrings(child.textContent);break;case'technique_common':var accessor=getElementsByTagName(child,'accessor')[0];if(accessor!==undefined){data.stride=parseInt(accessor.getAttribute('stride'));}
break;}}
return data;}
function parseGeometryVertices(xml){var data={};for(var i=0;i<xml.childNodes.length;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;data[child.getAttribute('semantic')]=parseId(child.getAttribute('source'));}
return data;}
function parseGeometryPrimitive(xml){var primitive={type:xml.nodeName,material:xml.getAttribute('material'),count:parseInt(xml.getAttribute('count')),inputs:{},stride:0};for(var i=0,l=xml.childNodes.length;i<l;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'input':var id=parseId(child.getAttribute('source'));var semantic=child.getAttribute('semantic');var offset=parseInt(child.getAttribute('offset'));primitive.inputs[semantic]={id:id,offset:offset};primitive.stride=Math.max(primitive.stride,offset+1);break;case'vcount':primitive.vcount=parseInts(child.textContent);break;case'p':primitive.p=parseInts(child.textContent);break;}}
return primitive;}
function groupPrimitives(primitives){var build={};for(var i=0;i<primitives.length;i++){var primitive=primitives[i];if(build[primitive.type]===undefined)build[primitive.type]=[];build[primitive.type].push(primitive);}
return build;}
function buildGeometry(data){var build={};var sources=data.sources;var vertices=data.vertices;var primitives=data.primitives;if(primitives.length===0)return{};var groupedPrimitives=groupPrimitives(primitives);for(var type in groupedPrimitives){build[type]=buildGeometryType(groupedPrimitives[type],sources,vertices);}
return build;}
function buildGeometryType(primitives,sources,vertices){var build={};var position={array:[],stride:0};var normal={array:[],stride:0};var uv={array:[],stride:0};var color={array:[],stride:0};var skinIndex={array:[],stride:4};var skinWeight={array:[],stride:4};var geometry=new THREE.BufferGeometry();var materialKeys=[];var start=0,count=0;for(var p=0;p<primitives.length;p++){var primitive=primitives[p];var inputs=primitive.inputs;var triangleCount=1;if(primitive.vcount&&primitive.vcount[0]===4){triangleCount=2;}
if(primitive.type==='lines'||primitive.type==='linestrips'){count=primitive.count*2;}else{count=primitive.count*3*triangleCount;}
geometry.addGroup(start,count,p);start+=count;if(primitive.material){materialKeys.push(primitive.material);}
for(var name in inputs){var input=inputs[name];switch(name){case'VERTEX':for(var key in vertices){var id=vertices[key];switch(key){case'POSITION':buildGeometryData(primitive,sources[id],input.offset,position.array);position.stride=sources[id].stride;if(sources.skinWeights&&sources.skinIndices){buildGeometryData(primitive,sources.skinIndices,input.offset,skinIndex.array);buildGeometryData(primitive,sources.skinWeights,input.offset,skinWeight.array);}
break;case'NORMAL':buildGeometryData(primitive,sources[id],input.offset,normal.array);normal.stride=sources[id].stride;break;case'COLOR':buildGeometryData(primitive,sources[id],input.offset,color.array);color.stride=sources[id].stride;break;case'TEXCOORD':buildGeometryData(primitive,sources[id],input.offset,uv.array);uv.stride=sources[id].stride;break;default:console.warn('THREE.ColladaLoader: Semantic "%s" not handled in geometry build process.',key);}}
break;case'NORMAL':buildGeometryData(primitive,sources[input.id],input.offset,normal.array);normal.stride=sources[input.id].stride;break;case'COLOR':buildGeometryData(primitive,sources[input.id],input.offset,color.array);color.stride=sources[input.id].stride;break;case'TEXCOORD':buildGeometryData(primitive,sources[input.id],input.offset,uv.array);uv.stride=sources[input.id].stride;break;}}}
if(position.array.length>0)geometry.addAttribute('position',new THREE.Float32BufferAttribute(position.array,position.stride));if(normal.array.length>0)geometry.addAttribute('normal',new THREE.Float32BufferAttribute(normal.array,normal.stride));if(color.array.length>0)geometry.addAttribute('color',new THREE.Float32BufferAttribute(color.array,color.stride));if(uv.array.length>0)geometry.addAttribute('uv',new THREE.Float32BufferAttribute(uv.array,uv.stride));if(skinIndex.array.length>0)geometry.addAttribute('skinIndex',new THREE.Float32BufferAttribute(skinIndex.array,skinIndex.stride));if(skinWeight.array.length>0)geometry.addAttribute('skinWeight',new THREE.Float32BufferAttribute(skinWeight.array,skinWeight.stride));build.data=geometry;build.type=primitives[0].type;build.materialKeys=materialKeys;return build;}
function buildGeometryData(primitive,source,offset,array){var indices=primitive.p;var stride=primitive.stride;var vcount=primitive.vcount;function pushVector(i){var index=indices[i+offset]*sourceStride;var length=index+sourceStride;for(;index<length;index++){array.push(sourceArray[index]);}}
var maxcount=0;var sourceArray=source.array;var sourceStride=source.stride;if(primitive.vcount!==undefined){var index=0;for(var i=0,l=vcount.length;i<l;i++){var count=vcount[i];if(count===4){var a=index+stride*0;var b=index+stride*1;var c=index+stride*2;var d=index+stride*3;pushVector(a);pushVector(b);pushVector(d);pushVector(b);pushVector(c);pushVector(d);}else if(count===3){var a=index+stride*0;var b=index+stride*1;var c=index+stride*2;pushVector(a);pushVector(b);pushVector(c);}else{maxcount=Math.max(maxcount,count);}
index+=stride*count;}
if(maxcount>0){console.log('THREE.ColladaLoader: Geometry has faces with more than 4 vertices.');}}else{for(var i=0,l=indices.length;i<l;i+=stride){pushVector(i);}}}
function getGeometry(id){return getBuild(library.geometries[id],buildGeometry);}
function parseKinematicsModel(xml){var data={name:xml.getAttribute('name')||'',joints:{},links:[]};for(var i=0;i<xml.childNodes.length;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'technique_common':parseKinematicsTechniqueCommon(child,data);break;}}
library.kinematicsModels[xml.getAttribute('id')]=data;}
function buildKinematicsModel(data){if(data.build!==undefined)return data.build;return data;}
function getKinematicsModel(id){return getBuild(library.kinematicsModels[id],buildKinematicsModel);}
function parseKinematicsTechniqueCommon(xml,data){for(var i=0;i<xml.childNodes.length;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'joint':data.joints[child.getAttribute('sid')]=parseKinematicsJoint(child);break;case'link':data.links.push(parseKinematicsLink(child));break;}}}
function parseKinematicsJoint(xml){var data;for(var i=0;i<xml.childNodes.length;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'prismatic':case'revolute':data=parseKinematicsJointParameter(child);break;}}
return data;}
function parseKinematicsJointParameter(xml,data){var data={sid:xml.getAttribute('sid'),name:xml.getAttribute('name')||'',axis:new THREE.Vector3(),limits:{min:0,max:0},type:xml.nodeName,static:false,zeroPosition:0,middlePosition:0};for(var i=0;i<xml.childNodes.length;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'axis':var array=parseFloats(child.textContent);data.axis.fromArray(array);break;case'limits':var max=child.getElementsByTagName('max')[0];var min=child.getElementsByTagName('min')[0];data.limits.max=parseFloat(max.textContent);data.limits.min=parseFloat(min.textContent);break;}}
if(data.limits.min>=data.limits.max){data.static=true;}
data.middlePosition=(data.limits.min+data.limits.max)/2.0;return data;}
function parseKinematicsLink(xml){var data={sid:xml.getAttribute('sid'),name:xml.getAttribute('name')||'',attachments:[],transforms:[]};for(var i=0;i<xml.childNodes.length;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'attachment_full':data.attachments.push(parseKinematicsAttachment(child));break;case'matrix':case'translate':case'rotate':data.transforms.push(parseKinematicsTransform(child));break;}}
return data;}
function parseKinematicsAttachment(xml){var data={joint:xml.getAttribute('joint').split('/').pop(),transforms:[],links:[]};for(var i=0;i<xml.childNodes.length;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'link':data.links.push(parseKinematicsLink(child));break;case'matrix':case'translate':case'rotate':data.transforms.push(parseKinematicsTransform(child));break;}}
return data;}
function parseKinematicsTransform(xml){var data={type:xml.nodeName};var array=parseFloats(xml.textContent);switch(data.type){case'matrix':data.obj=new THREE.Matrix4();data.obj.fromArray(array).transpose();break;case'translate':data.obj=new THREE.Vector3();data.obj.fromArray(array);break;case'rotate':data.obj=new THREE.Vector3();data.obj.fromArray(array);data.angle=THREE.Math.degToRad(array[3]);break;}
return data;}
function parseKinematicsScene(xml){var data={bindJointAxis:[]};for(var i=0;i<xml.childNodes.length;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'bind_joint_axis':data.bindJointAxis.push(parseKinematicsBindJointAxis(child));break;}}
library.kinematicsScenes[parseId(xml.getAttribute('url'))]=data;}
function parseKinematicsBindJointAxis(xml){var data={target:xml.getAttribute('target').split('/').pop()};for(var i=0;i<xml.childNodes.length;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'axis':var param=child.getElementsByTagName('param')[0];data.axis=param.textContent;var tmpJointIndex=data.axis.split('inst_').pop().split('axis')[0];data.jointIndex=tmpJointIndex.substr(0,tmpJointIndex.length-1);break;}}
return data;}
function buildKinematicsScene(data){if(data.build!==undefined)return data.build;return data;}
function getKinematicsScene(id){return getBuild(library.kinematicsScenes[id],buildKinematicsScene);}
function setupKinematics(){var kinematicsModelId=Object.keys(library.kinematicsModels)[0];var kinematicsSceneId=Object.keys(library.kinematicsScenes)[0];var visualSceneId=Object.keys(library.visualScenes)[0];if(kinematicsModelId===undefined||kinematicsSceneId===undefined)return;var kinematicsModel=getKinematicsModel(kinematicsModelId);var kinematicsScene=getKinematicsScene(kinematicsSceneId);var visualScene=getVisualScene(visualSceneId);var bindJointAxis=kinematicsScene.bindJointAxis;var jointMap={};for(var i=0,l=bindJointAxis.length;i<l;i++){var axis=bindJointAxis[i];var targetElement=collada.querySelector('[sid="'+axis.target+'"]');if(targetElement){var parentVisualElement=targetElement.parentElement;connect(axis.jointIndex,parentVisualElement);}}
function connect(jointIndex,visualElement){var visualElementName=visualElement.getAttribute('name');var joint=kinematicsModel.joints[jointIndex];visualScene.traverse(function(object){if(object.name===visualElementName){jointMap[jointIndex]={object:object,transforms:buildTransformList(visualElement),joint:joint,position:joint.zeroPosition};}});}
var m0=new THREE.Matrix4();kinematics={joints:kinematicsModel&&kinematicsModel.joints,getJointValue:function(jointIndex){var jointData=jointMap[jointIndex];if(jointData){return jointData.position;}else{console.warn('THREE.ColladaLoader: Joint '+jointIndex+' doesn\'t exist.');}},setJointValue:function(jointIndex,value){var jointData=jointMap[jointIndex];if(jointData){var joint=jointData.joint;if(value>joint.limits.max||value<joint.limits.min){console.warn('THREE.ColladaLoader: Joint '+jointIndex+' value '+value+' outside of limits (min: '+joint.limits.min+', max: '+joint.limits.max+').');}else if(joint.static){console.warn('THREE.ColladaLoader: Joint '+jointIndex+' is static.');}else{var object=jointData.object;var axis=joint.axis;var transforms=jointData.transforms;matrix.identity();for(var i=0;i<transforms.length;i++){var transform=transforms[i];if(transform.sid&&transform.sid.indexOf(jointIndex)!==-1){switch(joint.type){case'revolute':matrix.multiply(m0.makeRotationAxis(axis,THREE.Math.degToRad(value)));break;case'prismatic':matrix.multiply(m0.makeTranslation(axis.x*value,axis.y*value,axis.z*value));break;default:console.warn('THREE.ColladaLoader: Unknown joint type: '+joint.type);break;}}else{switch(transform.type){case'matrix':matrix.multiply(transform.obj);break;case'translate':matrix.multiply(m0.makeTranslation(transform.obj.x,transform.obj.y,transform.obj.z));break;case'scale':matrix.scale(transform.obj);break;case'rotate':matrix.multiply(m0.makeRotationAxis(transform.obj,transform.angle));break;}}}
object.matrix.copy(matrix);object.matrix.decompose(object.position,object.quaternion,object.scale);jointMap[jointIndex].position=value;}}else{console.log('THREE.ColladaLoader: '+jointIndex+' does not exist.');}}};}
function buildTransformList(node){var transforms=[];var xml=collada.querySelector('[id="'+node.id+'"]');for(var i=0;i<xml.childNodes.length;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'matrix':var array=parseFloats(child.textContent);var matrix=new THREE.Matrix4().fromArray(array).transpose();transforms.push({sid:child.getAttribute('sid'),type:child.nodeName,obj:matrix});break;case'translate':case'scale':var array=parseFloats(child.textContent);var vector=new THREE.Vector3().fromArray(array);transforms.push({sid:child.getAttribute('sid'),type:child.nodeName,obj:vector});break;case'rotate':var array=parseFloats(child.textContent);var vector=new THREE.Vector3().fromArray(array);var angle=THREE.Math.degToRad(array[3]);transforms.push({sid:child.getAttribute('sid'),type:child.nodeName,obj:vector,angle:angle});break;}}
return transforms;}
var matrix=new THREE.Matrix4();var vector=new THREE.Vector3();function parseNode(xml){var data={name:xml.getAttribute('name'),type:xml.getAttribute('type'),id:xml.getAttribute('id'),sid:xml.getAttribute('sid'),matrix:new THREE.Matrix4(),nodes:[],instanceCameras:[],instanceControllers:[],instanceLights:[],instanceGeometries:[],instanceNodes:[],transforms:{}};for(var i=0;i<xml.childNodes.length;i++){var child=xml.childNodes[i];if(child.nodeType!==1)continue;switch(child.nodeName){case'node':if(child.hasAttribute('id')){data.nodes.push(child.getAttribute('id'));parseNode(child);}
break;case'instance_camera':data.instanceCameras.push(parseId(child.getAttribute('url')));break;case'instance_controller':data.instanceControllers.push(parseNodeInstance(child));break;case'instance_light':data.instanceLights.push(parseId(child.getAttribute('url')));break;case'instance_geometry':data.instanceGeometries.push(parseNodeInstance(child));break;case'instance_node':data.instanceNodes.push(parseId(child.getAttribute('url')));break;case'matrix':var array=parseFloats(child.textContent);data.matrix.multiply(matrix.fromArray(array).transpose());data.transforms[child.getAttribute('sid')]=child.nodeName;break;case'translate':var array=parseFloats(child.textContent);vector.fromArray(array);data.matrix.multiply(matrix.makeTranslation(vector.x,vector.y,vector.z));data.transforms[child.getAttribute('sid')]=child.nodeName;break;case'rotate':var array=parseFloats(child.textContent);var angle=THREE.Math.degToRad(array[3]);data.matrix.multiply(matrix.makeRotationAxis(vector.fromArray(array),angle));data.transforms[child.getAttribute('sid')]=child.nodeName;break;case'scale':var array=parseFloats(child.textContent);data.matrix.scale(vector.fromArray(array));data.transforms[child.getAttribute('sid')]=child.nodeName;break;case'extra':break;default:console.log(child);}}
if(xml.hasAttribute('id')){library.nodes[xml.getAttribute('id')]=data;}
return data;}
function parseNodeInstance(xml){var data={id:parseId(xml.getAttribute('url')),materials:{},skeletons:[]};for(var i=0;i<xml.childNodes.length;i++){var child=xml.childNodes[i];switch(child.nodeName){case'bind_material':var instances=child.getElementsByTagName('instance_material');for(var j=0;j<instances.length;j++){var instance=instances[j];var symbol=instance.getAttribute('symbol');var target=instance.getAttribute('target');data.materials[symbol]=parseId(target);}
break;case'skeleton':data.skeletons.push(parseId(child.textContent));break;default:break;}}
return data;}
function buildSkeleton(skeletons,joints){var boneData=[];var sortedBoneData=[];var i,j,data;for(i=0;i<skeletons.length;i++){var skeleton=skeletons[i];var root=getNode(skeleton);buildBoneHierarchy(root,joints,boneData);}
for(i=0;i<joints.length;i++){for(j=0;j<boneData.length;j++){data=boneData[j];if(data.bone.name===joints[i].name){sortedBoneData[i]=data;data.processed=true;break;}}}
for(i=0;i<boneData.length;i++){data=boneData[i];if(data.processed===false){sortedBoneData.push(data);data.processed=true;}}
var bones=[];var boneInverses=[];for(i=0;i<sortedBoneData.length;i++){data=sortedBoneData[i];bones.push(data.bone);boneInverses.push(data.boneInverse);}
return new THREE.Skeleton(bones,boneInverses);}
function buildBoneHierarchy(root,joints,boneData){root.traverse(function(object){if(object.isBone===true){var boneInverse;for(var i=0;i<joints.length;i++){var joint=joints[i];if(joint.name===object.name){boneInverse=joint.boneInverse;break;}}
if(boneInverse===undefined){boneInverse=new THREE.Matrix4();}
boneData.push({bone:object,boneInverse:boneInverse,processed:false});}});}
function buildNode(data){var objects=[];var matrix=data.matrix;var nodes=data.nodes;var type=data.type;var instanceCameras=data.instanceCameras;var instanceControllers=data.instanceControllers;var instanceLights=data.instanceLights;var instanceGeometries=data.instanceGeometries;var instanceNodes=data.instanceNodes;for(var i=0,l=nodes.length;i<l;i++){objects.push(getNode(nodes[i]));}
for(var i=0,l=instanceCameras.length;i<l;i++){objects.push(getCamera(instanceCameras[i]).clone());}
for(var i=0,l=instanceControllers.length;i<l;i++){var instance=instanceControllers[i];var controller=getController(instance.id);var geometries=getGeometry(controller.id);var newObjects=buildObjects(geometries,instance.materials);var skeletons=instance.skeletons;var joints=controller.skin.joints;var skeleton=buildSkeleton(skeletons,joints);for(var j=0,jl=newObjects.length;j<jl;j++){var object=newObjects[j];if(object.isSkinnedMesh){object.bind(skeleton,controller.skin.bindMatrix);object.normalizeSkinWeights();}
objects.push(object);}}
for(var i=0,l=instanceLights.length;i<l;i++){objects.push(getLight(instanceLights[i]).clone());}
for(var i=0,l=instanceGeometries.length;i<l;i++){var instance=instanceGeometries[i];var geometries=getGeometry(instance.id);var newObjects=buildObjects(geometries,instance.materials);for(var j=0,jl=newObjects.length;j<jl;j++){objects.push(newObjects[j]);}}
for(var i=0,l=instanceNodes.length;i<l;i++){objects.push(getNode(instanceNodes[i]).clone());}
var object;if(nodes.length===0&&objects.length===1){object=objects[0];}else{object=(type==='JOINT')?new THREE.Bone():new THREE.Group();for(var i=0;i<objects.length;i++){object.add(objects[i]);}}
object.name=(type==='JOINT')?data.sid:data.name;object.matrix.copy(matrix);object.matrix.decompose(object.position,object.quaternion,object.scale);return object;}
function resolveMaterialBinding(keys,instanceMaterials){var materials=[];for(var i=0,l=keys.length;i<l;i++){var id=instanceMaterials[keys[i]];materials.push(getMaterial(id));}
return materials;}
function buildObjects(geometries,instanceMaterials){var objects=[];for(var type in geometries){var geometry=geometries[type];var materials=resolveMaterialBinding(geometry.materialKeys,instanceMaterials);if(materials.length===0){if(type==='lines'||type==='linestrips'){materials.push(new THREE.LineBasicMaterial());}else{materials.push(new THREE.MeshPhongMaterial());}}
var skinning=(geometry.data.attributes.skinIndex!==undefined);if(skinning){for(var i=0,l=materials.length;i<l;i++){materials[i].skinning=true;}}
var material=(materials.length===1)?materials[0]:materials;var object;switch(type){case'lines':object=new THREE.LineSegments(geometry.data,material);break;case'linestrips':object=new THREE.Line(geometry.data,material);break;case'triangles':case'polylist':if(skinning){object=new THREE.SkinnedMesh(geometry.data,material);}else{object=new THREE.Mesh(geometry.data,material);}
break;}
objects.push(object);}
return objects;}
function getNode(id){return getBuild(library.nodes[id],buildNode);}
function parseVisualScene(xml){var data={name:xml.getAttribute('name'),children:[]};var elements=getElementsByTagName(xml,'node');for(var i=0;i<elements.length;i++){data.children.push(parseNode(elements[i]));}
library.visualScenes[xml.getAttribute('id')]=data;}
function buildVisualScene(data){var group=new THREE.Group();group.name=data.name;var children=data.children;for(var i=0;i<children.length;i++){var child=children[i];if(child.id===null){group.add(buildNode(child));}else{group.add(getNode(child.id));}}
return group;}
function getVisualScene(id){return getBuild(library.visualScenes[id],buildVisualScene);}
function parseScene(xml){var instance=getElementsByTagName(xml,'instance_visual_scene')[0];return getVisualScene(parseId(instance.getAttribute('url')));}
function setupAnimations(){var clips=library.clips;if(isEmpty(clips)===true){if(isEmpty(library.animations)===false){var tracks=[];for(var id in library.animations){var animationTracks=getAnimation(id);for(var i=0,l=animationTracks.length;i<l;i++){tracks.push(animationTracks[i]);}}
animations.push(new THREE.AnimationClip('default',-1,tracks));}}else{for(var id in clips){animations.push(getAnimationClip(id));}}}
console.time('THREE.ColladaLoader');if(text.length===0){return{scene:new THREE.Scene()};}
console.time('THREE.ColladaLoader: DOMParser');var xml=new DOMParser().parseFromString(text,'application/xml');console.timeEnd('THREE.ColladaLoader: DOMParser');var collada=getElementsByTagName(xml,'COLLADA')[0];var version=collada.getAttribute('version');console.log('THREE.ColladaLoader: File version',version);var asset=parseAsset(getElementsByTagName(collada,'asset')[0]);var textureLoader=new THREE.TextureLoader(this.manager);textureLoader.setPath(path).setCrossOrigin(this.crossOrigin);var animations=[];var kinematics={};var library={animations:{},clips:{},controllers:{},images:{},effects:{},materials:{},cameras:{},lights:{},geometries:{},nodes:{},visualScenes:{},kinematicsModels:{},kinematicsScenes:{}};console.time('THREE.ColladaLoader: Parse');parseLibrary(collada,'library_animations','animation',parseAnimation);parseLibrary(collada,'library_animation_clips','animation_clip',parseAnimationClip);parseLibrary(collada,'library_controllers','controller',parseController);parseLibrary(collada,'library_images','image',parseImage);parseLibrary(collada,'library_effects','effect',parseEffect);parseLibrary(collada,'library_materials','material',parseMaterial);parseLibrary(collada,'library_cameras','camera',parseCamera);parseLibrary(collada,'library_lights','light',parseLight);parseLibrary(collada,'library_geometries','geometry',parseGeometry);parseLibrary(collada,'library_nodes','node',parseNode);parseLibrary(collada,'library_visual_scenes','visual_scene',parseVisualScene);parseLibrary(collada,'library_kinematics_models','kinematics_model',parseKinematicsModel);parseLibrary(collada,'scene','instance_kinematics_scene',parseKinematicsScene);console.timeEnd('THREE.ColladaLoader: Parse');console.time('THREE.ColladaLoader: Build');buildLibrary(library.animations,buildAnimation);buildLibrary(library.clips,buildAnimationClip);buildLibrary(library.controllers,buildController);buildLibrary(library.images,buildImage);buildLibrary(library.effects,buildEffect);buildLibrary(library.materials,buildMaterial);buildLibrary(library.cameras,buildCamera);buildLibrary(library.lights,buildLight);buildLibrary(library.geometries,buildGeometry);buildLibrary(library.visualScenes,buildVisualScene);console.timeEnd('THREE.ColladaLoader: Build');setupAnimations();setupKinematics();var scene=parseScene(getElementsByTagName(collada,'scene')[0]);if(asset.upAxis==='Z_UP'){scene.rotation.x=-Math.PI/2;}
scene.scale.multiplyScalar(asset.unit);console.timeEnd('THREE.ColladaLoader');return{animations:animations,kinematics:kinematics,library:library,scene:scene};}};(function(){THREE.FBXLoader=function(manager){this.manager=(manager!==undefined)?manager:THREE.DefaultLoadingManager;};Object.assign(THREE.FBXLoader.prototype,{load:function(url,onLoad,onProgress,onError){var self=this;var resourceDirectory=THREE.Loader.prototype.extractUrlBase(url);var loader=new THREE.FileLoader(this.manager);loader.setResponseType('arraybuffer');loader.load(url,function(buffer){try{var scene=self.parse(buffer,resourceDirectory);onLoad(scene);}catch(error){window.setTimeout(function(){if(onError)onError(error);self.manager.itemError(url);},0);}},onProgress,onError);},parse:function(FBXBuffer,resourceDirectory){var FBXTree;if(isFbxFormatBinary(FBXBuffer)){FBXTree=new BinaryParser().parse(FBXBuffer);}else{var FBXText=convertArrayBufferToString(FBXBuffer);if(!isFbxFormatASCII(FBXText)){throw new Error('THREE.FBXLoader: Unknown format.');}
if(getFbxVersion(FBXText)<7000){throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: '+getFbxVersion(FBXText));}
FBXTree=new TextParser().parse(FBXText);}
var connections=parseConnections(FBXTree);var images=parseImages(FBXTree);var textures=parseTextures(FBXTree,new THREE.TextureLoader(this.manager).setPath(resourceDirectory),images,connections);var materials=parseMaterials(FBXTree,textures,connections);var deformers=parseDeformers(FBXTree,connections);var geometryMap=parseGeometries(FBXTree,connections,deformers);var sceneGraph=parseScene(FBXTree,connections,deformers,geometryMap,materials);return sceneGraph;}});function parseConnections(FBXTree){var connectionMap=new Map();if('Connections'in FBXTree){var connectionArray=FBXTree.Connections.properties.connections;for(var connectionArrayIndex=0,connectionArrayLength=connectionArray.length;connectionArrayIndex<connectionArrayLength;++connectionArrayIndex){var connection=connectionArray[connectionArrayIndex];if(!connectionMap.has(connection[0])){connectionMap.set(connection[0],{parents:[],children:[]});}
var parentRelationship={ID:connection[1],relationship:connection[2]};connectionMap.get(connection[0]).parents.push(parentRelationship);if(!connectionMap.has(connection[1])){connectionMap.set(connection[1],{parents:[],children:[]});}
var childRelationship={ID:connection[0],relationship:connection[2]};connectionMap.get(connection[1]).children.push(childRelationship);}}
return connectionMap;}
function parseImages(FBXTree){var imageMap=new Map();if('Video'in FBXTree.Objects.subNodes){var videoNodes=FBXTree.Objects.subNodes.Video;for(var nodeID in videoNodes){var videoNode=videoNodes[nodeID];if('Content'in videoNode.properties){var image=parseImage(videoNodes[nodeID]);imageMap.set(parseInt(nodeID),image);}}}
return imageMap;}
function parseImage(videoNode){var content=videoNode.properties.Content;var fileName=videoNode.properties.RelativeFilename||videoNode.properties.Filename;var extension=fileName.slice(fileName.lastIndexOf('.')+1).toLowerCase();var type;switch(extension){case'bmp':type='image/bmp';break;case'jpg':type='image/jpeg';break;case'png':type='image/png';break;case'tif':type='image/tiff';break;default:console.warn('FBXLoader: No support image type '+extension);return;}
if(typeof content==='string'){return'data:'+type+';base64,'+content;}else{var array=new Uint8Array(content);return window.URL.createObjectURL(new Blob([array],{type:type}));}}
function parseTextures(FBXTree,loader,imageMap,connections){var textureMap=new Map();if('Texture'in FBXTree.Objects.subNodes){var textureNodes=FBXTree.Objects.subNodes.Texture;for(var nodeID in textureNodes){var texture=parseTexture(textureNodes[nodeID],loader,imageMap,connections);textureMap.set(parseInt(nodeID),texture);}}
return textureMap;}
function parseTexture(textureNode,loader,imageMap,connections){var FBX_ID=textureNode.id;var name=textureNode.name;var fileName;var filePath=textureNode.properties.FileName;var relativeFilePath=textureNode.properties.RelativeFilename;var children=connections.get(FBX_ID).children;if(children!==undefined&&children.length>0&&imageMap.has(children[0].ID)){fileName=imageMap.get(children[0].ID);}else if(relativeFilePath!==undefined&&relativeFilePath[0]!=='/'&&relativeFilePath.match(/^[a-zA-Z]:/)===null){fileName=relativeFilePath;}else{var split=filePath.split(/[\\\/]/);if(split.length>0){fileName=split[split.length-1];}else{fileName=filePath;}}
var currentPath=loader.path;if(fileName.indexOf('blob:')===0||fileName.indexOf('data:')===0){loader.setPath(undefined);}
var texture=loader.load(fileName);texture.name=name;texture.FBX_ID=FBX_ID;var wrapModeU=textureNode.properties.WrapModeU;var wrapModeV=textureNode.properties.WrapModeV;var valueU=wrapModeU!==undefined?wrapModeU.value:0;var valueV=wrapModeV!==undefined?wrapModeV.value:0;texture.wrapS=valueU===0?THREE.RepeatWrapping:THREE.ClampToEdgeWrapping;texture.wrapT=valueV===0?THREE.RepeatWrapping:THREE.ClampToEdgeWrapping;loader.setPath(currentPath);return texture;}
function parseMaterials(FBXTree,textureMap,connections){var materialMap=new Map();if('Material'in FBXTree.Objects.subNodes){var materialNodes=FBXTree.Objects.subNodes.Material;for(var nodeID in materialNodes){var material=parseMaterial(materialNodes[nodeID],textureMap,connections);if(material!==null)materialMap.set(parseInt(nodeID),material);}}
return materialMap;}
function parseMaterial(materialNode,textureMap,connections){var FBX_ID=materialNode.id;var name=materialNode.attrName;var type=materialNode.properties.ShadingModel;if(typeof type==='object'){type=type.value;}
if(!connections.has(FBX_ID))return null;var children=connections.get(FBX_ID).children;var parameters=parseParameters(materialNode.properties,textureMap,children);var material;switch(type.toLowerCase()){case'phong':material=new THREE.MeshPhongMaterial();break;case'lambert':material=new THREE.MeshLambertMaterial();break;default:console.warn('THREE.FBXLoader: No implementation given for material type %s in FBXLoader.js. Defaulting to standard material.',type);material=new THREE.MeshStandardMaterial({color:0x3300ff});break;}
material.setValues(parameters);material.name=name;return material;}
function parseParameters(properties,textureMap,childrenRelationships){var parameters={};if(properties.Diffuse){parameters.color=parseColor(properties.Diffuse);}
if(properties.Specular){parameters.specular=parseColor(properties.Specular);}
if(properties.Shininess){parameters.shininess=properties.Shininess.value;}
if(properties.Emissive){parameters.emissive=parseColor(properties.Emissive);}
if(properties.EmissiveFactor){parameters.emissiveIntensity=properties.EmissiveFactor.value;}
if(properties.Opacity){parameters.opacity=properties.Opacity.value;}
if(parameters.opacity<1.0){parameters.transparent=true;}
for(var childrenRelationshipsIndex=0,childrenRelationshipsLength=childrenRelationships.length;childrenRelationshipsIndex<childrenRelationshipsLength;++childrenRelationshipsIndex){var relationship=childrenRelationships[childrenRelationshipsIndex];var type=relationship.relationship;switch(type){case'DiffuseColor':case' "DiffuseColor':parameters.map=textureMap.get(relationship.ID);break;case'Bump':case' "Bump':parameters.bumpMap=textureMap.get(relationship.ID);break;case'NormalMap':case' "NormalMap':parameters.normalMap=textureMap.get(relationship.ID);break;case'AmbientColor':case'EmissiveColor':case' "AmbientColor':case' "EmissiveColor':default:console.warn('THREE.FBXLoader: Unknown texture application of type %s, skipping texture.',type);break;}}
return parameters;}
function parseDeformers(FBXTree,connections){var deformers={};if('Deformer'in FBXTree.Objects.subNodes){var DeformerNodes=FBXTree.Objects.subNodes.Deformer;for(var nodeID in DeformerNodes){var deformerNode=DeformerNodes[nodeID];if(deformerNode.attrType==='Skin'){var conns=connections.get(parseInt(nodeID));var skeleton=parseSkeleton(conns,DeformerNodes);skeleton.FBX_ID=parseInt(nodeID);deformers[nodeID]=skeleton;}}}
return deformers;}
function parseSkeleton(connections,DeformerNodes){var subDeformers={};var children=connections.children;for(var i=0,l=children.length;i<l;++i){var child=children[i];var subDeformerNode=DeformerNodes[child.ID];var subDeformer={FBX_ID:child.ID,index:i,indices:[],weights:[],transform:parseMatrixArray(subDeformerNode.subNodes.Transform.properties.a),transformLink:parseMatrixArray(subDeformerNode.subNodes.TransformLink.properties.a),linkMode:subDeformerNode.properties.Mode};if('Indexes'in subDeformerNode.subNodes){subDeformer.indices=parseIntArray(subDeformerNode.subNodes.Indexes.properties.a);subDeformer.weights=parseFloatArray(subDeformerNode.subNodes.Weights.properties.a);}
subDeformers[child.ID]=subDeformer;}
return{map:subDeformers,bones:[]};}
function parseGeometries(FBXTree,connections,deformers){var geometryMap=new Map();if('Geometry'in FBXTree.Objects.subNodes){var geometryNodes=FBXTree.Objects.subNodes.Geometry;for(var nodeID in geometryNodes){var relationships=connections.get(parseInt(nodeID));var geo=parseGeometry(geometryNodes[nodeID],relationships,deformers);geometryMap.set(parseInt(nodeID),geo);}}
return geometryMap;}
function parseGeometry(geometryNode,relationships,deformers){switch(geometryNode.attrType){case'Mesh':return parseMeshGeometry(geometryNode,relationships,deformers);break;case'NurbsCurve':return parseNurbsGeometry(geometryNode);break;}}
function parseMeshGeometry(geometryNode,relationships,deformers){for(var i=0;i<relationships.children.length;++i){var deformer=deformers[relationships.children[i].ID];if(deformer!==undefined)break;}
return genGeometry(geometryNode,deformer);}
function genGeometry(geometryNode,deformer){var geometry=new Geometry();var subNodes=geometryNode.subNodes;var vertexBuffer=parseFloatArray(subNodes.Vertices.properties.a);var indexBuffer=parseIntArray(subNodes.PolygonVertexIndex.properties.a);if(subNodes.LayerElementNormal){var normalInfo=getNormals(subNodes.LayerElementNormal[0]);}
if(subNodes.LayerElementUV){var uvInfo=getUVs(subNodes.LayerElementUV[0]);}
if(subNodes.LayerElementColor){var colorInfo=getColors(subNodes.LayerElementColor[0]);}
if(subNodes.LayerElementMaterial){var materialInfo=getMaterials(subNodes.LayerElementMaterial[0]);}
var weightTable={};if(deformer){var subDeformers=deformer.map;for(var key in subDeformers){var subDeformer=subDeformers[key];var indices=subDeformer.indices;for(var j=0;j<indices.length;j++){var index=indices[j];var weight=subDeformer.weights[j];if(weightTable[index]===undefined)weightTable[index]=[];weightTable[index].push({id:subDeformer.index,weight:weight});}}}
var faceVertexBuffer=[];var polygonIndex=0;var displayedWeightsWarning=false;for(var polygonVertexIndex=0;polygonVertexIndex<indexBuffer.length;polygonVertexIndex++){var vertexIndex=indexBuffer[polygonVertexIndex];var endOfFace=false;if(vertexIndex<0){vertexIndex=vertexIndex^-1;indexBuffer[polygonVertexIndex]=vertexIndex;endOfFace=true;}
var vertex=new Vertex();var weightIndices=[];var weights=[];vertex.position.fromArray(vertexBuffer,vertexIndex*3);if(deformer){if(weightTable[vertexIndex]!==undefined){var array=weightTable[vertexIndex];for(var j=0,jl=array.length;j<jl;j++){weights.push(array[j].weight);weightIndices.push(array[j].id);}}
if(weights.length>4){if(!displayedWeightsWarning){console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');displayedWeightsWarning=true;}
var WIndex=[0,0,0,0];var Weight=[0,0,0,0];weights.forEach(function(weight,weightIndex){var currentWeight=weight;var currentIndex=weightIndices[weightIndex];Weight.forEach(function(comparedWeight,comparedWeightIndex,comparedWeightArray){if(currentWeight>comparedWeight){comparedWeightArray[comparedWeightIndex]=currentWeight;currentWeight=comparedWeight;var tmp=WIndex[comparedWeightIndex];WIndex[comparedWeightIndex]=currentIndex;currentIndex=tmp;}});});weightIndices=WIndex;weights=Weight;}
for(var i=weights.length;i<4;++i){weights[i]=0;weightIndices[i]=0;}
vertex.skinWeights.fromArray(weights);vertex.skinIndices.fromArray(weightIndices);}
if(normalInfo){vertex.normal.fromArray(getData(polygonVertexIndex,polygonIndex,vertexIndex,normalInfo));}
if(uvInfo){vertex.uv.fromArray(getData(polygonVertexIndex,polygonIndex,vertexIndex,uvInfo));}
if(colorInfo){vertex.color.fromArray(getData(polygonVertexIndex,polygonIndex,vertexIndex,colorInfo));}
faceVertexBuffer.push(vertex);if(endOfFace){var face=new Face();face.genTrianglesFromVertices(faceVertexBuffer);if(materialInfo!==undefined){var materials=getData(polygonVertexIndex,polygonIndex,vertexIndex,materialInfo);face.materialIndex=materials[0];}else{face.materialIndex=0;}
geometry.faces.push(face);faceVertexBuffer=[];polygonIndex++;endOfFace=false;}}
var bufferInfo=geometry.flattenToBuffers();var geo=new THREE.BufferGeometry();geo.name=geometryNode.name;geo.addAttribute('position',new THREE.Float32BufferAttribute(bufferInfo.vertexBuffer,3));if(bufferInfo.normalBuffer.length>0){geo.addAttribute('normal',new THREE.Float32BufferAttribute(bufferInfo.normalBuffer,3));}
if(bufferInfo.uvBuffer.length>0){geo.addAttribute('uv',new THREE.Float32BufferAttribute(bufferInfo.uvBuffer,2));}
if(subNodes.LayerElementColor){geo.addAttribute('color',new THREE.Float32BufferAttribute(bufferInfo.colorBuffer,3));}
if(deformer){geo.addAttribute('skinIndex',new THREE.Float32BufferAttribute(bufferInfo.skinIndexBuffer,4));geo.addAttribute('skinWeight',new THREE.Float32BufferAttribute(bufferInfo.skinWeightBuffer,4));geo.FBX_Deformer=deformer;}
var materialIndexBuffer=bufferInfo.materialIndexBuffer;var prevMaterialIndex=materialIndexBuffer[0];var startIndex=0;for(var i=0;i<materialIndexBuffer.length;++i){if(materialIndexBuffer[i]!==prevMaterialIndex){geo.addGroup(startIndex,i-startIndex,prevMaterialIndex);prevMaterialIndex=materialIndexBuffer[i];startIndex=i;}}
return geo;}
function getNormals(NormalNode){var mappingType=NormalNode.properties.MappingInformationType;var referenceType=NormalNode.properties.ReferenceInformationType;var buffer=parseFloatArray(NormalNode.subNodes.Normals.properties.a);var indexBuffer=[];if(referenceType==='IndexToDirect'){if('NormalIndex'in NormalNode.subNodes){indexBuffer=parseIntArray(NormalNode.subNodes.NormalIndex.properties.a);}else if('NormalsIndex'in NormalNode.subNodes){indexBuffer=parseIntArray(NormalNode.subNodes.NormalsIndex.properties.a);}}
return{dataSize:3,buffer:buffer,indices:indexBuffer,mappingType:mappingType,referenceType:referenceType};}
function getUVs(UVNode){var mappingType=UVNode.properties.MappingInformationType;var referenceType=UVNode.properties.ReferenceInformationType;var buffer=parseFloatArray(UVNode.subNodes.UV.properties.a);var indexBuffer=[];if(referenceType==='IndexToDirect'){indexBuffer=parseIntArray(UVNode.subNodes.UVIndex.properties.a);}
return{dataSize:2,buffer:buffer,indices:indexBuffer,mappingType:mappingType,referenceType:referenceType};}
function getColors(ColorNode){var mappingType=ColorNode.properties.MappingInformationType;var referenceType=ColorNode.properties.ReferenceInformationType;var buffer=parseFloatArray(ColorNode.subNodes.Colors.properties.a);var indexBuffer=[];if(referenceType==='IndexToDirect'){indexBuffer=parseFloatArray(ColorNode.subNodes.ColorIndex.properties.a);}
return{dataSize:4,buffer:buffer,indices:indexBuffer,mappingType:mappingType,referenceType:referenceType};}
function getMaterials(MaterialNode){var mappingType=MaterialNode.properties.MappingInformationType;var referenceType=MaterialNode.properties.ReferenceInformationType;if(mappingType==='NoMappingInformation'){return{dataSize:1,buffer:[0],indices:[0],mappingType:'AllSame',referenceType:referenceType};}
var materialIndexBuffer=parseIntArray(MaterialNode.subNodes.Materials.properties.a);var materialIndices=[];for(var materialIndexBufferIndex=0,materialIndexBufferLength=materialIndexBuffer.length;materialIndexBufferIndex<materialIndexBufferLength;++materialIndexBufferIndex){materialIndices.push(materialIndexBufferIndex);}
return{dataSize:1,buffer:materialIndexBuffer,indices:materialIndices,mappingType:mappingType,referenceType:referenceType};}
var dataArray=[];var GetData={ByPolygonVertex:{Direct:function(polygonVertexIndex,polygonIndex,vertexIndex,infoObject){var from=(polygonVertexIndex*infoObject.dataSize);var to=(polygonVertexIndex*infoObject.dataSize)+infoObject.dataSize;return slice(dataArray,infoObject.buffer,from,to);},IndexToDirect:function(polygonVertexIndex,polygonIndex,vertexIndex,infoObject){var index=infoObject.indices[polygonVertexIndex];var from=(index*infoObject.dataSize);var to=(index*infoObject.dataSize)+infoObject.dataSize;return slice(dataArray,infoObject.buffer,from,to);}},ByPolygon:{Direct:function(polygonVertexIndex,polygonIndex,vertexIndex,infoObject){var from=polygonIndex*infoObject.dataSize;var to=polygonIndex*infoObject.dataSize+infoObject.dataSize;return slice(dataArray,infoObject.buffer,from,to);},IndexToDirect:function(polygonVertexIndex,polygonIndex,vertexIndex,infoObject){var index=infoObject.indices[polygonIndex];var from=index*infoObject.dataSize;var to=index*infoObject.dataSize+infoObject.dataSize;return slice(dataArray,infoObject.buffer,from,to);}},ByVertice:{Direct:function(polygonVertexIndex,polygonIndex,vertexIndex,infoObject){var from=(vertexIndex*infoObject.dataSize);var to=(vertexIndex*infoObject.dataSize)+infoObject.dataSize;return slice(dataArray,infoObject.buffer,from,to);}},AllSame:{IndexToDirect:function(polygonVertexIndex,polygonIndex,vertexIndex,infoObject){var from=infoObject.indices[0]*infoObject.dataSize;var to=infoObject.indices[0]*infoObject.dataSize+infoObject.dataSize;return slice(dataArray,infoObject.buffer,from,to);}}};function getData(polygonVertexIndex,polygonIndex,vertexIndex,infoObject){return GetData[infoObject.mappingType][infoObject.referenceType](polygonVertexIndex,polygonIndex,vertexIndex,infoObject);}
function parseNurbsGeometry(geometryNode){if(THREE.NURBSCurve===undefined){console.error('THREE.FBXLoader: The loader relies on THREE.NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');return new THREE.BufferGeometry();}
var order=parseInt(geometryNode.properties.Order);if(isNaN(order)){console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s',geometryNode.properties.Order,geometryNode.id);return new THREE.BufferGeometry();}
var degree=order-1;var knots=parseFloatArray(geometryNode.subNodes.KnotVector.properties.a);var controlPoints=[];var pointsValues=parseFloatArray(geometryNode.subNodes.Points.properties.a);for(var i=0,l=pointsValues.length;i<l;i+=4){controlPoints.push(new THREE.Vector4().fromArray(pointsValues,i));}
var startKnot,endKnot;if(geometryNode.properties.Form==='Closed'){controlPoints.push(controlPoints[0]);}else if(geometryNode.properties.Form==='Periodic'){startKnot=degree;endKnot=knots.length-1-startKnot;for(var i=0;i<degree;++i){controlPoints.push(controlPoints[i]);}}
var curve=new THREE.NURBSCurve(degree,knots,controlPoints,startKnot,endKnot);var vertices=curve.getPoints(controlPoints.length*7);var positions=new Float32Array(vertices.length*3);for(var i=0,l=vertices.length;i<l;++i){vertices[i].toArray(positions,i*3);}
var geometry=new THREE.BufferGeometry();geometry.addAttribute('position',new THREE.BufferAttribute(positions,3));return geometry;}
function parseScene(FBXTree,connections,deformers,geometryMap,materialMap){var sceneGraph=new THREE.Group();var ModelNode=FBXTree.Objects.subNodes.Model;var modelArray=[];var modelMap=new Map();for(var nodeID in ModelNode){var id=parseInt(nodeID);var node=ModelNode[nodeID];var conns=connections.get(id);var model=null;for(var i=0;i<conns.parents.length;++i){for(var FBX_ID in deformers){var deformer=deformers[FBX_ID];var subDeformers=deformer.map;var subDeformer=subDeformers[conns.parents[i].ID];if(subDeformer){var model2=model;model=new THREE.Bone();deformer.bones[subDeformer.index]=model;if(model2!==null)model.add(model2);}}}
if(!model){switch(node.attrType){case'Camera':var cameraAttribute;for(var childrenIndex=0,childrenLength=conns.children.length;childrenIndex<childrenLength;++childrenIndex){var childID=conns.children[childrenIndex].ID;var attr=FBXTree.Objects.subNodes.NodeAttribute[childID];if(attr!==undefined&&attr.properties!==undefined){cameraAttribute=attr.properties;}}
if(cameraAttribute===undefined){model=new THREE.Object3D();}else{var type=0;if(cameraAttribute.CameraProjectionType!==undefined&&(cameraAttribute.CameraProjectionType.value==='1'||cameraAttribute.CameraProjectionType.value===1)){type=1;}
var nearClippingPlane=1;if(cameraAttribute.NearPlane!==undefined){nearClippingPlane=cameraAttribute.NearPlane.value/1000;}
var farClippingPlane=1000;if(cameraAttribute.FarPlane!==undefined){farClippingPlane=cameraAttribute.FarPlane.value/1000;}
var width=window.innerWidth;var height=window.innerHeight;if(cameraAttribute.AspectWidth!==undefined&&cameraAttribute.AspectHeight!==undefined){width=parseFloat(cameraAttribute.AspectWidth.value);height=parseFloat(cameraAttribute.AspectHeight.value);}
var aspect=width/height;var fov=45;if(cameraAttribute.FieldOfView!==undefined){fov=parseFloat(cameraAttribute.FieldOfView.value);}
switch(type){case'0':case 0:model=new THREE.PerspectiveCamera(fov,aspect,nearClippingPlane,farClippingPlane);break;case'1':case 1:model=new THREE.OrthographicCamera(-width/2,width/2,height/2,-height/2,nearClippingPlane,farClippingPlane);break;default:console.warn('THREE.FBXLoader: Unknown camera type '+type+'.');model=new THREE.Object3D();break;}}
break;case'Light':var lightAttribute;for(var childrenIndex=0,childrenLength=conns.children.length;childrenIndex<childrenLength;++childrenIndex){var childID=conns.children[childrenIndex].ID;var attr=FBXTree.Objects.subNodes.NodeAttribute[childID];if(attr!==undefined&&attr.properties!==undefined){lightAttribute=attr.properties;}}
if(lightAttribute===undefined){model=new THREE.Object3D();}else{var type;if(lightAttribute.LightType===undefined){type=0;}else{type=lightAttribute.LightType.value;}
var color=0xffffff;if(lightAttribute.Color!==undefined){var temp=lightAttribute.Color.value.split(',');var r=parseFloat(temp[0]);var g=parseFloat(temp[1]);var b=parseFloat(temp[1]);color=new THREE.Color(r,g,b);}
var intensity=(lightAttribute.Intensity===undefined)?1:lightAttribute.Intensity.value/100;if(lightAttribute.CastLightOnObject!==undefined&&(lightAttribute.CastLightOnObject.value==='0'||lightAttribute.CastLightOnObject.value===0)){intensity=0;}
var distance=0;if(lightAttribute.FarAttenuationEnd!==undefined){if(lightAttribute.EnableFarAttenuation!==undefined&&(lightAttribute.EnableFarAttenuation.value==='0'||lightAttribute.EnableFarAttenuation.value===0)){distance=0;}else{distance=lightAttribute.FarAttenuationEnd.value/1000;}}
var decay=1;switch(type){case'0':case 0:model=new THREE.PointLight(color,intensity,distance,decay);break;case'1':case 1:model=new THREE.DirectionalLight(color,intensity);break;case'2':case 2:var angle=Math.PI/3;if(lightAttribute.InnerAngle!==undefined){angle=THREE.Math.degToRad(lightAttribute.InnerAngle.value);}
var penumbra=0;if(lightAttribute.OuterAngle!==undefined){penumbra=THREE.Math.degToRad(lightAttribute.OuterAngle.value);penumbra=Math.max(penumbra,1);}
model=new THREE.SpotLight(color,intensity,distance,angle,penumbra,decay);break;default:console.warn('THREE.FBXLoader: Unknown light type '+lightAttribute.LightType.value+', defaulting to a THREE.PointLight.');model=new THREE.PointLight(color,intensity);break;}
if(lightAttribute.CastShadows!==undefined&&(lightAttribute.CastShadows.value==='1'||lightAttribute.CastShadows.value===1)){model.castShadow=true;}}
break;case'Mesh':var geometry=null;var material=null;var materials=[];for(var childrenIndex=0,childrenLength=conns.children.length;childrenIndex<childrenLength;++childrenIndex){var child=conns.children[childrenIndex];if(geometryMap.has(child.ID)){geometry=geometryMap.get(child.ID);}
if(materialMap.has(child.ID)){materials.push(materialMap.get(child.ID));}}
if(materials.length>1){material=materials;}else if(materials.length>0){material=materials[0];}else{material=new THREE.MeshStandardMaterial({color:0x3300ff});materials.push(material);}
if('color'in geometry.attributes){for(var materialIndex=0,numMaterials=materials.length;materialIndex<numMaterials;++materialIndex){materials[materialIndex].vertexColors=THREE.VertexColors;}}
if(geometry.FBX_Deformer){for(var materialsIndex=0,materialsLength=materials.length;materialsIndex<materialsLength;++materialsIndex){materials[materialsIndex].skinning=true;}
model=new THREE.SkinnedMesh(geometry,material);}else{model=new THREE.Mesh(geometry,material);}
break;case'NurbsCurve':var geometry=null;for(var childrenIndex=0,childrenLength=conns.children.length;childrenIndex<childrenLength;++childrenIndex){var child=conns.children[childrenIndex];if(geometryMap.has(child.ID)){geometry=geometryMap.get(child.ID);}}
material=new THREE.LineBasicMaterial({color:0x3300ff,linewidth:5});model=new THREE.Line(geometry,material);break;default:model=new THREE.Object3D();break;}}
model.name=node.attrName.replace(/:/,'').replace(/_/,'').replace(/-/,'');model.FBX_ID=id;modelArray.push(model);modelMap.set(id,model);}
for(var modelArrayIndex=0,modelArrayLength=modelArray.length;modelArrayIndex<modelArrayLength;++modelArrayIndex){var model=modelArray[modelArrayIndex];var node=ModelNode[model.FBX_ID];if('Lcl_Translation'in node.properties){model.position.fromArray(parseFloatArray(node.properties.Lcl_Translation.value));}
if('Lcl_Rotation'in node.properties){var rotation=parseFloatArray(node.properties.Lcl_Rotation.value).map(degreeToRadian);rotation.push('ZYX');model.rotation.fromArray(rotation);}
if('Lcl_Scaling'in node.properties){model.scale.fromArray(parseFloatArray(node.properties.Lcl_Scaling.value));}
if('PreRotation'in node.properties){var preRotations=new THREE.Euler().setFromVector3(parseVector3(node.properties.PreRotation).multiplyScalar(DEG2RAD),'ZYX');preRotations=new THREE.Quaternion().setFromEuler(preRotations);var currentRotation=new THREE.Quaternion().setFromEuler(model.rotation);preRotations.multiply(currentRotation);model.rotation.setFromQuaternion(preRotations,'ZYX');}
if('LookAtProperty'in node.properties){var conns=connections.get(model.FBX_ID);for(var childrenIndex=0,childrenLength=conns.children.length;childrenIndex<childrenLength;++childrenIndex){var child=conns.children[childrenIndex];if(child.relationship==='LookAtProperty'||child.relationship===' "LookAtProperty'){var lookAtTarget=FBXTree.Objects.subNodes.Model[child.ID];if('Lcl_Translation'in lookAtTarget.properties){var pos=lookAtTarget.properties.Lcl_Translation.value.split(',').map(function(val){return parseFloat(val);});if(model.target!==undefined){model.target.position.set(pos[0],pos[1],pos[2]);sceneGraph.add(model.target);}else{model.lookAt(new THREE.Vector3(pos[0],pos[1],pos[2]));}}}}}
var conns=connections.get(model.FBX_ID);for(var parentIndex=0;parentIndex<conns.parents.length;parentIndex++){var pIndex=findIndex(modelArray,function(mod){return mod.FBX_ID===conns.parents[parentIndex].ID;});if(pIndex>-1){modelArray[pIndex].add(model);break;}}
if(model.parent===null){sceneGraph.add(model);}}
sceneGraph.updateMatrixWorld(true);var BindPoseNode=FBXTree.Objects.subNodes.Pose;for(var nodeID in BindPoseNode){if(BindPoseNode[nodeID].attrType==='BindPose'){BindPoseNode=BindPoseNode[nodeID];break;}}
if(BindPoseNode){var PoseNode=BindPoseNode.subNodes.PoseNode;var worldMatrices=new Map();for(var PoseNodeIndex=0,PoseNodeLength=PoseNode.length;PoseNodeIndex<PoseNodeLength;++PoseNodeIndex){var node=PoseNode[PoseNodeIndex];var rawMatWrd=parseMatrixArray(node.subNodes.Matrix.properties.a);worldMatrices.set(parseInt(node.id),rawMatWrd);}}
for(var FBX_ID in deformers){var deformer=deformers[FBX_ID];var subDeformers=deformer.map;for(var key in subDeformers){var subDeformer=subDeformers[key];var subDeformerIndex=subDeformer.index;var bone=deformer.bones[subDeformerIndex];if(!worldMatrices.has(bone.FBX_ID)){break;}
var mat=worldMatrices.get(bone.FBX_ID);bone.matrixWorld.copy(mat);}
deformer.skeleton=new THREE.Skeleton(deformer.bones);var conns=connections.get(deformer.FBX_ID);var parents=conns.parents;for(var parentsIndex=0,parentsLength=parents.length;parentsIndex<parentsLength;++parentsIndex){var parent=parents[parentsIndex];if(geometryMap.has(parent.ID)){var geoID=parent.ID;var geoConns=connections.get(geoID);for(var i=0;i<geoConns.parents.length;++i){if(modelMap.has(geoConns.parents[i].ID)){var model=modelMap.get(geoConns.parents[i].ID);model.bind(deformer.skeleton,model.matrixWorld);break;}}}}}
sceneGraph.updateMatrixWorld(true);sceneGraph.skeleton={bones:modelArray};var animations=parseAnimations(FBXTree,connections,sceneGraph);addAnimations(sceneGraph,animations);var ambientColor=FBXTree.GlobalSettings.properties.AmbientColor.value;var r=ambientColor[0];var g=ambientColor[1];var b=ambientColor[2];if(r!==0||g!==0||b!==0){var color=new THREE.Color(r,g,b);sceneGraph.add(new THREE.AmbientLight(color,1));}
return sceneGraph;}
function parseAnimations(FBXTree,connections,sceneGraph){var rawNodes=FBXTree.Objects.subNodes.AnimationCurveNode;var rawCurves=FBXTree.Objects.subNodes.AnimationCurve;var rawLayers=FBXTree.Objects.subNodes.AnimationLayer;var rawStacks=FBXTree.Objects.subNodes.AnimationStack;var returnObject={curves:new Map(),layers:{},stacks:{},length:0,fps:30,frames:0};var animationCurveNodes=[];for(var nodeID in rawNodes){if(nodeID.match(/\d+/)){var animationNode=parseAnimationNode(FBXTree,rawNodes[nodeID],connections,sceneGraph);animationCurveNodes.push(animationNode);}}
var tmpMap=new Map();for(var animationCurveNodeIndex=0;animationCurveNodeIndex<animationCurveNodes.length;++animationCurveNodeIndex){if(animationCurveNodes[animationCurveNodeIndex]===null){continue;}
tmpMap.set(animationCurveNodes[animationCurveNodeIndex].id,animationCurveNodes[animationCurveNodeIndex]);}
var animationCurves=[];for(nodeID in rawCurves){if(nodeID.match(/\d+/)){var animationCurve=parseAnimationCurve(rawCurves[nodeID]);if(!connections.has(animationCurve.id))continue;animationCurves.push(animationCurve);var firstParentConn=connections.get(animationCurve.id).parents[0];var firstParentID=firstParentConn.ID;var firstParentRelationship=firstParentConn.relationship;var axis='';if(firstParentRelationship.match(/X/)){axis='x';}else if(firstParentRelationship.match(/Y/)){axis='y';}else if(firstParentRelationship.match(/Z/)){axis='z';}else{continue;}
tmpMap.get(firstParentID).curves[axis]=animationCurve;}}
tmpMap.forEach(function(curveNode){var id=curveNode.containerBoneID;if(!returnObject.curves.has(id)){returnObject.curves.set(id,{T:null,R:null,S:null});}
returnObject.curves.get(id)[curveNode.attr]=curveNode;if(curveNode.attr==='R'){var curves=curveNode.curves;if(curves.x===null){curves.x={version:null,times:[0.0],values:[0.0]};}
if(curves.y===null){curves.y={version:null,times:[0.0],values:[0.0]};}
if(curves.z===null){curves.z={version:null,times:[0.0],values:[0.0]};}
curves.x.values=curves.x.values.map(degreeToRadian);curves.y.values=curves.y.values.map(degreeToRadian);curves.z.values=curves.z.values.map(degreeToRadian);if(curveNode.preRotations!==null){var preRotations=new THREE.Euler().setFromVector3(curveNode.preRotations,'ZYX');preRotations=new THREE.Quaternion().setFromEuler(preRotations);var frameRotation=new THREE.Euler();var frameRotationQuaternion=new THREE.Quaternion();for(var frame=0;frame<curves.x.times.length;++frame){frameRotation.set(curves.x.values[frame],curves.y.values[frame],curves.z.values[frame],'ZYX');frameRotationQuaternion.setFromEuler(frameRotation).premultiply(preRotations);frameRotation.setFromQuaternion(frameRotationQuaternion,'ZYX');curves.x.values[frame]=frameRotation.x;curves.y.values[frame]=frameRotation.y;curves.z.values[frame]=frameRotation.z;}}}});for(var nodeID in rawLayers){var layer=[];var children=connections.get(parseInt(nodeID)).children;for(var childIndex=0;childIndex<children.length;childIndex++){if(tmpMap.has(children[childIndex].ID)){var curveNode=tmpMap.get(children[childIndex].ID);var boneID=curveNode.containerBoneID;if(layer[boneID]===undefined){layer[boneID]={T:null,R:null,S:null};}
layer[boneID][curveNode.attr]=curveNode;}}
returnObject.layers[nodeID]=layer;}
for(var nodeID in rawStacks){var layers=[];var children=connections.get(parseInt(nodeID)).children;var timestamps={max:0,min:Number.MAX_VALUE};for(var childIndex=0;childIndex<children.length;++childIndex){var currentLayer=returnObject.layers[children[childIndex].ID];if(currentLayer!==undefined){layers.push(currentLayer);for(var currentLayerIndex=0,currentLayerLength=currentLayer.length;currentLayerIndex<currentLayerLength;++currentLayerIndex){var layer=currentLayer[currentLayerIndex];if(layer){getCurveNodeMaxMinTimeStamps(layer,timestamps);}}}}
if(timestamps.max>timestamps.min){returnObject.stacks[nodeID]={name:rawStacks[nodeID].attrName,layers:layers,length:timestamps.max-timestamps.min,frames:(timestamps.max-timestamps.min)*30};}}
return returnObject;}
function parseAnimationNode(FBXTree,animationCurveNode,connections,sceneGraph){var rawModels=FBXTree.Objects.subNodes.Model;var returnObject={id:animationCurveNode.id,attr:animationCurveNode.attrName,internalID:animationCurveNode.id,attrX:false,attrY:false,attrZ:false,containerBoneID:-1,containerID:-1,curves:{x:null,y:null,z:null},preRotations:null};if(returnObject.attr.match(/S|R|T/)){for(var attributeKey in animationCurveNode.properties){if(attributeKey.match(/X/)){returnObject.attrX=true;}
if(attributeKey.match(/Y/)){returnObject.attrY=true;}
if(attributeKey.match(/Z/)){returnObject.attrZ=true;}}}else{return null;}
var conns=connections.get(returnObject.id);var containerIndices=conns.parents;for(var containerIndicesIndex=containerIndices.length-1;containerIndicesIndex>=0;--containerIndicesIndex){var boneID=findIndex(sceneGraph.skeleton.bones,function(bone){return bone.FBX_ID===containerIndices[containerIndicesIndex].ID;});if(boneID>-1){returnObject.containerBoneID=boneID;returnObject.containerID=containerIndices[containerIndicesIndex].ID;var model=rawModels[returnObject.containerID.toString()];if('PreRotation'in model.properties){returnObject.preRotations=parseVector3(model.properties.PreRotation).multiplyScalar(Math.PI/180);}
break;}}
return returnObject;}
function parseAnimationCurve(animationCurve){return{version:null,id:animationCurve.id,internalID:animationCurve.id,times:parseFloatArray(animationCurve.subNodes.KeyTime.properties.a).map(convertFBXTimeToSeconds),values:parseFloatArray(animationCurve.subNodes.KeyValueFloat.properties.a),attrFlag:parseIntArray(animationCurve.subNodes.KeyAttrFlags.properties.a),attrData:parseFloatArray(animationCurve.subNodes.KeyAttrDataFloat.properties.a)};}
function getCurveNodeMaxMinTimeStamps(layer,timestamps){if(layer.R){getCurveMaxMinTimeStamp(layer.R.curves,timestamps);}
if(layer.S){getCurveMaxMinTimeStamp(layer.S.curves,timestamps);}
if(layer.T){getCurveMaxMinTimeStamp(layer.T.curves,timestamps);}}
function getCurveMaxMinTimeStamp(curve,timestamps){if(curve.x){getCurveAxisMaxMinTimeStamps(curve.x,timestamps);}
if(curve.y){getCurveAxisMaxMinTimeStamps(curve.y,timestamps);}
if(curve.z){getCurveAxisMaxMinTimeStamps(curve.z,timestamps);}}
function getCurveAxisMaxMinTimeStamps(axis,timestamps){timestamps.max=axis.times[axis.times.length-1]>timestamps.max?axis.times[axis.times.length-1]:timestamps.max;timestamps.min=axis.times[0]<timestamps.min?axis.times[0]:timestamps.min;}
function addAnimations(group,animations){if(group.animations===undefined){group.animations=[];}
var stacks=animations.stacks;for(var key in stacks){var stack=stacks[key];var animationData={name:stack.name,fps:30,length:stack.length,hierarchy:[]};var bones=group.skeleton.bones;for(var bonesIndex=0,bonesLength=bones.length;bonesIndex<bonesLength;++bonesIndex){var bone=bones[bonesIndex];var name=bone.name.replace(/.*:/,'');var parentIndex=findIndex(bones,function(parentBone){return bone.parent===parentBone;});animationData.hierarchy.push({parent:parentIndex,name:name,keys:[]});}
for(var frame=0;frame<=stack.frames;frame++){for(var bonesIndex=0,bonesLength=bones.length;bonesIndex<bonesLength;++bonesIndex){var bone=bones[bonesIndex];var boneIndex=bonesIndex;var animationNode=stack.layers[0][boneIndex];for(var hierarchyIndex=0,hierarchyLength=animationData.hierarchy.length;hierarchyIndex<hierarchyLength;++hierarchyIndex){var node=animationData.hierarchy[hierarchyIndex];if(node.name===bone.name){node.keys.push(generateKey(animations,animationNode,bone,frame));}}}}
group.animations.push(THREE.AnimationClip.parseAnimation(animationData,bones));}}
var euler=new THREE.Euler();var quaternion=new THREE.Quaternion();function generateKey(animations,animationNode,bone,frame){var key={time:frame/animations.fps,pos:bone.position.toArray(),rot:bone.quaternion.toArray(),scl:bone.scale.toArray()};if(animationNode===undefined)return key;try{if(hasCurve(animationNode,'T')&&hasKeyOnFrame(animationNode.T,frame)){key.pos=[animationNode.T.curves.x.values[frame],animationNode.T.curves.y.values[frame],animationNode.T.curves.z.values[frame]];}
if(hasCurve(animationNode,'R')&&hasKeyOnFrame(animationNode.R,frame)){var rotationX=animationNode.R.curves.x.values[frame];var rotationY=animationNode.R.curves.y.values[frame];var rotationZ=animationNode.R.curves.z.values[frame];quaternion.setFromEuler(euler.set(rotationX,rotationY,rotationZ,'ZYX'));key.rot=quaternion.toArray();}
if(hasCurve(animationNode,'S')&&hasKeyOnFrame(animationNode.S,frame)){key.scl=[animationNode.S.curves.x.values[frame],animationNode.S.curves.y.values[frame],animationNode.S.curves.z.values[frame]];}}catch(error){console.log('THREE.FBXLoader: ',bone);console.log('THREE.FBXLoader: ',error);}
return key;}
var AXES=['x','y','z'];function hasCurve(animationNode,attribute){if(animationNode===undefined){return false;}
var attributeNode=animationNode[attribute];if(!attributeNode){return false;}
return AXES.every(function(key){return attributeNode.curves[key]!==null;});}
function hasKeyOnFrame(attributeNode,frame){return AXES.every(function(key){return isKeyExistOnFrame(attributeNode.curves[key],frame);});}
function isKeyExistOnFrame(curve,frame){return curve.values[frame]!==undefined;}
function Vertex(){this.position=new THREE.Vector3();this.normal=new THREE.Vector3();this.uv=new THREE.Vector2();this.color=new THREE.Vector3();this.skinIndices=new THREE.Vector4(0,0,0,0);this.skinWeights=new THREE.Vector4(0,0,0,0);}
Object.assign(Vertex.prototype,{copy:function(target){var returnVar=target||new Vertex();returnVar.position.copy(this.position);returnVar.normal.copy(this.normal);returnVar.uv.copy(this.uv);returnVar.skinIndices.copy(this.skinIndices);returnVar.skinWeights.copy(this.skinWeights);return returnVar;},flattenToBuffers:function(vertexBuffer,normalBuffer,uvBuffer,colorBuffer,skinIndexBuffer,skinWeightBuffer){this.position.toArray(vertexBuffer,vertexBuffer.length);this.normal.toArray(normalBuffer,normalBuffer.length);this.uv.toArray(uvBuffer,uvBuffer.length);this.color.toArray(colorBuffer,colorBuffer.length);this.skinIndices.toArray(skinIndexBuffer,skinIndexBuffer.length);this.skinWeights.toArray(skinWeightBuffer,skinWeightBuffer.length);}});function Triangle(){this.vertices=[];}
Object.assign(Triangle.prototype,{copy:function(target){var returnVar=target||new Triangle();for(var i=0;i<this.vertices.length;++i){this.vertices[i].copy(returnVar.vertices[i]);}
return returnVar;},flattenToBuffers:function(vertexBuffer,normalBuffer,uvBuffer,colorBuffer,skinIndexBuffer,skinWeightBuffer){var vertices=this.vertices;for(var i=0,l=vertices.length;i<l;++i){vertices[i].flattenToBuffers(vertexBuffer,normalBuffer,uvBuffer,colorBuffer,skinIndexBuffer,skinWeightBuffer);}}});function Face(){this.triangles=[];this.materialIndex=0;}
Object.assign(Face.prototype,{copy:function(target){var returnVar=target||new Face();for(var i=0;i<this.triangles.length;++i){this.triangles[i].copy(returnVar.triangles[i]);}
returnVar.materialIndex=this.materialIndex;return returnVar;},genTrianglesFromVertices:function(vertexArray){for(var i=2;i<vertexArray.length;++i){var triangle=new Triangle();triangle.vertices[0]=vertexArray[0];triangle.vertices[1]=vertexArray[i-1];triangle.vertices[2]=vertexArray[i];this.triangles.push(triangle);}},flattenToBuffers:function(vertexBuffer,normalBuffer,uvBuffer,colorBuffer,skinIndexBuffer,skinWeightBuffer,materialIndexBuffer){var triangles=this.triangles;var materialIndex=this.materialIndex;for(var i=0,l=triangles.length;i<l;++i){triangles[i].flattenToBuffers(vertexBuffer,normalBuffer,uvBuffer,colorBuffer,skinIndexBuffer,skinWeightBuffer);append(materialIndexBuffer,[materialIndex,materialIndex,materialIndex]);}}});function Geometry(){this.faces=[];this.skeleton=null;}
Object.assign(Geometry.prototype,{flattenToBuffers:function(){var vertexBuffer=[];var normalBuffer=[];var uvBuffer=[];var colorBuffer=[];var skinIndexBuffer=[];var skinWeightBuffer=[];var materialIndexBuffer=[];var faces=this.faces;for(var i=0,l=faces.length;i<l;++i){faces[i].flattenToBuffers(vertexBuffer,normalBuffer,uvBuffer,colorBuffer,skinIndexBuffer,skinWeightBuffer,materialIndexBuffer);}
return{vertexBuffer:vertexBuffer,normalBuffer:normalBuffer,uvBuffer:uvBuffer,colorBuffer:colorBuffer,skinIndexBuffer:skinIndexBuffer,skinWeightBuffer:skinWeightBuffer,materialIndexBuffer:materialIndexBuffer};}});function TextParser(){}
Object.assign(TextParser.prototype,{getPrevNode:function(){return this.nodeStack[this.currentIndent-2];},getCurrentNode:function(){return this.nodeStack[this.currentIndent-1];},getCurrentProp:function(){return this.currentProp;},pushStack:function(node){this.nodeStack.push(node);this.currentIndent+=1;},popStack:function(){this.nodeStack.pop();this.currentIndent-=1;},setCurrentProp:function(val,name){this.currentProp=val;this.currentPropName=name;},parse:function(text){this.currentIndent=0;this.allNodes=new FBXTree();this.nodeStack=[];this.currentProp=[];this.currentPropName='';var split=text.split('\n');for(var lineNum=0,lineLength=split.length;lineNum<lineLength;lineNum++){var l=split[lineNum];if(l.match(/^[\s\t]*;/)){continue;}
if(l.match(/^[\s\t]*$/)){continue;}
var beginningOfNodeExp=new RegExp('^\\t{'+this.currentIndent+'}(\\w+):(.*){','');var match=l.match(beginningOfNodeExp);if(match){var nodeName=match[1].trim().replace(/^"/,'').replace(/"$/,'');var nodeAttrs=match[2].split(',');for(var i=0,l=nodeAttrs.length;i<l;i++){nodeAttrs[i]=nodeAttrs[i].trim().replace(/^"/,'').replace(/"$/,'');}
this.parseNodeBegin(l,nodeName,nodeAttrs||null);continue;}
var propExp=new RegExp('^\\t{'+(this.currentIndent)+'}(\\w+):[\\s\\t\\r\\n](.*)');var match=l.match(propExp);if(match){var propName=match[1].replace(/^"/,'').replace(/"$/,'').trim();var propValue=match[2].replace(/^"/,'').replace(/"$/,'').trim();if(propName==='Content'&&propValue===','){propValue=split[++lineNum].replace(/"/g,'').trim();}
this.parseNodeProperty(l,propName,propValue);continue;}
var endOfNodeExp=new RegExp('^\\t{'+(this.currentIndent-1)+'}}');if(l.match(endOfNodeExp)){this.nodeEnd();continue;}
if(l.match(/^[^\s\t}]/)){this.parseNodePropertyContinued(l);}}
return this.allNodes;},parseNodeBegin:function(line,nodeName,nodeAttrs){var node={'name':nodeName,properties:{},'subNodes':{}};var attrs=this.parseNodeAttr(nodeAttrs);var currentNode=this.getCurrentNode();if(this.currentIndent===0){this.allNodes.add(nodeName,node);}else{if(nodeName in currentNode.subNodes){var tmp=currentNode.subNodes[nodeName];if(this.isFlattenNode(currentNode.subNodes[nodeName])){if(attrs.id===''){currentNode.subNodes[nodeName]=[];currentNode.subNodes[nodeName].push(tmp);}else{currentNode.subNodes[nodeName]={};currentNode.subNodes[nodeName][tmp.id]=tmp;}}
if(attrs.id===''){currentNode.subNodes[nodeName].push(node);}else{currentNode.subNodes[nodeName][attrs.id]=node;}}else if(typeof attrs.id==='number'||attrs.id.match(/^\d+$/)){currentNode.subNodes[nodeName]={};currentNode.subNodes[nodeName][attrs.id]=node;}else{currentNode.subNodes[nodeName]=node;}}
if(nodeAttrs){node.id=attrs.id;node.attrName=attrs.name;node.attrType=attrs.type;}
this.pushStack(node);},parseNodeAttr:function(attrs){var id=attrs[0];if(attrs[0]!==''){id=parseInt(attrs[0]);if(isNaN(id)){id=attrs[0];}}
var name='',type='';if(attrs.length>1){name=attrs[1].replace(/^(\w+)::/,'');type=attrs[2];}
return{id:id,name:name,type:type};},parseNodeProperty:function(line,propName,propValue){var currentNode=this.getCurrentNode();var parentName=currentNode.name;if(parentName!==undefined){var propMatch=parentName.match(/Properties(\d)+/);if(propMatch){this.parseNodeSpecialProperty(line,propName,propValue);return;}}
if(propName==='C'){var connProps=propValue.split(',').slice(1);var from=parseInt(connProps[0]);var to=parseInt(connProps[1]);var rest=propValue.split(',').slice(3);propName='connections';propValue=[from,to];append(propValue,rest);if(currentNode.properties[propName]===undefined){currentNode.properties[propName]=[];}}
if(propName==='Node'){var id=parseInt(propValue);currentNode.properties.id=id;currentNode.id=id;}
if(propName in currentNode.properties){if(Array.isArray(currentNode.properties[propName])){currentNode.properties[propName].push(propValue);}else{currentNode.properties[propName]+=propValue;}}else{if(Array.isArray(currentNode.properties[propName])){currentNode.properties[propName].push(propValue);}else{currentNode.properties[propName]=propValue;}}
this.setCurrentProp(currentNode.properties,propName);},parseNodePropertyContinued:function(line){this.currentProp[this.currentPropName]+=line;},parseNodeSpecialProperty:function(line,propName,propValue){var props=propValue.split('",');for(var i=0,l=props.length;i<l;i++){props[i]=props[i].trim().replace(/^\"/,'').replace(/\s/,'_');}
var innerPropName=props[0];var innerPropType1=props[1];var innerPropType2=props[2];var innerPropFlag=props[3];var innerPropValue=props[4];switch(innerPropType1){case'int':innerPropValue=parseInt(innerPropValue);break;case'double':innerPropValue=parseFloat(innerPropValue);break;case'ColorRGB':case'Vector3D':innerPropValue=parseFloatArray(innerPropValue);break;}
this.getPrevNode().properties[innerPropName]={'type':innerPropType1,'type2':innerPropType2,'flag':innerPropFlag,'value':innerPropValue};this.setCurrentProp(this.getPrevNode().properties,innerPropName);},nodeEnd:function(){this.popStack();},isFlattenNode:function(node){return('subNodes'in node&&'properties'in node)?true:false;}});function BinaryParser(){}
Object.assign(BinaryParser.prototype,{parse:function(buffer){var reader=new BinaryReader(buffer);reader.skip(23);var version=reader.getUint32();console.log('THREE.FBXLoader: FBX binary version: '+version);var allNodes=new FBXTree();while(!this.endOfContent(reader)){var node=this.parseNode(reader,version);if(node!==null)allNodes.add(node.name,node);}
return allNodes;},endOfContent:function(reader){if(reader.size()%16===0){return((reader.getOffset()+160+16)&~0xf)>=reader.size();}else{return reader.getOffset()+160+16>=reader.size();}},parseNode:function(reader,version){var endOffset=(version>=7500)?reader.getUint64():reader.getUint32();var numProperties=(version>=7500)?reader.getUint64():reader.getUint32();var propertyListLen=(version>=7500)?reader.getUint64():reader.getUint32();var nameLen=reader.getUint8();var name=reader.getString(nameLen);if(endOffset===0)return null;var propertyList=[];for(var i=0;i<numProperties;i++){propertyList.push(this.parseProperty(reader));}
var id=propertyList.length>0?propertyList[0]:'';var attrName=propertyList.length>1?propertyList[1]:'';var attrType=propertyList.length>2?propertyList[2]:'';var subNodes={};var properties={};var isSingleProperty=false;if(numProperties===1&&reader.getOffset()===endOffset){isSingleProperty=true;}
while(endOffset>reader.getOffset()){var node=this.parseNode(reader,version);if(node===null)continue;if(node.singleProperty===true){var value=node.propertyList[0];if(Array.isArray(value)){node.properties[node.name]=node.propertyList[0];subNodes[node.name]=node;node.properties.a=value.toString();}else{properties[node.name]=value;}
continue;}
if(name==='Connections'&&node.name==='C'){var array=[];for(var i=1,il=node.propertyList.length;i<il;i++){array[i-1]=node.propertyList[i];}
if(properties.connections===undefined){properties.connections=[];}
properties.connections.push(array);continue;}
if(node.name.match(/^Properties\d+$/)){var keys=Object.keys(node.properties);for(var i=0,il=keys.length;i<il;i++){var key=keys[i];properties[key]=node.properties[key];}
continue;}
if(name.match(/^Properties\d+$/)&&node.name==='P'){var innerPropName=node.propertyList[0];var innerPropType1=node.propertyList[1];var innerPropType2=node.propertyList[2];var innerPropFlag=node.propertyList[3];var innerPropValue;if(innerPropName.indexOf('Lcl ')===0)innerPropName=innerPropName.replace('Lcl ','Lcl_');if(innerPropType1.indexOf('Lcl ')===0)innerPropType1=innerPropType1.replace('Lcl ','Lcl_');if(innerPropType1==='ColorRGB'||innerPropType1==='Vector'||innerPropType1==='Vector3D'||innerPropType1.indexOf('Lcl_')===0){innerPropValue=[node.propertyList[4],node.propertyList[5],node.propertyList[6]];}else{innerPropValue=node.propertyList[4];}
if(innerPropType1.indexOf('Lcl_')===0){innerPropValue=innerPropValue.toString();}
properties[innerPropName]={'type':innerPropType1,'type2':innerPropType2,'flag':innerPropFlag,'value':innerPropValue};continue;}
if(subNodes[node.name]===undefined){if(typeof node.id==='number'){subNodes[node.name]={};subNodes[node.name][node.id]=node;}else{subNodes[node.name]=node;}}else{if(node.id===''){if(!Array.isArray(subNodes[node.name])){subNodes[node.name]=[subNodes[node.name]];}
subNodes[node.name].push(node);}else{if(subNodes[node.name][node.id]===undefined){subNodes[node.name][node.id]=node;}else{if(!Array.isArray(subNodes[node.name][node.id])){subNodes[node.name][node.id]=[subNodes[node.name][node.id]];}
subNodes[node.name][node.id].push(node);}}}}
return{singleProperty:isSingleProperty,id:id,attrName:attrName,attrType:attrType,name:name,properties:properties,propertyList:propertyList,subNodes:subNodes};},parseProperty:function(reader){var type=reader.getChar();switch(type){case'F':return reader.getFloat32();case'D':return reader.getFloat64();case'L':return reader.getInt64();case'I':return reader.getInt32();case'Y':return reader.getInt16();case'C':return reader.getBoolean();case'f':case'd':case'l':case'i':case'b':var arrayLength=reader.getUint32();var encoding=reader.getUint32();var compressedLength=reader.getUint32();if(encoding===0){switch(type){case'f':return reader.getFloat32Array(arrayLength);case'd':return reader.getFloat64Array(arrayLength);case'l':return reader.getInt64Array(arrayLength);case'i':return reader.getInt32Array(arrayLength);case'b':return reader.getBooleanArray(arrayLength);}}
if(window.Zlib===undefined){throw new Error('THREE.FBXLoader: External library Inflate.min.js required, obtain or import from https://github.com/imaya/zlib.js');}
var inflate=new Zlib.Inflate(new Uint8Array(reader.getArrayBuffer(compressedLength)));var reader2=new BinaryReader(inflate.decompress().buffer);switch(type){case'f':return reader2.getFloat32Array(arrayLength);case'd':return reader2.getFloat64Array(arrayLength);case'l':return reader2.getInt64Array(arrayLength);case'i':return reader2.getInt32Array(arrayLength);case'b':return reader2.getBooleanArray(arrayLength);}
case'S':var length=reader.getUint32();return reader.getString(length);case'R':var length=reader.getUint32();return reader.getArrayBuffer(length);default:throw new Error('THREE.FBXLoader: Unknown property type '+type);}}});function BinaryReader(buffer,littleEndian){this.dv=new DataView(buffer);this.offset=0;this.littleEndian=(littleEndian!==undefined)?littleEndian:true;}
Object.assign(BinaryReader.prototype,{getOffset:function(){return this.offset;},size:function(){return this.dv.buffer.byteLength;},skip:function(length){this.offset+=length;},getBoolean:function(){return(this.getUint8()&1)===1;},getBooleanArray:function(size){var a=[];for(var i=0;i<size;i++){a.push(this.getBoolean());}
return a;},getInt8:function(){var value=this.dv.getInt8(this.offset);this.offset+=1;return value;},getInt8Array:function(size){var a=[];for(var i=0;i<size;i++){a.push(this.getInt8());}
return a;},getUint8:function(){var value=this.dv.getUint8(this.offset);this.offset+=1;return value;},getUint8Array:function(size){var a=[];for(var i=0;i<size;i++){a.push(this.getUint8());}
return a;},getInt16:function(){var value=this.dv.getInt16(this.offset,this.littleEndian);this.offset+=2;return value;},getInt16Array:function(size){var a=[];for(var i=0;i<size;i++){a.push(this.getInt16());}
return a;},getUint16:function(){var value=this.dv.getUint16(this.offset,this.littleEndian);this.offset+=2;return value;},getUint16Array:function(size){var a=[];for(var i=0;i<size;i++){a.push(this.getUint16());}
return a;},getInt32:function(){var value=this.dv.getInt32(this.offset,this.littleEndian);this.offset+=4;return value;},getInt32Array:function(size){var a=[];for(var i=0;i<size;i++){a.push(this.getInt32());}
return a;},getUint32:function(){var value=this.dv.getUint32(this.offset,this.littleEndian);this.offset+=4;return value;},getUint32Array:function(size){var a=[];for(var i=0;i<size;i++){a.push(this.getUint32());}
return a;},getInt64:function(){var low,high;if(this.littleEndian){low=this.getUint32();high=this.getUint32();}else{high=this.getUint32();low=this.getUint32();}
if(high&0x80000000){high=~high&0xFFFFFFFF;low=~low&0xFFFFFFFF;if(low===0xFFFFFFFF)high=(high+1)&0xFFFFFFFF;low=(low+1)&0xFFFFFFFF;return-(high*0x100000000+low);}
return high*0x100000000+low;},getInt64Array:function(size){var a=[];for(var i=0;i<size;i++){a.push(this.getInt64());}
return a;},getUint64:function(){var low,high;if(this.littleEndian){low=this.getUint32();high=this.getUint32();}else{high=this.getUint32();low=this.getUint32();}
return high*0x100000000+low;},getUint64Array:function(size){var a=[];for(var i=0;i<size;i++){a.push(this.getUint64());}
return a;},getFloat32:function(){var value=this.dv.getFloat32(this.offset,this.littleEndian);this.offset+=4;return value;},getFloat32Array:function(size){var a=[];for(var i=0;i<size;i++){a.push(this.getFloat32());}
return a;},getFloat64:function(){var value=this.dv.getFloat64(this.offset,this.littleEndian);this.offset+=8;return value;},getFloat64Array:function(size){var a=[];for(var i=0;i<size;i++){a.push(this.getFloat64());}
return a;},getArrayBuffer:function(size){var value=this.dv.buffer.slice(this.offset,this.offset+size);this.offset+=size;return value;},getChar:function(){return String.fromCharCode(this.getUint8());},getString:function(size){var s='';while(size>0){var value=this.getUint8();size--;if(value===0)break;s+=String.fromCharCode(value);}
s=decodeURIComponent(escape(s));this.skip(size);return s;}});function FBXTree(){}
Object.assign(FBXTree.prototype,{add:function(key,val){this[key]=val;},searchConnectionParent:function(id){if(this.__cache_search_connection_parent===undefined){this.__cache_search_connection_parent=[];}
if(this.__cache_search_connection_parent[id]!==undefined){return this.__cache_search_connection_parent[id];}else{this.__cache_search_connection_parent[id]=[];}
var conns=this.Connections.properties.connections;var results=[];for(var i=0;i<conns.length;++i){if(conns[i][0]==id){var res=conns[i][1]===0?-1:conns[i][1];results.push(res);}}
if(results.length>0){append(this.__cache_search_connection_parent[id],results);return results;}else{this.__cache_search_connection_parent[id]=[-1];return[-1];}},searchConnectionChildren:function(id){if(this.__cache_search_connection_children===undefined){this.__cache_search_connection_children=[];}
if(this.__cache_search_connection_children[id]!==undefined){return this.__cache_search_connection_children[id];}else{this.__cache_search_connection_children[id]=[];}
var conns=this.Connections.properties.connections;var res=[];for(var i=0;i<conns.length;++i){if(conns[i][1]==id){res.push(conns[i][0]===0?-1:conns[i][0]);}}
if(res.length>0){append(this.__cache_search_connection_children[id],res);return res;}else{this.__cache_search_connection_children[id]=[];return[];}},searchConnectionType:function(id,to){var key=id+','+to;if(this.__cache_search_connection_type===undefined){this.__cache_search_connection_type={};}
if(this.__cache_search_connection_type[key]!==undefined){return this.__cache_search_connection_type[key];}else{this.__cache_search_connection_type[key]='';}
var conns=this.Connections.properties.connections;for(var i=0;i<conns.length;++i){if(conns[i][0]==id&&conns[i][1]==to){this.__cache_search_connection_type[key]=conns[i][2];return conns[i][2];}}
this.__cache_search_connection_type[id]=null;return null;}});function isFbxFormatBinary(buffer){var CORRECT='Kaydara FBX Binary  \0';return buffer.byteLength>=CORRECT.length&&CORRECT===convertArrayBufferToString(buffer,0,CORRECT.length);}
function isFbxFormatASCII(text){var CORRECT=['K','a','y','d','a','r','a','\\','F','B','X','\\','B','i','n','a','r','y','\\','\\'];var cursor=0;function read(offset){var result=text[offset-1];text=text.slice(cursor+offset);cursor++;return result;}
for(var i=0;i<CORRECT.length;++i){var num=read(1);if(num===CORRECT[i]){return false;}}
return true;}
function getFbxVersion(text){var versionRegExp=/FBXVersion: (\d+)/;var match=text.match(versionRegExp);if(match){var version=parseInt(match[1]);return version;}
throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');}
function convertFBXTimeToSeconds(time){return time/46186158000;}
function parseFloatArray(string){var array=string.split(',');for(var i=0,l=array.length;i<l;i++){array[i]=parseFloat(array[i]);}
return array;}
function parseIntArray(string){var array=string.split(',');for(var i=0,l=array.length;i<l;i++){array[i]=parseInt(array[i]);}
return array;}
function parseVector3(property){return new THREE.Vector3().fromArray(property.value);}
function parseColor(property){return new THREE.Color().fromArray(property.value);}
function parseMatrixArray(floatString){return new THREE.Matrix4().fromArray(parseFloatArray(floatString));}
function convertArrayBufferToString(buffer,from,to){if(from===undefined)from=0;if(to===undefined)to=buffer.byteLength;var array=new Uint8Array(buffer,from,to);if(window.TextDecoder!==undefined){return new TextDecoder().decode(array);}
var s='';for(var i=0,il=array.length;i<il;i++){s+=String.fromCharCode(array[i]);}
return s;}
function degreeToRadian(value){return value*DEG2RAD;}
var DEG2RAD=Math.PI/180;function findIndex(array,func){for(var i=0,l=array.length;i<l;i++){if(func(array[i]))return i;}
return-1;}
function append(a,b){for(var i=0,j=a.length,l=b.length;i<l;i++,j++){a[j]=b[i];}}
function slice(a,b,from,to){for(var i=from,j=0;i<to;i++,j++){a[j]=b[i];}
return a;}})();THREE.GLTFLoader=(function(){function GLTFLoader(manager){this.manager=(manager!==undefined)?manager:THREE.DefaultLoadingManager;}
GLTFLoader.prototype={constructor:GLTFLoader,crossOrigin:'Anonymous',load:function(url,onLoad,onProgress,onError){var scope=this;var path=this.path&&(typeof this.path==='string')?this.path:THREE.Loader.prototype.extractUrlBase(url);var loader=new THREE.FileLoader(scope.manager);loader.setResponseType('arraybuffer');loader.load(url,function(data){try{scope.parse(data,path,onLoad,onError);}catch(e){if(onError!==undefined){onError(e.constructor===Error?e:new Error('THREE.GLTFLoader: Unable to parse model.'));}}},onProgress,onError);},setCrossOrigin:function(value){this.crossOrigin=value;},setPath:function(value){this.path=value;},parse:function(data,path,onLoad,onError){var content;var extensions={};var magic=convertUint8ArrayToString(new Uint8Array(data,0,4));if(magic===BINARY_EXTENSION_HEADER_MAGIC){extensions[EXTENSIONS.KHR_BINARY_GLTF]=new GLTFBinaryExtension(data);content=extensions[EXTENSIONS.KHR_BINARY_GLTF].content;}else{content=convertUint8ArrayToString(new Uint8Array(data));}
var json=JSON.parse(content);if(json.asset===undefined||json.asset.version[0]<2){onError(new Error('THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported.'));return;}
if(json.extensionsUsed){if(json.extensionsUsed.indexOf(EXTENSIONS.KHR_LIGHTS)>=0){extensions[EXTENSIONS.KHR_LIGHTS]=new GLTFLightsExtension(json);}
if(json.extensionsUsed.indexOf(EXTENSIONS.KHR_MATERIALS_COMMON)>=0){extensions[EXTENSIONS.KHR_MATERIALS_COMMON]=new GLTFMaterialsCommonExtension(json);}
if(json.extensionsUsed.indexOf(EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS)>=0){extensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]=new GLTFMaterialsPbrSpecularGlossinessExtension();}}
console.time('GLTFLoader');var parser=new GLTFParser(json,extensions,{path:path||this.path,crossOrigin:this.crossOrigin});parser.parse(function(scene,scenes,cameras,animations){console.timeEnd('GLTFLoader');var glTF={scene:scene,scenes:scenes,cameras:cameras,animations:animations};onLoad(glTF);},onError);}};function GLTFRegistry(){var objects={};return{get:function(key){return objects[key];},add:function(key,object){objects[key]=object;},remove:function(key){delete objects[key];},removeAll:function(){objects={};}};}
var EXTENSIONS={KHR_BINARY_GLTF:'KHR_binary_glTF',KHR_LIGHTS:'KHR_lights',KHR_MATERIALS_COMMON:'KHR_materials_common',KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:'KHR_materials_pbrSpecularGlossiness'};function GLTFLightsExtension(json){this.name=EXTENSIONS.KHR_LIGHTS;this.lights={};var extension=(json.extensions&&json.extensions[EXTENSIONS.KHR_LIGHTS])||{};var lights=extension.lights||{};for(var lightId in lights){var light=lights[lightId];var lightNode;var color=new THREE.Color().fromArray(light.color);switch(light.type){case'directional':lightNode=new THREE.DirectionalLight(color);lightNode.position.set(0,0,1);break;case'point':lightNode=new THREE.PointLight(color);break;case'spot':lightNode=new THREE.SpotLight(color);lightNode.position.set(0,0,1);break;case'ambient':lightNode=new THREE.AmbientLight(color);break;}
if(lightNode){if(light.constantAttenuation!==undefined){lightNode.intensity=light.constantAttenuation;}
if(light.linearAttenuation!==undefined){lightNode.distance=1/light.linearAttenuation;}
if(light.quadraticAttenuation!==undefined){lightNode.decay=light.quadraticAttenuation;}
if(light.fallOffAngle!==undefined){lightNode.angle=light.fallOffAngle;}
if(light.fallOffExponent!==undefined){console.warn('THREE.GLTFLoader:: light.fallOffExponent not currently supported.');}
lightNode.name=light.name||('light_'+lightId);this.lights[lightId]=lightNode;}}}
function GLTFMaterialsCommonExtension(json){this.name=EXTENSIONS.KHR_MATERIALS_COMMON;}
GLTFMaterialsCommonExtension.prototype.getMaterialType=function(material){var khrMaterial=material.extensions[this.name];switch(khrMaterial.type){case'commonBlinn':case'commonPhong':return THREE.MeshPhongMaterial;case'commonLambert':return THREE.MeshLambertMaterial;case'commonConstant':default:return THREE.MeshBasicMaterial;}};GLTFMaterialsCommonExtension.prototype.extendParams=function(materialParams,material,parser){var khrMaterial=material.extensions[this.name];var pending=[];var keys=[];switch(khrMaterial.type){case'commonBlinn':case'commonPhong':keys.push('diffuseFactor','diffuseTexture','specularFactor','specularTexture','shininessFactor');break;case'commonLambert':keys.push('diffuseFactor','diffuseTexture');break;case'commonConstant':default:break;}
var materialValues={};keys.forEach(function(v){if(khrMaterial[v]!==undefined)materialValues[v]=khrMaterial[v];});if(materialValues.diffuseFactor!==undefined){materialParams.color=new THREE.Color().fromArray(materialValues.diffuseFactor);materialParams.opacity=materialValues.diffuseFactor[3];}
if(materialValues.diffuseTexture!==undefined){pending.push(parser.assignTexture(materialParams,'map',materialValues.diffuseTexture.index));}
if(materialValues.specularFactor!==undefined){materialParams.specular=new THREE.Color().fromArray(materialValues.specularFactor);}
if(materialValues.specularTexture!==undefined){pending.push(parser.assignTexture(materialParams,'specularMap',materialValues.specularTexture.index));}
if(materialValues.shininessFactor!==undefined){materialParams.shininess=materialValues.shininessFactor;}
return Promise.all(pending);};var BINARY_EXTENSION_BUFFER_NAME='binary_glTF';var BINARY_EXTENSION_HEADER_MAGIC='glTF';var BINARY_EXTENSION_HEADER_LENGTH=12;var BINARY_EXTENSION_CHUNK_TYPES={JSON:0x4E4F534A,BIN:0x004E4942};function GLTFBinaryExtension(data){this.name=EXTENSIONS.KHR_BINARY_GLTF;this.content=null;this.body=null;var headerView=new DataView(data,0,BINARY_EXTENSION_HEADER_LENGTH);this.header={magic:convertUint8ArrayToString(new Uint8Array(data.slice(0,4))),version:headerView.getUint32(4,true),length:headerView.getUint32(8,true)};if(this.header.magic!==BINARY_EXTENSION_HEADER_MAGIC){throw new Error('THREE.GLTFLoader: Unsupported glTF-Binary header.');}else if(this.header.version<2.0){throw new Error('THREE.GLTFLoader: Legacy binary file detected. Use GLTFLoader instead.');}
var chunkView=new DataView(data,BINARY_EXTENSION_HEADER_LENGTH);var chunkIndex=0;while(chunkIndex<chunkView.byteLength){var chunkLength=chunkView.getUint32(chunkIndex,true);chunkIndex+=4;var chunkType=chunkView.getUint32(chunkIndex,true);chunkIndex+=4;if(chunkType===BINARY_EXTENSION_CHUNK_TYPES.JSON){var contentArray=new Uint8Array(data,BINARY_EXTENSION_HEADER_LENGTH+chunkIndex,chunkLength);this.content=convertUint8ArrayToString(contentArray);}else if(chunkType===BINARY_EXTENSION_CHUNK_TYPES.BIN){var byteOffset=BINARY_EXTENSION_HEADER_LENGTH+chunkIndex;this.body=data.slice(byteOffset,byteOffset+chunkLength);}
chunkIndex+=chunkLength;}
if(this.content===null){throw new Error('THREE.GLTFLoader: JSON content not found.');}}
function GLTFMaterialsPbrSpecularGlossinessExtension(){return{name:EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,getMaterialType:function(){return THREE.ShaderMaterial;},extendParams:function(params,material,parser){var pbrSpecularGlossiness=material.extensions[this.name];var shader=THREE.ShaderLib['standard'];var uniforms=THREE.UniformsUtils.clone(shader.uniforms);var specularMapParsFragmentChunk=['#ifdef USE_SPECULARMAP',' uniform sampler2D specularMap;','#endif'].join('\n');var glossinessMapParsFragmentChunk=['#ifdef USE_GLOSSINESSMAP',' uniform sampler2D glossinessMap;','#endif'].join('\n');var specularMapFragmentChunk=['vec3 specularFactor = specular;','#ifdef USE_SPECULARMAP',' vec4 texelSpecular = texture2D( specularMap, vUv );','  // reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture','  specularFactor *= texelSpecular.rgb;','#endif'].join('\n');var glossinessMapFragmentChunk=['float glossinessFactor = glossiness;','#ifdef USE_GLOSSINESSMAP','  vec4 texelGlossiness = texture2D( glossinessMap, vUv );','  // reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture','  glossinessFactor *= texelGlossiness.a;','#endif'].join('\n');var lightPhysicalFragmentChunk=['PhysicalMaterial material;','material.diffuseColor = diffuseColor.rgb;','material.specularRoughness = clamp( 1.0 - glossinessFactor, 0.04, 1.0 );','material.specularColor = specularFactor.rgb;',].join('\n');var fragmentShader=shader.fragmentShader.replace('#include <specularmap_fragment>','').replace('uniform float roughness;','uniform vec3 specular;').replace('uniform float metalness;','uniform float glossiness;').replace('#include <roughnessmap_pars_fragment>',specularMapParsFragmentChunk).replace('#include <metalnessmap_pars_fragment>',glossinessMapParsFragmentChunk).replace('#include <roughnessmap_fragment>',specularMapFragmentChunk).replace('#include <metalnessmap_fragment>',glossinessMapFragmentChunk).replace('#include <lights_physical_fragment>',lightPhysicalFragmentChunk);delete uniforms.roughness;delete uniforms.metalness;delete uniforms.roughnessMap;delete uniforms.metalnessMap;uniforms.specular={value:new THREE.Color().setHex(0x111111)};uniforms.glossiness={value:0.5};uniforms.specularMap={value:null};uniforms.glossinessMap={value:null};params.vertexShader=shader.vertexShader;params.fragmentShader=fragmentShader;params.uniforms=uniforms;params.defines={'STANDARD':''};params.color=new THREE.Color(1.0,1.0,1.0);params.opacity=1.0;var pending=[];if(Array.isArray(pbrSpecularGlossiness.diffuseFactor)){var array=pbrSpecularGlossiness.diffuseFactor;params.color.fromArray(array);params.opacity=array[3];}
if(pbrSpecularGlossiness.diffuseTexture!==undefined){pending.push(parser.assignTexture(params,'map',pbrSpecularGlossiness.diffuseTexture.index));}
params.emissive=new THREE.Color(0.0,0.0,0.0);params.glossiness=pbrSpecularGlossiness.glossinessFactor!==undefined?pbrSpecularGlossiness.glossinessFactor:1.0;params.specular=new THREE.Color(1.0,1.0,1.0);if(Array.isArray(pbrSpecularGlossiness.specularFactor)){params.specular.fromArray(pbrSpecularGlossiness.specularFactor);}
if(pbrSpecularGlossiness.specularGlossinessTexture!==undefined){var specGlossIndex=pbrSpecularGlossiness.specularGlossinessTexture.index;pending.push(parser.assignTexture(params,'glossinessMap',specGlossIndex));pending.push(parser.assignTexture(params,'specularMap',specGlossIndex));}
return Promise.all(pending);},createMaterial:function(params){var material=new THREE.ShaderMaterial({defines:params.defines,vertexShader:params.vertexShader,fragmentShader:params.fragmentShader,uniforms:params.uniforms,fog:true,lights:true,opacity:params.opacity,transparent:params.transparent});material.isGLTFSpecularGlossinessMaterial=true;material.color=params.color;material.map=params.map===undefined?null:params.map;material.lightMap=null;material.lightMapIntensity=1.0;material.aoMap=params.aoMap===undefined?null:params.aoMap;material.aoMapIntensity=1.0;material.emissive=params.emissive;material.emissiveIntensity=1.0;material.emissiveMap=params.emissiveMap===undefined?null:params.emissiveMap;material.bumpMap=params.bumpMap===undefined?null:params.bumpMap;material.bumpScale=1;material.normalMap=params.normalMap===undefined?null:params.normalMap;if(params.normalScale)material.normalScale=params.normalScale;material.displacementMap=null;material.displacementScale=1;material.displacementBias=0;material.specularMap=params.specularMap===undefined?null:params.specularMap;material.specular=params.specular;material.glossinessMap=params.glossinessMap===undefined?null:params.glossinessMap;material.glossiness=params.glossiness;material.alphaMap=null;material.envMap=params.envMap===undefined?null:params.envMap;material.envMapIntensity=1.0;material.refractionRatio=0.98;material.extensions.derivatives=true;return material;},refreshUniforms:function(renderer,scene,camera,geometry,material,group){var uniforms=material.uniforms;var defines=material.defines;uniforms.opacity.value=material.opacity;uniforms.diffuse.value.copy(material.color);uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);uniforms.map.value=material.map;uniforms.specularMap.value=material.specularMap;uniforms.alphaMap.value=material.alphaMap;uniforms.lightMap.value=material.lightMap;uniforms.lightMapIntensity.value=material.lightMapIntensity;uniforms.aoMap.value=material.aoMap;uniforms.aoMapIntensity.value=material.aoMapIntensity;var uvScaleMap;if(material.map){uvScaleMap=material.map;}else if(material.specularMap){uvScaleMap=material.specularMap;}else if(material.displacementMap){uvScaleMap=material.displacementMap;}else if(material.normalMap){uvScaleMap=material.normalMap;}else if(material.bumpMap){uvScaleMap=material.bumpMap;}else if(material.glossinessMap){uvScaleMap=material.glossinessMap;}else if(material.alphaMap){uvScaleMap=material.alphaMap;}else if(material.emissiveMap){uvScaleMap=material.emissiveMap;}
if(uvScaleMap!==undefined){if(uvScaleMap.isWebGLRenderTarget){uvScaleMap=uvScaleMap.texture;}
if(uvScaleMap.matrixAutoUpdate===true){var offset=uvScaleMap.offset;var repeat=uvScaleMap.repeat;var rotation=uvScaleMap.rotation;var center=uvScaleMap.center;uvScaleMap.matrix.setUvTransform(offset.x,offset.y,repeat.x,repeat.y,rotation,center.x,center.y);}
uniforms.uvTransform.value.copy(uvScaleMap.matrix);}
uniforms.envMap.value=material.envMap;uniforms.envMapIntensity.value=material.envMapIntensity;uniforms.flipEnvMap.value=(material.envMap&&material.envMap.isCubeTexture)?-1:1;uniforms.refractionRatio.value=material.refractionRatio;uniforms.specular.value.copy(material.specular);uniforms.glossiness.value=material.glossiness;uniforms.glossinessMap.value=material.glossinessMap;uniforms.emissiveMap.value=material.emissiveMap;uniforms.bumpMap.value=material.bumpMap;uniforms.normalMap.value=material.normalMap;uniforms.displacementMap.value=material.displacementMap;uniforms.displacementScale.value=material.displacementScale;uniforms.displacementBias.value=material.displacementBias;if(uniforms.glossinessMap.value!==null&&defines.USE_GLOSSINESSMAP===undefined){defines.USE_GLOSSINESSMAP='';defines.USE_ROUGHNESSMAP='';}
if(uniforms.glossinessMap.value===null&&defines.USE_GLOSSINESSMAP!==undefined){delete defines.USE_GLOSSINESSMAP;delete defines.USE_ROUGHNESSMAP;}}};}
var WEBGL_CONSTANTS={FLOAT:5126,FLOAT_MAT3:35675,FLOAT_MAT4:35676,FLOAT_VEC2:35664,FLOAT_VEC3:35665,FLOAT_VEC4:35666,LINEAR:9729,REPEAT:10497,SAMPLER_2D:35678,POINTS:0,LINES:1,LINE_LOOP:2,LINE_STRIP:3,TRIANGLES:4,TRIANGLE_STRIP:5,TRIANGLE_FAN:6,UNSIGNED_BYTE:5121,UNSIGNED_SHORT:5123};var WEBGL_TYPE={5126:Number,35675:THREE.Matrix3,35676:THREE.Matrix4,35664:THREE.Vector2,35665:THREE.Vector3,35666:THREE.Vector4,35678:THREE.Texture};var WEBGL_COMPONENT_TYPES={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array};var WEBGL_FILTERS={9728:THREE.NearestFilter,9729:THREE.LinearFilter,9984:THREE.NearestMipMapNearestFilter,9985:THREE.LinearMipMapNearestFilter,9986:THREE.NearestMipMapLinearFilter,9987:THREE.LinearMipMapLinearFilter};var WEBGL_WRAPPINGS={33071:THREE.ClampToEdgeWrapping,33648:THREE.MirroredRepeatWrapping,10497:THREE.RepeatWrapping};var WEBGL_TEXTURE_FORMATS={6406:THREE.AlphaFormat,6407:THREE.RGBFormat,6408:THREE.RGBAFormat,6409:THREE.LuminanceFormat,6410:THREE.LuminanceAlphaFormat};var WEBGL_TEXTURE_DATATYPES={5121:THREE.UnsignedByteType,32819:THREE.UnsignedShort4444Type,32820:THREE.UnsignedShort5551Type,33635:THREE.UnsignedShort565Type};var WEBGL_SIDES={1028:THREE.BackSide,1029:THREE.FrontSide};var WEBGL_DEPTH_FUNCS={512:THREE.NeverDepth,513:THREE.LessDepth,514:THREE.EqualDepth,515:THREE.LessEqualDepth,516:THREE.GreaterEqualDepth,517:THREE.NotEqualDepth,518:THREE.GreaterEqualDepth,519:THREE.AlwaysDepth};var WEBGL_BLEND_EQUATIONS={32774:THREE.AddEquation,32778:THREE.SubtractEquation,32779:THREE.ReverseSubtractEquation};var WEBGL_BLEND_FUNCS={0:THREE.ZeroFactor,1:THREE.OneFactor,768:THREE.SrcColorFactor,769:THREE.OneMinusSrcColorFactor,770:THREE.SrcAlphaFactor,771:THREE.OneMinusSrcAlphaFactor,772:THREE.DstAlphaFactor,773:THREE.OneMinusDstAlphaFactor,774:THREE.DstColorFactor,775:THREE.OneMinusDstColorFactor,776:THREE.SrcAlphaSaturateFactor};var WEBGL_TYPE_SIZES={'SCALAR':1,'VEC2':2,'VEC3':3,'VEC4':4,'MAT2':4,'MAT3':9,'MAT4':16};var PATH_PROPERTIES={scale:'scale',translation:'position',rotation:'quaternion',weights:'morphTargetInfluences'};var INTERPOLATION={CATMULLROMSPLINE:THREE.InterpolateSmooth,CUBICSPLINE:THREE.InterpolateSmooth,LINEAR:THREE.InterpolateLinear,STEP:THREE.InterpolateDiscrete};var STATES_ENABLES={2884:'CULL_FACE',2929:'DEPTH_TEST',3042:'BLEND',3089:'SCISSOR_TEST',32823:'POLYGON_OFFSET_FILL',32926:'SAMPLE_ALPHA_TO_COVERAGE'};var ALPHA_MODES={OPAQUE:'OPAQUE',MASK:'MASK',BLEND:'BLEND'};function _each(object,callback,thisObj){if(!object){return Promise.resolve();}
var results;var fns=[];if(Object.prototype.toString.call(object)==='[object Array]'){results=[];var length=object.length;for(var idx=0;idx<length;idx++){var value=callback.call(thisObj||this,object[idx],idx);if(value){fns.push(value);if(value instanceof Promise){value.then(function(key,value){results[key]=value;}.bind(this,idx));}else{results[idx]=value;}}}}else{results={};for(var key in object){if(object.hasOwnProperty(key)){var value=callback.call(thisObj||this,object[key],key);if(value){fns.push(value);if(value instanceof Promise){value.then(function(key,value){results[key]=value;}.bind(this,key));}else{results[key]=value;}}}}}
return Promise.all(fns).then(function(){return results;});}
function resolveURL(url,path){if(typeof url!=='string'||url==='')
return'';if(/^(https?:)?\/\//i.test(url)){return url;}
if(/^data:.*,.*$/i.test(url)){return url;}
if(/^blob:.*$/i.test(url)){return url;}
return(path||'')+url;}
function convertUint8ArrayToString(array){if(window.TextDecoder!==undefined){return new TextDecoder().decode(array);}
var s='';for(var i=0,il=array.length;i<il;i++){s+=String.fromCharCode(array[i]);}
return s;}
function createDefaultMaterial(){return new THREE.MeshStandardMaterial({color:0xFFFFFF,emissive:0x000000,metalness:1,roughness:1,transparent:false,depthTest:true,side:THREE.FrontSide});}
function addMorphTargets(mesh,meshDef,primitiveDef,dependencies){var geometry=mesh.geometry;var material=mesh.material;var targets=primitiveDef.targets;var morphAttributes=geometry.morphAttributes;morphAttributes.position=[];morphAttributes.normal=[];material.morphTargets=true;for(var i=0,il=targets.length;i<il;i++){var target=targets[i];var attributeName='morphTarget'+i;var positionAttribute,normalAttribute;if(target.POSITION!==undefined){positionAttribute=dependencies.accessors[target.POSITION].clone();var position=geometry.attributes.position;for(var j=0,jl=positionAttribute.count;j<jl;j++){positionAttribute.setXYZ(j,positionAttribute.getX(j)+position.getX(j),positionAttribute.getY(j)+position.getY(j),positionAttribute.getZ(j)+position.getZ(j));}}else{positionAttribute=geometry.attributes.position.clone();}
if(target.NORMAL!==undefined){material.morphNormals=true;normalAttribute=dependencies.accessors[target.NORMAL].clone();var normal=geometry.attributes.normal;for(var j=0,jl=normalAttribute.count;j<jl;j++){normalAttribute.setXYZ(j,normalAttribute.getX(j)+normal.getX(j),normalAttribute.getY(j)+normal.getY(j),normalAttribute.getZ(j)+normal.getZ(j));}}else{normalAttribute=geometry.attributes.normal.clone();}
if(target.TANGENT!==undefined){}
positionAttribute.name=attributeName;normalAttribute.name=attributeName;morphAttributes.position.push(positionAttribute);morphAttributes.normal.push(normalAttribute);}
mesh.updateMorphTargets();if(meshDef.weights!==undefined){for(var i=0,il=meshDef.weights.length;i<il;i++){mesh.morphTargetInfluences[i]=meshDef.weights[i];}}}
function GLTFParser(json,extensions,options){this.json=json||{};this.extensions=extensions||{};this.options=options||{};this.cache=new GLTFRegistry();}
GLTFParser.prototype._withDependencies=function(dependencies){var _dependencies={};for(var i=0;i<dependencies.length;i++){var dependency=dependencies[i];var fnName='load'+dependency.charAt(0).toUpperCase()+dependency.slice(1);var cached=this.cache.get(dependency);if(cached!==undefined){_dependencies[dependency]=cached;}else if(this[fnName]){var fn=this[fnName]();this.cache.add(dependency,fn);_dependencies[dependency]=fn;}}
return _each(_dependencies,function(dependency){return dependency;});};GLTFParser.prototype.parse=function(onLoad,onError){var json=this.json;this.cache.removeAll();this._withDependencies(['scenes','cameras','animations']).then(function(dependencies){var scenes=[];for(var i=0;i<dependencies.scenes.length;i++){scenes.push(dependencies.scenes[i]);}
var scene=json.scene!==undefined?dependencies.scenes[json.scene]:scenes[0];var cameras=[];dependencies.cameras=dependencies.cameras||[];for(var i=0;i<dependencies.cameras.length;i++){var camera=dependencies.cameras[i];cameras.push(camera);}
var animations=[];dependencies.animations=dependencies.animations||[];for(var i=0;i<dependencies.animations.length;i++){animations.push(dependencies.animations[i]);}
onLoad(scene,scenes,cameras,animations);}).catch(onError);};GLTFParser.prototype.getDependency=function(type,index){var cacheKey=type+':'+index;var dependency=this.cache.get(cacheKey);if(!dependency){var fnName='load'+type.charAt(0).toUpperCase()+type.slice(1);dependency=this[fnName](index);this.cache.add(cacheKey,dependency);}
return dependency;};GLTFParser.prototype.loadBuffer=function(bufferIndex){var bufferDef=this.json.buffers[bufferIndex];if(bufferDef.type&&bufferDef.type!=='arraybuffer'){throw new Error('THREE.GLTFLoader: %s buffer type is not supported.',bufferDef.type);}
if(bufferDef.uri===undefined&&bufferIndex===0){return Promise.resolve(this.extensions[EXTENSIONS.KHR_BINARY_GLTF].body);}
var options=this.options;return new Promise(function(resolve){var loader=new THREE.FileLoader();loader.setResponseType('arraybuffer');loader.load(resolveURL(bufferDef.uri,options.path),resolve);});};GLTFParser.prototype.loadBufferView=function(bufferViewIndex){var bufferViewDef=this.json.bufferViews[bufferViewIndex];return this.getDependency('buffer',bufferViewDef.buffer).then(function(buffer){var byteLength=bufferViewDef.byteLength||0;var byteOffset=bufferViewDef.byteOffset||0;return buffer.slice(byteOffset,byteOffset+byteLength);});};GLTFParser.prototype.loadAccessors=function(){var parser=this;var json=this.json;return _each(json.accessors,function(accessor){return parser.getDependency('bufferView',accessor.bufferView).then(function(bufferView){var itemSize=WEBGL_TYPE_SIZES[accessor.type];var TypedArray=WEBGL_COMPONENT_TYPES[accessor.componentType];var elementBytes=TypedArray.BYTES_PER_ELEMENT;var itemBytes=elementBytes*itemSize;var byteStride=json.bufferViews[accessor.bufferView].byteStride;var array;if(byteStride&&byteStride!==itemBytes){array=new TypedArray(bufferView);var ib=new THREE.InterleavedBuffer(array,byteStride/elementBytes);return new THREE.InterleavedBufferAttribute(ib,itemSize,accessor.byteOffset/elementBytes);}else{array=new TypedArray(bufferView,accessor.byteOffset,accessor.count*itemSize);return new THREE.BufferAttribute(array,itemSize);}});});};GLTFParser.prototype.loadTexture=function(textureIndex){var parser=this;var json=this.json;var options=this.options;var URL=window.URL||window.webkitURL;var textureDef=json.textures[textureIndex];var source=json.images[textureDef.source];var sourceURI=source.uri;var isObjectURL=false;if(source.bufferView!==undefined){sourceURI=parser.getDependency('bufferView',source.bufferView).then(function(bufferView){isObjectURL=true;var blob=new Blob([bufferView],{type:source.mimeType});sourceURI=URL.createObjectURL(blob);return sourceURI;});}
return Promise.resolve(sourceURI).then(function(sourceURI){var textureLoader=THREE.Loader.Handlers.get(sourceURI)||new THREE.TextureLoader();textureLoader.setCrossOrigin(options.crossOrigin);return new Promise(function(resolve,reject){textureLoader.load(resolveURL(sourceURI,options.path),resolve,undefined,reject);});}).then(function(texture){if(isObjectURL===true){URL.revokeObjectURL(sourceURI);}
texture.flipY=false;if(textureDef.name!==undefined)texture.name=textureDef.name;texture.format=textureDef.format!==undefined?WEBGL_TEXTURE_FORMATS[textureDef.format]:THREE.RGBAFormat;if(textureDef.internalFormat!==undefined&&texture.format!==WEBGL_TEXTURE_FORMATS[textureDef.internalFormat]){console.warn('THREE.GLTFLoader: Three.js does not support texture internalFormat which is different from texture format. '+'internalFormat will be forced to be the same value as format.');}
texture.type=textureDef.type!==undefined?WEBGL_TEXTURE_DATATYPES[textureDef.type]:THREE.UnsignedByteType;var samplers=json.samplers||{};var sampler=samplers[textureDef.sampler]||{};texture.magFilter=WEBGL_FILTERS[sampler.magFilter]||THREE.LinearFilter;texture.minFilter=WEBGL_FILTERS[sampler.minFilter]||THREE.LinearMipMapLinearFilter;texture.wrapS=WEBGL_WRAPPINGS[sampler.wrapS]||THREE.RepeatWrapping;texture.wrapT=WEBGL_WRAPPINGS[sampler.wrapT]||THREE.RepeatWrapping;return texture;});};GLTFParser.prototype.assignTexture=function(materialParams,textureName,textureIndex){return this.getDependency('texture',textureIndex).then(function(texture){materialParams[textureName]=texture;});};GLTFParser.prototype.loadMaterials=function(){var parser=this;var json=this.json;var extensions=this.extensions;return _each(json.materials,function(material){var materialType;var materialParams={};var materialExtensions=material.extensions||{};var pending=[];if(materialExtensions[EXTENSIONS.KHR_MATERIALS_COMMON]){var khcExtension=extensions[EXTENSIONS.KHR_MATERIALS_COMMON];materialType=khcExtension.getMaterialType(material);pending.push(khcExtension.extendParams(materialParams,material,parser));}else if(materialExtensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]){var sgExtension=extensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS];materialType=sgExtension.getMaterialType(material);pending.push(sgExtension.extendParams(materialParams,material,parser));}else if(material.pbrMetallicRoughness!==undefined){materialType=THREE.MeshStandardMaterial;var metallicRoughness=material.pbrMetallicRoughness;materialParams.color=new THREE.Color(1.0,1.0,1.0);materialParams.opacity=1.0;if(Array.isArray(metallicRoughness.baseColorFactor)){var array=metallicRoughness.baseColorFactor;materialParams.color.fromArray(array);materialParams.opacity=array[3];}
if(metallicRoughness.baseColorTexture!==undefined){pending.push(parser.assignTexture(materialParams,'map',metallicRoughness.baseColorTexture.index));}
materialParams.metalness=metallicRoughness.metallicFactor!==undefined?metallicRoughness.metallicFactor:1.0;materialParams.roughness=metallicRoughness.roughnessFactor!==undefined?metallicRoughness.roughnessFactor:1.0;if(metallicRoughness.metallicRoughnessTexture!==undefined){var textureIndex=metallicRoughness.metallicRoughnessTexture.index;pending.push(parser.assignTexture(materialParams,'metalnessMap',textureIndex));pending.push(parser.assignTexture(materialParams,'roughnessMap',textureIndex));}}else{materialType=THREE.MeshPhongMaterial;}
if(material.doubleSided===true){materialParams.side=THREE.DoubleSide;}
var alphaMode=material.alphaMode||ALPHA_MODES.OPAQUE;if(alphaMode!==ALPHA_MODES.OPAQUE){materialParams.transparent=true;if(alphaMode===ALPHA_MODES.MASK){materialParams.alphaTest=material.alphaCutoff||0.5;}}else{materialParams.transparent=false;}
if(material.normalTexture!==undefined){pending.push(parser.assignTexture(materialParams,'normalMap',material.normalTexture.index));materialParams.normalScale=new THREE.Vector2(1,1);if(material.normalTexture.scale!==undefined){materialParams.normalScale.set(material.normalTexture.scale,material.normalTexture.scale);}}
if(material.occlusionTexture!==undefined){pending.push(parser.assignTexture(materialParams,'aoMap',material.occlusionTexture.index));if(material.occlusionTexture.strength!==undefined){materialParams.aoMapIntensity=material.occlusionTexture.strength;}}
if(material.emissiveFactor!==undefined){if(materialType===THREE.MeshBasicMaterial){materialParams.color=new THREE.Color().fromArray(material.emissiveFactor);}else{materialParams.emissive=new THREE.Color().fromArray(material.emissiveFactor);}}
if(material.emissiveTexture!==undefined){if(materialType===THREE.MeshBasicMaterial){pending.push(parser.assignTexture(materialParams,'map',material.emissiveTexture.index));}else{pending.push(parser.assignTexture(materialParams,'emissiveMap',material.emissiveTexture.index));}}
return Promise.all(pending).then(function(){var _material;if(materialType===THREE.ShaderMaterial){_material=extensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].createMaterial(materialParams);}else{_material=new materialType(materialParams);}
if(material.name!==undefined)_material.name=material.name;if(_material.normalScale){_material.normalScale.x=-_material.normalScale.x;}
if(_material.map)_material.map.encoding=THREE.sRGBEncoding;if(_material.emissiveMap)_material.emissiveMap.encoding=THREE.sRGBEncoding;if(material.extras)_material.userData=material.extras;return _material;});});};GLTFParser.prototype.loadGeometries=function(primitives){return this._withDependencies(['accessors',]).then(function(dependencies){return _each(primitives,function(primitive){var geometry=new THREE.BufferGeometry();var attributes=primitive.attributes;for(var attributeId in attributes){var attributeEntry=attributes[attributeId];if(attributeEntry===undefined)return;var bufferAttribute=dependencies.accessors[attributeEntry];switch(attributeId){case'POSITION':geometry.addAttribute('position',bufferAttribute);break;case'NORMAL':geometry.addAttribute('normal',bufferAttribute);break;case'TEXCOORD_0':case'TEXCOORD0':case'TEXCOORD':geometry.addAttribute('uv',bufferAttribute);break;case'TEXCOORD_1':geometry.addAttribute('uv2',bufferAttribute);break;case'COLOR_0':case'COLOR0':case'COLOR':geometry.addAttribute('color',bufferAttribute);break;case'WEIGHTS_0':case'WEIGHT':geometry.addAttribute('skinWeight',bufferAttribute);break;case'JOINTS_0':case'JOINT':geometry.addAttribute('skinIndex',bufferAttribute);break;}}
if(primitive.indices!==undefined){geometry.setIndex(dependencies.accessors[primitive.indices]);}
return geometry;});});};GLTFParser.prototype.loadMeshes=function(){var scope=this;var json=this.json;return this._withDependencies(['accessors','materials']).then(function(dependencies){return _each(json.meshes,function(meshDef,meshIndex){var group=new THREE.Group();var primitives=meshDef.primitives||[];return scope.loadGeometries(primitives).then(function(geometries){for(var i=0;i<primitives.length;i++){var primitive=primitives[i];var geometry=geometries[i];var material=primitive.material===undefined?createDefaultMaterial():dependencies.materials[primitive.material];if(material.aoMap&&geometry.attributes.uv2===undefined&&geometry.attributes.uv!==undefined){console.log('THREE.GLTFLoader: Duplicating UVs to support aoMap.');geometry.addAttribute('uv2',new THREE.BufferAttribute(geometry.attributes.uv.array,2));}
var useVertexColors=geometry.attributes.color!==undefined;var useFlatShading=geometry.attributes.normal===undefined;if(useVertexColors||useFlatShading){material=material.clone();}
if(useVertexColors){material.vertexColors=THREE.VertexColors;material.needsUpdate=true;}
if(useFlatShading){material.flatShading=true;}
var mesh;if(primitive.mode===WEBGL_CONSTANTS.TRIANGLES||primitive.mode===undefined){mesh=new THREE.Mesh(geometry,material);}else if(primitive.mode===WEBGL_CONSTANTS.TRIANGLE_STRIP){mesh=new THREE.Mesh(geometry,material);mesh.drawMode=THREE.TriangleStripDrawMode;}else if(primitive.mode===WEBGL_CONSTANTS.TRIANGLE_FAN){mesh=new THREE.Mesh(geometry,material);mesh.drawMode=THREE.TriangleFanDrawMode;}else if(primitive.mode===WEBGL_CONSTANTS.LINES){mesh=new THREE.LineSegments(geometry,material);}else if(primitive.mode===WEBGL_CONSTANTS.LINE_STRIP){mesh=new THREE.Line(geometry,material);}else if(primitive.mode===WEBGL_CONSTANTS.LINE_LOOP){mesh=new THREE.LineLoop(geometry,material);}else if(primitive.mode===WEBGL_CONSTANTS.POINTS){mesh=new THREE.Points(geometry,material);}else{throw new Error('THREE.GLTFLoader: Primitive mode unsupported: ',primitive.mode);}
mesh.name=meshDef.name||('mesh_'+meshIndex);mesh.name+=i>0?('_'+i):'';if(primitive.targets!==undefined){addMorphTargets(mesh,meshDef,primitive,dependencies);}
if(primitive.extras)mesh.userData=primitive.extras;group.add(mesh);}
return group;});});});};GLTFParser.prototype.loadCameras=function(){var json=this.json;return _each(json.cameras,function(camera){var _camera;var params=camera[camera.type];if(!params){console.warn('THREE.GLTFLoader: Missing camera parameters.');return;}
if(camera.type==='perspective'){var aspectRatio=params.aspectRatio||1;var xfov=params.yfov*aspectRatio;_camera=new THREE.PerspectiveCamera(THREE.Math.radToDeg(xfov),aspectRatio,params.znear||1,params.zfar||2e6);}else if(camera.type==='orthographic'){_camera=new THREE.OrthographicCamera(params.xmag/-2,params.xmag/2,params.ymag/2,params.ymag/-2,params.znear,params.zfar);}
if(camera.name!==undefined)_camera.name=camera.name;if(camera.extras)_camera.userData=camera.extras;return _camera;});};GLTFParser.prototype.loadSkins=function(){var json=this.json;return this._withDependencies(['accessors']).then(function(dependencies){return _each(json.skins,function(skin){var _skin={joints:skin.joints,inverseBindMatrices:dependencies.accessors[skin.inverseBindMatrices]};return _skin;});});};GLTFParser.prototype.loadAnimations=function(){var json=this.json;return this._withDependencies(['accessors','nodes']).then(function(dependencies){return _each(json.animations,function(animation,animationId){var tracks=[];for(var i=0;i<animation.channels.length;i++){var channel=animation.channels[i];var sampler=animation.samplers[channel.sampler];if(sampler){var target=channel.target;var name=target.node!==undefined?target.node:target.id;var input=animation.parameters!==undefined?animation.parameters[sampler.input]:sampler.input;var output=animation.parameters!==undefined?animation.parameters[sampler.output]:sampler.output;var inputAccessor=dependencies.accessors[input];var outputAccessor=dependencies.accessors[output];var node=dependencies.nodes[name];if(node){node.updateMatrix();node.matrixAutoUpdate=true;var TypedKeyframeTrack;switch(PATH_PROPERTIES[target.path]){case PATH_PROPERTIES.weights:TypedKeyframeTrack=THREE.NumberKeyframeTrack;break;case PATH_PROPERTIES.rotation:TypedKeyframeTrack=THREE.QuaternionKeyframeTrack;break;case PATH_PROPERTIES.position:case PATH_PROPERTIES.scale:default:TypedKeyframeTrack=THREE.VectorKeyframeTrack;break;}
var targetName=node.name?node.name:node.uuid;if(sampler.interpolation==='CATMULLROMSPLINE'){console.warn('THREE.GLTFLoader: CATMULLROMSPLINE interpolation is not supported. Using CUBICSPLINE instead.');}
var interpolation=sampler.interpolation!==undefined?INTERPOLATION[sampler.interpolation]:THREE.InterpolateLinear;var targetNames=[];if(PATH_PROPERTIES[target.path]===PATH_PROPERTIES.weights){node.traverse(function(object){if(object.isMesh===true&&object.material.morphTargets===true){targetNames.push(object.name?object.name:object.uuid);}});}else{targetNames.push(targetName);}
for(var j=0,jl=targetNames.length;j<jl;j++){tracks.push(new TypedKeyframeTrack(targetNames[j]+'.'+PATH_PROPERTIES[target.path],THREE.AnimationUtils.arraySlice(inputAccessor.array,0),THREE.AnimationUtils.arraySlice(outputAccessor.array,0),interpolation));}}}}
var name=animation.name!==undefined?animation.name:'animation_'+animationId;return new THREE.AnimationClip(name,undefined,tracks);});});};GLTFParser.prototype.loadNodes=function(){var json=this.json;var extensions=this.extensions;var scope=this;var nodes=json.nodes||[];var skins=json.skins||[];skins.forEach(function(skin){skin.joints.forEach(function(id){nodes[id].isBone=true;});});return scope._withDependencies(['meshes','skins','cameras']).then(function(dependencies){return _each(json.nodes,function(nodeDef){if(nodeDef.isBone===true){return new THREE.Bone();}else if(nodeDef.mesh!==undefined){return dependencies.meshes[nodeDef.mesh].clone();}else if(nodeDef.camera!==undefined){return dependencies.cameras[nodeDef.camera];}else if(nodeDef.extensions&&nodeDef.extensions[EXTENSIONS.KHR_LIGHTS]&&nodeDef.extensions[EXTENSIONS.KHR_LIGHTS].light!==undefined){var lights=extensions[EXTENSIONS.KHR_LIGHTS].lights;return lights[nodeDef.extensions[EXTENSIONS.KHR_LIGHTS].light];}else{return new THREE.Object3D();}}).then(function(__nodes){return _each(__nodes,function(node,nodeIndex){var nodeDef=json.nodes[nodeIndex];if(nodeDef.name!==undefined){node.name=THREE.PropertyBinding.sanitizeNodeName(nodeDef.name);}
if(nodeDef.extras)node.userData=nodeDef.extras;if(nodeDef.matrix!==undefined){var matrix=new THREE.Matrix4();matrix.fromArray(nodeDef.matrix);node.applyMatrix(matrix);}else{if(nodeDef.translation!==undefined){node.position.fromArray(nodeDef.translation);}
if(nodeDef.rotation!==undefined){node.quaternion.fromArray(nodeDef.rotation);}
if(nodeDef.scale!==undefined){node.scale.fromArray(nodeDef.scale);}}
if(nodeDef.skin!==undefined){var skinnedMeshes=[];for(var i=0;i<node.children.length;i++){var skinEntry=dependencies.skins[nodeDef.skin];var geometry=node.children[i].geometry;var material=node.children[i].material;material.skinning=true;var child=new THREE.SkinnedMesh(geometry,material);child.morphTargetInfluences=node.children[i].morphTargetInfluences;child.userData=node.children[i].userData;child.name=node.children[i].name;var bones=[];var boneInverses=[];for(var j=0,l=skinEntry.joints.length;j<l;j++){var jointId=skinEntry.joints[j];var jointNode=__nodes[jointId];if(jointNode){bones.push(jointNode);var m=skinEntry.inverseBindMatrices.array;var mat=new THREE.Matrix4().fromArray(m,j*16);boneInverses.push(mat);}else{console.warn('THREE.GLTFLoader: Joint "%s" could not be found.',jointId);}}
child.bind(new THREE.Skeleton(bones,boneInverses),child.matrixWorld);skinnedMeshes.push(child);}
node.remove.apply(node,node.children);node.add.apply(node,skinnedMeshes);}
return node;});});});};GLTFParser.prototype.loadScenes=function(){var json=this.json;var extensions=this.extensions;function buildNodeHierachy(nodeId,parentObject,allNodes){var _node=allNodes[nodeId];parentObject.add(_node);var node=json.nodes[nodeId];if(node.children){var children=node.children;for(var i=0,l=children.length;i<l;i++){var child=children[i];buildNodeHierachy(child,_node,allNodes);}}}
return this._withDependencies(['nodes']).then(function(dependencies){return _each(json.scenes,function(scene){var _scene=new THREE.Scene();if(scene.name!==undefined)_scene.name=scene.name;if(scene.extras)_scene.userData=scene.extras;var nodes=scene.nodes||[];for(var i=0,l=nodes.length;i<l;i++){var nodeId=nodes[i];buildNodeHierachy(nodeId,_scene,dependencies.nodes);}
_scene.traverse(function(child){if(child.material&&child.material.isGLTFSpecularGlossinessMaterial){child.onBeforeRender=extensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].refreshUniforms;}});if(scene.extensions&&scene.extensions[EXTENSIONS.KHR_LIGHTS]&&scene.extensions[EXTENSIONS.KHR_LIGHTS].light!==undefined){var lights=extensions[EXTENSIONS.KHR_LIGHTS].lights;_scene.add(lights[scene.extensions[EXTENSIONS.KHR_LIGHTS].light]);}
return _scene;});});};return GLTFLoader;})();THREE.KMZLoader=function(manager){this.manager=(manager!==undefined)?manager:THREE.DefaultLoadingManager;};THREE.KMZLoader.prototype={constructor:THREE.KMZLoader,load:function(url,onLoad,onProgress,onError){var scope=this;var loader=new THREE.FileLoader(scope.manager);loader.setResponseType('arraybuffer');loader.load(url,function(text){onLoad(scope.parse(text));},onProgress,onError);},parse:function(data){var zip=new JSZip(data);function loadImage(image){var path=decodeURI(image.init_from);path=path.replace('../','');var regex=new RegExp(path+'$');var files=zip.file(regex);if(files.length){var file=files[0];var blob=new Blob([file.asArrayBuffer()],{type:'application/octet-binary'});image.build.src=URL.createObjectURL(blob);}}
var files=zip.file(/dae$/i);if(files.length){var file=files[0];var collada=new THREE.ColladaLoader().parse(file.asText());var images=collada.library.images;for(var name in images){loadImage(images[name]);}
return collada;}
console.error('KMZLoader: Couldn\'t find .dae file.');return{scene:new THREE.Group()};}};THREE.MD2Loader=function(manager){this.manager=(manager!==undefined)?manager:THREE.DefaultLoadingManager;};THREE.MD2Loader.prototype={constructor:THREE.MD2Loader,load:function(url,onLoad,onProgress,onError){var scope=this;var loader=new THREE.FileLoader(scope.manager);loader.setResponseType('arraybuffer');loader.load(url,function(buffer){onLoad(scope.parse(buffer));},onProgress,onError);},parse:(function(){var normals=[[-0.525731,0.000000,0.850651],[-0.442863,0.238856,0.864188],[-0.295242,0.000000,0.955423],[-0.309017,0.500000,0.809017],[-0.162460,0.262866,0.951056],[0.000000,0.000000,1.000000],[0.000000,0.850651,0.525731],[-0.147621,0.716567,0.681718],[0.147621,0.716567,0.681718],[0.000000,0.525731,0.850651],[0.309017,0.500000,0.809017],[0.525731,0.000000,0.850651],[0.295242,0.000000,0.955423],[0.442863,0.238856,0.864188],[0.162460,0.262866,0.951056],[-0.681718,0.147621,0.716567],[-0.809017,0.309017,0.500000],[-0.587785,0.425325,0.688191],[-0.850651,0.525731,0.000000],[-0.864188,0.442863,0.238856],[-0.716567,0.681718,0.147621],[-0.688191,0.587785,0.425325],[-0.500000,0.809017,0.309017],[-0.238856,0.864188,0.442863],[-0.425325,0.688191,0.587785],[-0.716567,0.681718,-0.147621],[-0.500000,0.809017,-0.309017],[-0.525731,0.850651,0.000000],[0.000000,0.850651,-0.525731],[-0.238856,0.864188,-0.442863],[0.000000,0.955423,-0.295242],[-0.262866,0.951056,-0.162460],[0.000000,1.000000,0.000000],[0.000000,0.955423,0.295242],[-0.262866,0.951056,0.162460],[0.238856,0.864188,0.442863],[0.262866,0.951056,0.162460],[0.500000,0.809017,0.309017],[0.238856,0.864188,-0.442863],[0.262866,0.951056,-0.162460],[0.500000,0.809017,-0.309017],[0.850651,0.525731,0.000000],[0.716567,0.681718,0.147621],[0.716567,0.681718,-0.147621],[0.525731,0.850651,0.000000],[0.425325,0.688191,0.587785],[0.864188,0.442863,0.238856],[0.688191,0.587785,0.425325],[0.809017,0.309017,0.500000],[0.681718,0.147621,0.716567],[0.587785,0.425325,0.688191],[0.955423,0.295242,0.000000],[1.000000,0.000000,0.000000],[0.951056,0.162460,0.262866],[0.850651,-0.525731,0.000000],[0.955423,-0.295242,0.000000],[0.864188,-0.442863,0.238856],[0.951056,-0.162460,0.262866],[0.809017,-0.309017,0.500000],[0.681718,-0.147621,0.716567],[0.850651,0.000000,0.525731],[0.864188,0.442863,-0.238856],[0.809017,0.309017,-0.500000],[0.951056,0.162460,-0.262866],[0.525731,0.000000,-0.850651],[0.681718,0.147621,-0.716567],[0.681718,-0.147621,-0.716567],[0.850651,0.000000,-0.525731],[0.809017,-0.309017,-0.500000],[0.864188,-0.442863,-0.238856],[0.951056,-0.162460,-0.262866],[0.147621,0.716567,-0.681718],[0.309017,0.500000,-0.809017],[0.425325,0.688191,-0.587785],[0.442863,0.238856,-0.864188],[0.587785,0.425325,-0.688191],[0.688191,0.587785,-0.425325],[-0.147621,0.716567,-0.681718],[-0.309017,0.500000,-0.809017],[0.000000,0.525731,-0.850651],[-0.525731,0.000000,-0.850651],[-0.442863,0.238856,-0.864188],[-0.295242,0.000000,-0.955423],[-0.162460,0.262866,-0.951056],[0.000000,0.000000,-1.000000],[0.295242,0.000000,-0.955423],[0.162460,0.262866,-0.951056],[-0.442863,-0.238856,-0.864188],[-0.309017,-0.500000,-0.809017],[-0.162460,-0.262866,-0.951056],[0.000000,-0.850651,-0.525731],[-0.147621,-0.716567,-0.681718],[0.147621,-0.716567,-0.681718],[0.000000,-0.525731,-0.850651],[0.309017,-0.500000,-0.809017],[0.442863,-0.238856,-0.864188],[0.162460,-0.262866,-0.951056],[0.238856,-0.864188,-0.442863],[0.500000,-0.809017,-0.309017],[0.425325,-0.688191,-0.587785],[0.716567,-0.681718,-0.147621],[0.688191,-0.587785,-0.425325],[0.587785,-0.425325,-0.688191],[0.000000,-0.955423,-0.295242],[0.000000,-1.000000,0.000000],[0.262866,-0.951056,-0.162460],[0.000000,-0.850651,0.525731],[0.000000,-0.955423,0.295242],[0.238856,-0.864188,0.442863],[0.262866,-0.951056,0.162460],[0.500000,-0.809017,0.309017],[0.716567,-0.681718,0.147621],[0.525731,-0.850651,0.000000],[-0.238856,-0.864188,-0.442863],[-0.500000,-0.809017,-0.309017],[-0.262866,-0.951056,-0.162460],[-0.850651,-0.525731,0.000000],[-0.716567,-0.681718,-0.147621],[-0.716567,-0.681718,0.147621],[-0.525731,-0.850651,0.000000],[-0.500000,-0.809017,0.309017],[-0.238856,-0.864188,0.442863],[-0.262866,-0.951056,0.162460],[-0.864188,-0.442863,0.238856],[-0.809017,-0.309017,0.500000],[-0.688191,-0.587785,0.425325],[-0.681718,-0.147621,0.716567],[-0.442863,-0.238856,0.864188],[-0.587785,-0.425325,0.688191],[-0.309017,-0.500000,0.809017],[-0.147621,-0.716567,0.681718],[-0.425325,-0.688191,0.587785],[-0.162460,-0.262866,0.951056],[0.442863,-0.238856,0.864188],[0.162460,-0.262866,0.951056],[0.309017,-0.500000,0.809017],[0.147621,-0.716567,0.681718],[0.000000,-0.525731,0.850651],[0.425325,-0.688191,0.587785],[0.587785,-0.425325,0.688191],[0.688191,-0.587785,0.425325],[-0.955423,0.295242,0.000000],[-0.951056,0.162460,0.262866],[-1.000000,0.000000,0.000000],[-0.850651,0.000000,0.525731],[-0.955423,-0.295242,0.000000],[-0.951056,-0.162460,0.262866],[-0.864188,0.442863,-0.238856],[-0.951056,0.162460,-0.262866],[-0.809017,0.309017,-0.500000],[-0.864188,-0.442863,-0.238856],[-0.951056,-0.162460,-0.262866],[-0.809017,-0.309017,-0.500000],[-0.681718,0.147621,-0.716567],[-0.681718,-0.147621,-0.716567],[-0.850651,0.000000,-0.525731],[-0.688191,0.587785,-0.425325],[-0.587785,0.425325,-0.688191],[-0.425325,0.688191,-0.587785],[-0.425325,-0.688191,-0.587785],[-0.587785,-0.425325,-0.688191],[-0.688191,-0.587785,-0.425325]];return function(buffer){console.time('MD2Loader');var data=new DataView(buffer);var header={};var headerNames=['ident','version','skinwidth','skinheight','framesize','num_skins','num_vertices','num_st','num_tris','num_glcmds','num_frames','offset_skins','offset_st','offset_tris','offset_frames','offset_glcmds','offset_end'];for(var i=0;i<headerNames.length;i++){header[headerNames[i]]=data.getInt32(i*4,true);}
if(header.ident!==844121161||header.version!==8){console.error('Not a valid MD2 file');return;}
if(header.offset_end!==data.byteLength){console.error('Corrupted MD2 file');return;}
var geometry=new THREE.Geometry();var uvs=[];var offset=header.offset_st;for(var i=0,l=header.num_st;i<l;i++){var u=data.getInt16(offset+0,true);var v=data.getInt16(offset+2,true);uvs.push(new THREE.Vector2(u/header.skinwidth,1-(v/header.skinheight)));offset+=4;}
var offset=header.offset_tris;for(var i=0,l=header.num_tris;i<l;i++){var a=data.getUint16(offset+0,true);var b=data.getUint16(offset+2,true);var c=data.getUint16(offset+4,true);geometry.faces.push(new THREE.Face3(a,b,c));geometry.faceVertexUvs[0].push([uvs[data.getUint16(offset+6,true)],uvs[data.getUint16(offset+8,true)],uvs[data.getUint16(offset+10,true)]]);offset+=12;}
var translation=new THREE.Vector3();var scale=new THREE.Vector3();var string=[];var offset=header.offset_frames;for(var i=0,l=header.num_frames;i<l;i++){scale.set(data.getFloat32(offset+0,true),data.getFloat32(offset+4,true),data.getFloat32(offset+8,true));translation.set(data.getFloat32(offset+12,true),data.getFloat32(offset+16,true),data.getFloat32(offset+20,true));offset+=24;for(var j=0;j<16;j++){var character=data.getUint8(offset+j,true);if(character===0)break;string[j]=character;}
var frame={name:String.fromCharCode.apply(null,string),vertices:[],normals:[]};offset+=16;for(var j=0;j<header.num_vertices;j++){var x=data.getUint8(offset++,true);var y=data.getUint8(offset++,true);var z=data.getUint8(offset++,true);var n=normals[data.getUint8(offset++,true)];var vertex=new THREE.Vector3(x*scale.x+translation.x,z*scale.z+translation.z,y*scale.y+translation.y);var normal=new THREE.Vector3(n[0],n[2],n[1]);frame.vertices.push(vertex);frame.normals.push(normal);}
geometry.morphTargets.push(frame);}
geometry.vertices=geometry.morphTargets[0].vertices;var morphTarget=geometry.morphTargets[0];for(var j=0,jl=geometry.faces.length;j<jl;j++){var face=geometry.faces[j];face.vertexNormals=[morphTarget.normals[face.a],morphTarget.normals[face.b],morphTarget.normals[face.c]];}
for(var i=0,l=geometry.morphTargets.length;i<l;i++){var morphTarget=geometry.morphTargets[i];var vertexNormals=[];for(var j=0,jl=geometry.faces.length;j<jl;j++){var face=geometry.faces[j];vertexNormals.push({a:morphTarget.normals[face.a],b:morphTarget.normals[face.b],c:morphTarget.normals[face.c]});}
geometry.morphNormals.push({vertexNormals:vertexNormals});}
geometry.animations=THREE.AnimationClip.CreateClipsFromMorphTargetSequences(geometry.morphTargets,10);console.timeEnd('MD2Loader');return geometry;};})()};THREE.OBJLoader=(function(){var object_pattern=/^[og]\s*(.+)?/;var material_library_pattern=/^mtllib /;var material_use_pattern=/^usemtl /;function ParserState(){var state={objects:[],object:{},vertices:[],normals:[],uvs:[],materialLibraries:[],startObject:function(name,fromDeclaration){if(this.object&&this.object.fromDeclaration===false){this.object.name=name;this.object.fromDeclaration=(fromDeclaration!==false);return;}
var previousMaterial=(this.object&&typeof this.object.currentMaterial==='function'?this.object.currentMaterial():undefined);if(this.object&&typeof this.object._finalize==='function'){this.object._finalize(true);}
this.object={name:name||'',fromDeclaration:(fromDeclaration!==false),geometry:{vertices:[],normals:[],uvs:[]},materials:[],smooth:true,startMaterial:function(name,libraries){var previous=this._finalize(false);if(previous&&(previous.inherited||previous.groupCount<=0)){this.materials.splice(previous.index,1);}
var material={index:this.materials.length,name:name||'',mtllib:(Array.isArray(libraries)&&libraries.length>0?libraries[libraries.length-1]:''),smooth:(previous!==undefined?previous.smooth:this.smooth),groupStart:(previous!==undefined?previous.groupEnd:0),groupEnd:-1,groupCount:-1,inherited:false,clone:function(index){var cloned={index:(typeof index==='number'?index:this.index),name:this.name,mtllib:this.mtllib,smooth:this.smooth,groupStart:0,groupEnd:-1,groupCount:-1,inherited:false};cloned.clone=this.clone.bind(cloned);return cloned;}};this.materials.push(material);return material;},currentMaterial:function(){if(this.materials.length>0){return this.materials[this.materials.length-1];}
return undefined;},_finalize:function(end){var lastMultiMaterial=this.currentMaterial();if(lastMultiMaterial&&lastMultiMaterial.groupEnd===-1){lastMultiMaterial.groupEnd=this.geometry.vertices.length/3;lastMultiMaterial.groupCount=lastMultiMaterial.groupEnd-lastMultiMaterial.groupStart;lastMultiMaterial.inherited=false;}
if(end&&this.materials.length>1){for(var mi=this.materials.length-1;mi>=0;mi--){if(this.materials[mi].groupCount<=0){this.materials.splice(mi,1);}}}
if(end&&this.materials.length===0){this.materials.push({name:'',smooth:this.smooth});}
return lastMultiMaterial;}};if(previousMaterial&&previousMaterial.name&&typeof previousMaterial.clone==='function'){var declared=previousMaterial.clone(0);declared.inherited=true;this.object.materials.push(declared);}
this.objects.push(this.object);},finalize:function(){if(this.object&&typeof this.object._finalize==='function'){this.object._finalize(true);}},parseVertexIndex:function(value,len){var index=parseInt(value,10);return(index>=0?index-1:index+len/3)*3;},parseNormalIndex:function(value,len){var index=parseInt(value,10);return(index>=0?index-1:index+len/3)*3;},parseUVIndex:function(value,len){var index=parseInt(value,10);return(index>=0?index-1:index+len/2)*2;},addVertex:function(a,b,c){var src=this.vertices;var dst=this.object.geometry.vertices;dst.push(src[a+0],src[a+1],src[a+2]);dst.push(src[b+0],src[b+1],src[b+2]);dst.push(src[c+0],src[c+1],src[c+2]);},addVertexLine:function(a){var src=this.vertices;var dst=this.object.geometry.vertices;dst.push(src[a+0],src[a+1],src[a+2]);},addNormal:function(a,b,c){var src=this.normals;var dst=this.object.geometry.normals;dst.push(src[a+0],src[a+1],src[a+2]);dst.push(src[b+0],src[b+1],src[b+2]);dst.push(src[c+0],src[c+1],src[c+2]);},addUV:function(a,b,c){var src=this.uvs;var dst=this.object.geometry.uvs;dst.push(src[a+0],src[a+1]);dst.push(src[b+0],src[b+1]);dst.push(src[c+0],src[c+1]);},addUVLine:function(a){var src=this.uvs;var dst=this.object.geometry.uvs;dst.push(src[a+0],src[a+1]);},addFace:function(a,b,c,ua,ub,uc,na,nb,nc){var vLen=this.vertices.length;var ia=this.parseVertexIndex(a,vLen);var ib=this.parseVertexIndex(b,vLen);var ic=this.parseVertexIndex(c,vLen);this.addVertex(ia,ib,ic);if(ua!==undefined){var uvLen=this.uvs.length;ia=this.parseUVIndex(ua,uvLen);ib=this.parseUVIndex(ub,uvLen);ic=this.parseUVIndex(uc,uvLen);this.addUV(ia,ib,ic);}
if(na!==undefined){var nLen=this.normals.length;ia=this.parseNormalIndex(na,nLen);ib=na===nb?ia:this.parseNormalIndex(nb,nLen);ic=na===nc?ia:this.parseNormalIndex(nc,nLen);this.addNormal(ia,ib,ic);}},addLineGeometry:function(vertices,uvs){this.object.geometry.type='Line';var vLen=this.vertices.length;var uvLen=this.uvs.length;for(var vi=0,l=vertices.length;vi<l;vi++){this.addVertexLine(this.parseVertexIndex(vertices[vi],vLen));}
for(var uvi=0,l=uvs.length;uvi<l;uvi++){this.addUVLine(this.parseUVIndex(uvs[uvi],uvLen));}}};state.startObject('',false);return state;}
function OBJLoader(manager){this.manager=(manager!==undefined)?manager:THREE.DefaultLoadingManager;this.materials=null;};OBJLoader.prototype={constructor:OBJLoader,load:function(url,onLoad,onProgress,onError){var scope=this;var loader=new THREE.FileLoader(scope.manager);loader.setPath(this.path);loader.load(url,function(text){onLoad(scope.parse(text));},onProgress,onError);},setPath:function(value){this.path=value;},setMaterials:function(materials){this.materials=materials;return this;},parse:function(text){console.time('OBJLoader');var state=new ParserState();if(text.indexOf('\r\n')!==-1){text=text.replace(/\r\n/g,'\n');}
if(text.indexOf('\\\n')!==-1){text=text.replace(/\\\n/g,'');}
var lines=text.split('\n');var line='',lineFirstChar='';var lineLength=0;var result=[];var trimLeft=(typeof''.trimLeft==='function');for(var i=0,l=lines.length;i<l;i++){line=lines[i];line=trimLeft?line.trimLeft():line.trim();lineLength=line.length;if(lineLength===0)continue;lineFirstChar=line.charAt(0);if(lineFirstChar==='#')continue;if(lineFirstChar==='v'){var data=line.split(/\s+/);switch(data[0]){case'v':state.vertices.push(parseFloat(data[1]),parseFloat(data[2]),parseFloat(data[3]));break;case'vn':state.normals.push(parseFloat(data[1]),parseFloat(data[2]),parseFloat(data[3]));break;case'vt':state.uvs.push(parseFloat(data[1]),parseFloat(data[2]));break;}}else if(lineFirstChar==='f'){var lineData=line.substr(1).trim();var vertexData=lineData.split(/\s+/);var faceVertices=[];for(var j=0,jl=vertexData.length;j<jl;j++){var vertex=vertexData[j];if(vertex.length>0){var vertexParts=vertex.split('/');faceVertices.push(vertexParts);}}
var v1=faceVertices[0];for(var j=1,jl=faceVertices.length-1;j<jl;j++){var v2=faceVertices[j];var v3=faceVertices[j+1];state.addFace(v1[0],v2[0],v3[0],v1[1],v2[1],v3[1],v1[2],v2[2],v3[2]);}}else if(lineFirstChar==='l'){var lineParts=line.substring(1).trim().split(" ");var lineVertices=[],lineUVs=[];if(line.indexOf("/")===-1){lineVertices=lineParts;}else{for(var li=0,llen=lineParts.length;li<llen;li++){var parts=lineParts[li].split("/");if(parts[0]!=="")lineVertices.push(parts[0]);if(parts[1]!=="")lineUVs.push(parts[1]);}}
state.addLineGeometry(lineVertices,lineUVs);}else if((result=object_pattern.exec(line))!==null){var name=(" "+result[0].substr(1).trim()).substr(1);state.startObject(name);}else if(material_use_pattern.test(line)){state.object.startMaterial(line.substring(7).trim(),state.materialLibraries);}else if(material_library_pattern.test(line)){state.materialLibraries.push(line.substring(7).trim());}else if(lineFirstChar==='s'){result=line.split(' ');if(result.length>1){var value=result[1].trim().toLowerCase();state.object.smooth=(value!=='0'&&value!=='off');}else{state.object.smooth=true;}
var material=state.object.currentMaterial();if(material)material.smooth=state.object.smooth;}else{if(line==='\0')continue;throw new Error("Unexpected line: '"+line+"'");}}
state.finalize();var container=new THREE.Group();container.materialLibraries=[].concat(state.materialLibraries);for(var i=0,l=state.objects.length;i<l;i++){var object=state.objects[i];var geometry=object.geometry;var materials=object.materials;var isLine=(geometry.type==='Line');if(geometry.vertices.length===0)continue;var buffergeometry=new THREE.BufferGeometry();buffergeometry.addAttribute('position',new THREE.BufferAttribute(new Float32Array(geometry.vertices),3));if(geometry.normals.length>0){buffergeometry.addAttribute('normal',new THREE.BufferAttribute(new Float32Array(geometry.normals),3));}else{buffergeometry.computeVertexNormals();}
if(geometry.uvs.length>0){buffergeometry.addAttribute('uv',new THREE.BufferAttribute(new Float32Array(geometry.uvs),2));}
var createdMaterials=[];for(var mi=0,miLen=materials.length;mi<miLen;mi++){var sourceMaterial=materials[mi];var material=undefined;if(this.materials!==null){material=this.materials.create(sourceMaterial.name);if(isLine&&material&&!(material instanceof THREE.LineBasicMaterial)){var materialLine=new THREE.LineBasicMaterial();materialLine.copy(material);material=materialLine;}}
if(!material){material=(!isLine?new THREE.MeshPhongMaterial():new THREE.LineBasicMaterial());material.name=sourceMaterial.name;}
material.flatShading=sourceMaterial.smooth?false:true;createdMaterials.push(material);}
var mesh;if(createdMaterials.length>1){for(var mi=0,miLen=materials.length;mi<miLen;mi++){var sourceMaterial=materials[mi];buffergeometry.addGroup(sourceMaterial.groupStart,sourceMaterial.groupCount,mi);}
mesh=(!isLine?new THREE.Mesh(buffergeometry,createdMaterials):new THREE.LineSegments(buffergeometry,createdMaterials));}else{mesh=(!isLine?new THREE.Mesh(buffergeometry,createdMaterials[0]):new THREE.LineSegments(buffergeometry,createdMaterials[0]));}
mesh.name=object.name;container.add(mesh);}
console.timeEnd('OBJLoader');return container;}};return OBJLoader;})();'use strict';if(THREE.OBJLoader2===undefined){THREE.OBJLoader2={}}
THREE.OBJLoader2=(function(){var OBJLOADER2_VERSION='2.0.0';var Commons=THREE.LoaderSupport.Commons;var Validator=THREE.LoaderSupport.Validator;var ConsoleLogger=THREE.LoaderSupport.ConsoleLogger;OBJLoader2.prototype=Object.create(THREE.LoaderSupport.Commons.prototype);OBJLoader2.prototype.constructor=OBJLoader2;function OBJLoader2(logger,manager){THREE.LoaderSupport.Commons.call(this,logger,manager);this.logger.logInfo('Using THREE.OBJLoader2 version: '+OBJLOADER2_VERSION);this.materialPerSmoothingGroup=false;this.fileLoader=Validator.verifyInput(this.fileLoader,new THREE.FileLoader(this.manager));this.workerSupport=null;this.terminateWorkerOnLoad=true;};OBJLoader2.prototype.setMaterialPerSmoothingGroup=function(materialPerSmoothingGroup){this.materialPerSmoothingGroup=materialPerSmoothingGroup===true;};OBJLoader2.prototype.load=function(url,onLoad,onProgress,onError,onMeshAlter,useAsync){var scope=this;if(!Validator.isValid(onProgress)){var numericalValueRef=0;var numericalValue=0;onProgress=function(event){if(!event.lengthComputable)return;numericalValue=event.loaded/event.total;if(numericalValue>numericalValueRef){numericalValueRef=numericalValue;var output='Download of "'+url+'": '+(numericalValue*100).toFixed(2)+'%';scope.onProgress('progressLoad',output,numericalValue);}};}
if(!Validator.isValid(onError)){onError=function(event){var output='Error occurred while downloading "'+url+'"';scope.logger.logError(output+': '+event);scope.onProgress('error',output,-1);};}
this.fileLoader.setPath(this.path);this.fileLoader.setResponseType('arraybuffer');this.fileLoader.load(url,function(content){if(useAsync){scope.parseAsync(content,onLoad);}else{scope._setCallbacks(null,onMeshAlter,null);onLoad({detail:{loaderRootNode:scope.parse(content),modelName:scope.modelName,instanceNo:scope.instanceNo}});}},onProgress,onError);};OBJLoader2.prototype.run=function(prepData,workerSupportExternal){this._applyPrepData(prepData);var available=this._checkFiles(prepData.resources);if(Validator.isValid(workerSupportExternal)){this.terminateWorkerOnLoad=false;this.workerSupport=workerSupportExternal;this.logger=workerSupportExternal.logger;}else{this.terminateWorkerOnLoad=true;}
var scope=this;var onMaterialsLoaded=function(materials){scope.builder.setMaterials(materials);if(Validator.isValid(available.obj.content)){if(prepData.useAsync){scope.parseAsync(available.obj.content,scope.callbacks.onLoad);}else{scope.parse(available.obj.content);}}else{scope.setPath(available.obj.path);scope.load(available.obj.name,scope.callbacks.onLoad,null,null,scope.callbacks.onMeshAlter,prepData.useAsync);}};this._loadMtl(available.mtl,onMaterialsLoaded,prepData.crossOrigin);};OBJLoader2.prototype._applyPrepData=function(prepData){THREE.LoaderSupport.Commons.prototype._applyPrepData.call(this,prepData);if(Validator.isValid(prepData)){this.setMaterialPerSmoothingGroup(prepData.materialPerSmoothingGroup);}};OBJLoader2.prototype.parse=function(content){this.logger.logTimeStart('OBJLoader2 parse: '+this.modelName);var parser=new Parser(this.logger);parser.setMaterialPerSmoothingGroup(this.materialPerSmoothingGroup);parser.setUseIndices(this.useIndices);parser.setDisregardNormals(this.disregardNormals);parser.setMaterialNames(this.builder.materialNames);var scope=this;var onMeshLoaded=function(payload){var meshes=scope.builder.buildMeshes(payload);var mesh;for(var i in meshes){mesh=meshes[i];scope.loaderRootNode.add(mesh);}};parser.setCallbackBuilder(onMeshLoaded);var onProgressScoped=function(text,numericalValue){scope.onProgress('progressParse',text,numericalValue);};parser.setCallbackProgress(onProgressScoped);if(content instanceof ArrayBuffer||content instanceof Uint8Array){this.logger.logInfo('Parsing arrayBuffer...');parser.parse(content);}else if(typeof(content)==='string'||content instanceof String){this.logger.logInfo('Parsing text...');parser.parseText(content);}else{throw'Provided content was neither of type String nor Uint8Array! Aborting...';}
this.logger.logTimeEnd('OBJLoader2 parse: '+this.modelName);return this.loaderRootNode;};OBJLoader2.prototype.parseAsync=function(content,onLoad){this.logger.logTimeStart('OBJLoader2 parseAsync: '+this.modelName);var scope=this;var scopedOnLoad=function(){onLoad({detail:{loaderRootNode:scope.loaderRootNode,modelName:scope.modelName,instanceNo:scope.instanceNo}});if(scope.terminateWorkerOnLoad)scope.workerSupport.terminateWorker();scope.logger.logTimeEnd('OBJLoader2 parseAsync: '+scope.modelName);};var scopedOnMeshLoaded=function(payload){var meshes=scope.builder.buildMeshes(payload);var mesh;for(var i in meshes){mesh=meshes[i];scope.loaderRootNode.add(mesh);}};this.workerSupport=Validator.verifyInput(this.workerSupport,new THREE.LoaderSupport.WorkerSupport(this.logger));var buildCode=function(funcBuildObject,funcBuildSingelton){var workerCode='';workerCode+='/**\n';workerCode+='  * This code was constructed by OBJLoader2 buildWorkerCode.\n';workerCode+='  */\n\n';workerCode+=funcBuildSingelton('Commons','Commons',Commons);workerCode+=funcBuildObject('Consts',Consts);workerCode+=funcBuildObject('Validator',Validator);workerCode+=funcBuildSingelton('ConsoleLogger','ConsoleLogger',ConsoleLogger);workerCode+=funcBuildSingelton('Parser','Parser',Parser);workerCode+=funcBuildSingelton('RawMesh','RawMesh',RawMesh);workerCode+=funcBuildSingelton('RawMeshSubGroup','RawMeshSubGroup',RawMeshSubGroup);return workerCode;};this.workerSupport.validate(buildCode,false);this.workerSupport.setCallbacks(scopedOnMeshLoaded,scopedOnLoad);this.workerSupport.run({cmd:'run',params:{materialPerSmoothingGroup:this.materialPerSmoothingGroup,useIndices:this.useIndices,disregardNormals:this.disregardNormals},logger:{debug:this.logger.debug,enabled:this.logger.enabled},materials:{materialNames:this.builder.materialNames},buffers:{input:content}},[content.buffer]);};var Consts={CODE_LF:10,CODE_CR:13,CODE_SPACE:32,CODE_SLASH:47,STRING_LF:'\n',STRING_CR:'\r',STRING_SPACE:' ',STRING_SLASH:'/',LINE_F:'f',LINE_G:'g',LINE_L:'l',LINE_O:'o',LINE_S:'s',LINE_V:'v',LINE_VT:'vt',LINE_VN:'vn',LINE_MTLLIB:'mtllib',LINE_USEMTL:'usemtl'};var Parser=(function(){function Parser(logger){this.callbackProgress=null;this.callbackBuilder=null;this.materialNames=[];this.rawMesh=null;this.materialPerSmoothingGroup=false;this.useIndices=false;this.disregardNormals=false;this.inputObjectCount=1;this.outputObjectCount=1;this.counts={vertices:0,faces:0,doubleIndicesCount:0};this.logger=logger;this.totalBytes=0;};Parser.prototype.setMaterialPerSmoothingGroup=function(materialPerSmoothingGroup){this.materialPerSmoothingGroup=materialPerSmoothingGroup;};Parser.prototype.setUseIndices=function(useIndices){this.useIndices=useIndices;};Parser.prototype.setDisregardNormals=function(disregardNormals){this.disregardNormals=disregardNormals;};Parser.prototype.setMaterialNames=function(materialNames){this.materialNames=Validator.verifyInput(materialNames,this.materialNames);this.materialNames=Validator.verifyInput(this.materialNames,[]);};Parser.prototype.setCallbackBuilder=function(callbackBuilder){this.callbackBuilder=callbackBuilder;if(!Validator.isValid(this.callbackBuilder))throw'Unable to run as no "builder" callback is set.';};Parser.prototype.setCallbackProgress=function(callbackProgress){this.callbackProgress=callbackProgress;};Parser.prototype.configure=function(){this.rawMesh=new RawMesh(this.materialPerSmoothingGroup,this.useIndices,this.disregardNormals);if(this.logger.isEnabled()){var matNames=(this.materialNames.length>0)?'\n\tmaterialNames:\n\t\t- '+this.materialNames.join('\n\t\t- '):'\n\tmaterialNames: None';var printedConfig='OBJLoader2.Parser configuration:'
+matNames
+'\n\tmaterialPerSmoothingGroup: '+this.materialPerSmoothingGroup
+'\n\tuseIndices: '+this.useIndices
+'\n\tdisregardNormals: '+this.disregardNormals
+'\n\tcallbackBuilderName: '+this.callbackBuilder.name
+'\n\tcallbackProgressName: '+this.callbackProgress.name;this.logger.logInfo(printedConfig);}};Parser.prototype.parse=function(arrayBuffer){this.logger.logTimeStart('OBJLoader2.Parser.parse');this.configure();var arrayBufferView=new Uint8Array(arrayBuffer);var length=arrayBufferView.byteLength;this.totalBytes=length;var buffer=new Array(128);var bufferPointer=0;var slashesCount=0;var reachedFaces=false;var code;var word='';var i=0;for(;i<length;i++){code=arrayBufferView[i];switch(code){case Consts.CODE_SPACE:if(word.length>0)buffer[bufferPointer++]=word;word='';break;case Consts.CODE_SLASH:slashesCount++;if(word.length>0)buffer[bufferPointer++]=word;word='';break;case Consts.CODE_LF:if(word.length>0)buffer[bufferPointer++]=word;word='';reachedFaces=this.processLine(buffer,bufferPointer,slashesCount,reachedFaces,i);bufferPointer=0;slashesCount=0;break;case Consts.CODE_CR:break;default:word+=String.fromCharCode(code);break;}}
this.finalize(i);this.logger.logTimeEnd('OBJLoader2.Parser.parse');};Parser.prototype.parseText=function(text){this.logger.logTimeStart('OBJLoader2.Parser.parseText');this.configure();var length=text.length;this.totalBytes=length;var buffer=new Array(128);var bufferPointer=0;var slashesCount=0;var reachedFaces=false;var char;var word='';var i=0;for(;i<length;i++){char=text[i];switch(char){case Consts.STRING_SPACE:if(word.length>0)buffer[bufferPointer++]=word;word='';break;case Consts.STRING_SLASH:slashesCount++;if(word.length>0)buffer[bufferPointer++]=word;word='';break;case Consts.STRING_LF:if(word.length>0)buffer[bufferPointer++]=word;word='';reachedFaces=this.processLine(buffer,bufferPointer,slashesCount,reachedFaces,i);bufferPointer=0;slashesCount=0;break;case Consts.STRING_CR:break;default:word+=char;}}
this.finalize(i);this.logger.logTimeEnd('OBJLoader2.Parser.parseText');};Parser.prototype.processLine=function(buffer,bufferPointer,slashesCount,reachedFaces,currentByte){if(bufferPointer<1)return reachedFaces;var bufferLength=bufferPointer-1;var concatBuffer;switch(buffer[0]){case Consts.LINE_V:if(reachedFaces){if(this.rawMesh.colors.length>0&&this.rawMesh.colors.length!==this.rawMesh.vertices.length){throw'Vertex Colors were detected, but vertex count and color count do not match!';}
this.processCompletedObject(null,this.rawMesh.groupName,currentByte);reachedFaces=false;}
if(bufferLength===3){this.rawMesh.pushVertex(buffer)}else{this.rawMesh.pushVertexAndVertextColors(buffer);}
break;case Consts.LINE_VT:this.rawMesh.pushUv(buffer);break;case Consts.LINE_VN:this.rawMesh.pushNormal(buffer);break;case Consts.LINE_F:reachedFaces=true;this.rawMesh.processFaces(buffer,bufferPointer,slashesCount);break;case Consts.LINE_L:if(bufferLength===slashesCount*2){this.rawMesh.buildLineVvt(buffer);}else{this.rawMesh.buildLineV(buffer);}
break;case Consts.LINE_S:this.rawMesh.pushSmoothingGroup(buffer[1]);this.flushStringBuffer(buffer,bufferPointer);break;case Consts.LINE_G:concatBuffer=bufferLength>1?buffer.slice(1,bufferPointer).join(' '):buffer[1];this.processCompletedGroup(concatBuffer,currentByte);this.flushStringBuffer(buffer,bufferPointer);break;case Consts.LINE_O:concatBuffer=bufferLength>1?buffer.slice(1,bufferPointer).join(' '):buffer[1];if(this.rawMesh.vertices.length>0){this.processCompletedObject(concatBuffer,null,currentByte);reachedFaces=false;}else{this.rawMesh.pushObject(concatBuffer);}
this.flushStringBuffer(buffer,bufferPointer);break;case Consts.LINE_MTLLIB:concatBuffer=bufferLength>1?buffer.slice(1,bufferPointer).join(' '):buffer[1];this.rawMesh.pushMtllib(concatBuffer);this.flushStringBuffer(buffer,bufferPointer);break;case Consts.LINE_USEMTL:concatBuffer=bufferLength>1?buffer.slice(1,bufferPointer).join(' '):buffer[1];this.rawMesh.pushUsemtl(concatBuffer);this.flushStringBuffer(buffer,bufferPointer);break;default:break;}
return reachedFaces;};Parser.prototype.flushStringBuffer=function(buffer,bufferLength){for(var i=0;i<bufferLength;i++){buffer[i]='';}};Parser.prototype.createRawMeshReport=function(rawMesh,inputObjectCount){var report=rawMesh.createReport(inputObjectCount);return'Input Object number: '+inputObjectCount+'\n\tObject name: '+report.objectName+'\n\tGroup name: '+report.groupName+'\n\tMtllib name: '+report.mtllibName+'\n\tVertex count: '+report.vertexCount+'\n\tNormal count: '+report.normalCount+'\n\tUV count: '+report.uvCount+'\n\tSmoothingGroup count: '+report.smoothingGroupCount+'\n\tMaterial count: '+report.mtlCount+'\n\tReal RawMeshSubGroup count: '+report.subGroups;};Parser.prototype.processCompletedObject=function(objectName,groupName,currentByte){var result=this.rawMesh.finalize();if(Validator.isValid(result)){this.inputObjectCount++;if(this.logger.isDebug())this.logger.logDebug(this.createRawMeshReport(this.rawMesh,this.inputObjectCount));this.buildMesh(result,currentByte);var progressBytesPercent=currentByte/this.totalBytes;this.callbackProgress('Completed object: '+objectName+' Total progress: '+(progressBytesPercent*100).toFixed(2)+'%',progressBytesPercent);}
this.rawMesh=this.rawMesh.newInstanceFromObject(objectName,groupName);};Parser.prototype.processCompletedGroup=function(groupName,currentByte){var result=this.rawMesh.finalize();if(Validator.isValid(result)){this.inputObjectCount++;if(this.logger.isDebug())this.logger.logDebug(this.createRawMeshReport(this.rawMesh,this.inputObjectCount));this.buildMesh(result,currentByte);var progressBytesPercent=currentByte/this.totalBytes;this.callbackProgress('Completed group: '+groupName+' Total progress: '+(progressBytesPercent*100).toFixed(2)+'%',progressBytesPercent);this.rawMesh=this.rawMesh.newInstanceFromGroup(groupName);}else{this.rawMesh.pushGroup(groupName);}};Parser.prototype.finalize=function(currentByte){this.logger.logInfo('Global output object count: '+this.outputObjectCount);var result=Validator.isValid(this.rawMesh)?this.rawMesh.finalize():null;if(Validator.isValid(result)){this.inputObjectCount++;if(this.logger.isDebug())this.logger.logDebug(this.createRawMeshReport(this.rawMesh,this.inputObjectCount));this.buildMesh(result,currentByte);if(this.logger.isEnabled()){var parserFinalReport='Overall counts: '+'\n\tVertices: '+this.counts.vertices+'\n\tFaces: '+this.counts.faces+'\n\tMultiple definitions: '+this.counts.doubleIndicesCount;this.logger.logInfo(parserFinalReport);}
var progressBytesPercent=currentByte/this.totalBytes;this.callbackProgress('Completed Parsing: 100.00%',progressBytesPercent);}};Parser.prototype.buildMesh=function(result,currentByte){var rawObjectDescriptions=result.subGroups;var vertexFA=new Float32Array(result.absoluteVertexCount);this.counts.vertices+=result.absoluteVertexCount/3;this.counts.faces+=result.faceCount;this.counts.doubleIndicesCount+=result.doubleIndicesCount;var indexUA=(result.absoluteIndexCount>0)?new Uint32Array(result.absoluteIndexCount):null;var colorFA=(result.absoluteColorCount>0)?new Float32Array(result.absoluteColorCount):null;var normalFA=(result.absoluteNormalCount>0)?new Float32Array(result.absoluteNormalCount):null;var uvFA=(result.absoluteUvCount>0)?new Float32Array(result.absoluteUvCount):null;var rawObjectDescription;var materialDescription;var materialDescriptions=[];var createMultiMaterial=(rawObjectDescriptions.length>1);var materialIndex=0;var materialIndexMapping=[];var selectedMaterialIndex;var materialGroup;var materialGroups=[];var vertexFAOffset=0;var indexUAOffset=0;var colorFAOffset=0;var normalFAOffset=0;var uvFAOffset=0;var materialGroupOffset=0;var materialGroupLength=0;for(var oodIndex in rawObjectDescriptions){if(!rawObjectDescriptions.hasOwnProperty(oodIndex))continue;rawObjectDescription=rawObjectDescriptions[oodIndex];materialDescription={name:rawObjectDescription.materialName,flat:false,default:false};if(this.materialNames[materialDescription.name]===null){materialDescription.default=true;this.logger.logWarn('object_group "'+rawObjectDescription.objectName+'_'+
rawObjectDescription.groupName+'" was defined without material! Assigning "defaultMaterial".');}
if(rawObjectDescription.smoothingGroup===0)materialDescription.flat=true;if(createMultiMaterial){selectedMaterialIndex=materialIndexMapping[materialDescription.name];if(!selectedMaterialIndex){selectedMaterialIndex=materialIndex;materialIndexMapping[materialDescription.name]=materialIndex;materialDescriptions.push(materialDescription);materialIndex++;}
materialGroupLength=this.useIndices?rawObjectDescription.indices.length:rawObjectDescription.vertices.length/3;materialGroup={start:materialGroupOffset,count:materialGroupLength,index:selectedMaterialIndex};materialGroups.push(materialGroup);materialGroupOffset+=materialGroupLength;}else{materialDescriptions.push(materialDescription);}
vertexFA.set(rawObjectDescription.vertices,vertexFAOffset);vertexFAOffset+=rawObjectDescription.vertices.length;if(indexUA){indexUA.set(rawObjectDescription.indices,indexUAOffset);indexUAOffset+=rawObjectDescription.indices.length;}
if(colorFA){colorFA.set(rawObjectDescription.colors,colorFAOffset);colorFAOffset+=rawObjectDescription.colors.length;}
if(normalFA){normalFA.set(rawObjectDescription.normals,normalFAOffset);normalFAOffset+=rawObjectDescription.normals.length;}
if(uvFA){uvFA.set(rawObjectDescription.uvs,uvFAOffset);uvFAOffset+=rawObjectDescription.uvs.length;}
if(this.logger.isDebug()){var materialIndexLine=Validator.isValid(selectedMaterialIndex)?'\n\t\tmaterialIndex: '+selectedMaterialIndex:'';var createdReport='Output Object no.: '+this.outputObjectCount+'\n\t\tobjectName: '+rawObjectDescription.objectName+'\n\t\tgroupName: '+rawObjectDescription.groupName+'\n\t\tmaterialName: '+rawObjectDescription.materialName+
materialIndexLine+'\n\t\tsmoothingGroup: '+rawObjectDescription.smoothingGroup+'\n\t\t#vertices: '+rawObjectDescription.vertices.length/3+'\n\t\t#indices: '+rawObjectDescription.indices.length+'\n\t\t#colors: '+rawObjectDescription.colors.length/3+'\n\t\t#uvs: '+rawObjectDescription.uvs.length/2+'\n\t\t#normals: '+rawObjectDescription.normals.length/3;this.logger.logDebug(createdReport);}}
this.outputObjectCount++;this.callbackBuilder({cmd:'meshData',progress:{numericalValue:currentByte/this.totalBytes},params:{meshName:result.name},materials:{multiMaterial:createMultiMaterial,materialDescriptions:materialDescriptions,materialGroups:materialGroups},buffers:{vertices:vertexFA,indices:indexUA,colors:colorFA,normals:normalFA,uvs:uvFA}},[vertexFA.buffer],Validator.isValid(indexUA)?[indexUA.buffer]:null,Validator.isValid(colorFA)?[colorFA.buffer]:null,Validator.isValid(normalFA)?[normalFA.buffer]:null,Validator.isValid(uvFA)?[uvFA.buffer]:null);};return Parser;})();var RawMesh=(function(){function RawMesh(materialPerSmoothingGroup,useIndices,disregardNormals,objectName,groupName,activeMtlName){this.globalVertexOffset=1;this.globalUvOffset=1;this.globalNormalOffset=1;this.vertices=[];this.colors=[];this.normals=[];this.uvs=[];this.activeMtlName=Validator.verifyInput(activeMtlName,'');this.objectName=Validator.verifyInput(objectName,'');this.groupName=Validator.verifyInput(groupName,'');this.mtllibName='';this.smoothingGroup={splitMaterials:materialPerSmoothingGroup===true,normalized:-1,real:-1};this.useIndices=useIndices===true;this.disregardNormals=disregardNormals===true;this.mtlCount=0;this.smoothingGroupCount=0;this.subGroups=[];this.subGroupInUse=null;this.pushSmoothingGroup(1);this.doubleIndicesCount=0;this.faceCount=0;}
RawMesh.prototype.newInstanceFromObject=function(objectName,groupName){var newRawObject=new RawMesh(this.smoothingGroup.splitMaterials,this.useIndices,this.disregardNormals,objectName,groupName,this.activeMtlName);newRawObject.globalVertexOffset=this.globalVertexOffset+this.vertices.length/3;newRawObject.globalUvOffset=this.globalUvOffset+this.uvs.length/2;newRawObject.globalNormalOffset=this.globalNormalOffset+this.normals.length/3;return newRawObject;};RawMesh.prototype.newInstanceFromGroup=function(groupName){var newRawObject=new RawMesh(this.smoothingGroup.splitMaterials,this.useIndices,this.disregardNormals,this.objectName,groupName,this.activeMtlName);newRawObject.vertices=this.vertices;newRawObject.colors=this.colors;newRawObject.uvs=this.uvs;newRawObject.normals=this.normals;newRawObject.globalVertexOffset=this.globalVertexOffset;newRawObject.globalUvOffset=this.globalUvOffset;newRawObject.globalNormalOffset=this.globalNormalOffset;return newRawObject;};RawMesh.prototype.pushVertex=function(buffer){this.vertices.push(parseFloat(buffer[1]));this.vertices.push(parseFloat(buffer[2]));this.vertices.push(parseFloat(buffer[3]));};RawMesh.prototype.pushVertexAndVertextColors=function(buffer){this.vertices.push(parseFloat(buffer[1]));this.vertices.push(parseFloat(buffer[2]));this.vertices.push(parseFloat(buffer[3]));this.colors.push(parseFloat(buffer[4]));this.colors.push(parseFloat(buffer[5]));this.colors.push(parseFloat(buffer[6]));};RawMesh.prototype.pushUv=function(buffer){this.uvs.push(parseFloat(buffer[1]));this.uvs.push(parseFloat(buffer[2]));};RawMesh.prototype.pushNormal=function(buffer){this.normals.push(parseFloat(buffer[1]));this.normals.push(parseFloat(buffer[2]));this.normals.push(parseFloat(buffer[3]));};RawMesh.prototype.pushObject=function(objectName){this.objectName=Validator.verifyInput(objectName,'');};RawMesh.prototype.pushMtllib=function(mtllibName){this.mtllibName=Validator.verifyInput(mtllibName,'');};RawMesh.prototype.pushGroup=function(groupName){this.groupName=Validator.verifyInput(groupName,'');};RawMesh.prototype.pushUsemtl=function(mtlName){if(this.activeMtlName===mtlName||!Validator.isValid(mtlName))return;this.activeMtlName=mtlName;this.mtlCount++;this.verifyIndex();};RawMesh.prototype.pushSmoothingGroup=function(smoothingGroup){var smoothingGroupInt=parseInt(smoothingGroup);if(isNaN(smoothingGroupInt)){smoothingGroupInt=smoothingGroup==="off"?0:1;}
var smoothCheck=this.smoothingGroup.normalized;this.smoothingGroup.normalized=this.smoothingGroup.splitMaterials?smoothingGroupInt:(smoothingGroupInt===0)?0:1;this.smoothingGroup.real=smoothingGroupInt;if(smoothCheck!==smoothingGroupInt){this.smoothingGroupCount++;this.verifyIndex();}};RawMesh.prototype.verifyIndex=function(){var index=this.activeMtlName+'|'+this.smoothingGroup.normalized;this.subGroupInUse=this.subGroups[index];if(!Validator.isValid(this.subGroupInUse)){this.subGroupInUse=new RawMeshSubGroup(this.objectName,this.groupName,this.activeMtlName,this.smoothingGroup.normalized);this.subGroups[index]=this.subGroupInUse;}};RawMesh.prototype.processFaces=function(buffer,bufferPointer,slashesCount){var bufferLength=bufferPointer-1;var i,length;if(slashesCount===0){for(i=2,length=bufferLength-1;i<length;i++){this.buildFace(buffer[1]);this.buildFace(buffer[i]);this.buildFace(buffer[i+1]);}}else if(bufferLength===slashesCount*2){for(i=3,length=bufferLength-2;i<length;i+=2){this.buildFace(buffer[1],buffer[2]);this.buildFace(buffer[i],buffer[i+1]);this.buildFace(buffer[i+2],buffer[i+3]);}}else if(bufferLength*2===slashesCount*3){for(i=4,length=bufferLength-3;i<length;i+=3){this.buildFace(buffer[1],buffer[2],buffer[3]);this.buildFace(buffer[i],buffer[i+1],buffer[i+2]);this.buildFace(buffer[i+3],buffer[i+4],buffer[i+5]);}}else{for(i=3,length=bufferLength-2;i<length;i+=2){this.buildFace(buffer[1],undefined,buffer[2]);this.buildFace(buffer[i],undefined,buffer[i+1]);this.buildFace(buffer[i+2],undefined,buffer[i+3]);}}};RawMesh.prototype.buildFace=function(faceIndexV,faceIndexU,faceIndexN){var sgiu=this.subGroupInUse;if(this.disregardNormals)faceIndexN=undefined;var scope=this;var updateRawObjectDescriptionInUse=function(){var indexPointerV=(parseInt(faceIndexV)-scope.globalVertexOffset)*3;var indexPointerC=scope.colors.length>0?indexPointerV:null;var vertices=sgiu.vertices;vertices.push(scope.vertices[indexPointerV++]);vertices.push(scope.vertices[indexPointerV++]);vertices.push(scope.vertices[indexPointerV]);if(indexPointerC!==null){var colors=sgiu.colors;colors.push(scope.colors[indexPointerC++]);colors.push(scope.colors[indexPointerC++]);colors.push(scope.colors[indexPointerC]);}
if(faceIndexU){var indexPointerU=(parseInt(faceIndexU)-scope.globalUvOffset)*2;var uvs=sgiu.uvs;uvs.push(scope.uvs[indexPointerU++]);uvs.push(scope.uvs[indexPointerU]);}
if(faceIndexN){var indexPointerN=(parseInt(faceIndexN)-scope.globalNormalOffset)*3;var normals=sgiu.normals;normals.push(scope.normals[indexPointerN++]);normals.push(scope.normals[indexPointerN++]);normals.push(scope.normals[indexPointerN]);}};if(this.useIndices){var mappingName=faceIndexV+(faceIndexU?'_'+faceIndexU:'_n')+(faceIndexN?'_'+faceIndexN:'_n');var indicesPointer=sgiu.indexMappings[mappingName];if(Validator.isValid(indicesPointer)){this.doubleIndicesCount++;}else{indicesPointer=sgiu.vertices.length/3;updateRawObjectDescriptionInUse();sgiu.indexMappings[mappingName]=indicesPointer;sgiu.indexMappingsCount++;}
sgiu.indices.push(indicesPointer);}else{updateRawObjectDescriptionInUse();}
this.faceCount++;};RawMesh.prototype.buildLineVvt=function(lineArray){for(var i=1,length=lineArray.length;i<length;i++){this.vertices.push(parseInt(lineArray[i]));this.uvs.push(parseInt(lineArray[i]));}};RawMesh.prototype.buildLineV=function(lineArray){for(var i=1,length=lineArray.length;i<length;i++){this.vertices.push(parseInt(lineArray[i]));}};RawMesh.prototype.finalize=function(){var rawObjectDescriptionsTemp=[];var rawObjectDescription;var absoluteVertexCount=0;var absoluteIndexMappingsCount=0;var absoluteIndexCount=0;var absoluteColorCount=0;var absoluteNormalCount=0;var absoluteUvCount=0;var indices;for(var name in this.subGroups){rawObjectDescription=this.subGroups[name];if(rawObjectDescription.vertices.length>0){indices=rawObjectDescription.indices;if(indices.length>0&&absoluteIndexMappingsCount>0){for(var i in indices)indices[i]=indices[i]+absoluteIndexMappingsCount;}
rawObjectDescriptionsTemp.push(rawObjectDescription);absoluteVertexCount+=rawObjectDescription.vertices.length;absoluteIndexMappingsCount+=rawObjectDescription.indexMappingsCount;absoluteIndexCount+=rawObjectDescription.indices.length;absoluteColorCount+=rawObjectDescription.colors.length;absoluteUvCount+=rawObjectDescription.uvs.length;absoluteNormalCount+=rawObjectDescription.normals.length;}}
var result=null;if(rawObjectDescriptionsTemp.length>0){result={name:this.groupName!==''?this.groupName:this.objectName,subGroups:rawObjectDescriptionsTemp,absoluteVertexCount:absoluteVertexCount,absoluteIndexCount:absoluteIndexCount,absoluteColorCount:absoluteColorCount,absoluteNormalCount:absoluteNormalCount,absoluteUvCount:absoluteUvCount,faceCount:this.faceCount,doubleIndicesCount:this.doubleIndicesCount};}
return result;};RawMesh.prototype.createReport=function(){var report={objectName:this.objectName,groupName:this.groupName,mtllibName:this.mtllibName,vertexCount:this.vertices.length/3,normalCount:this.normals.length/3,uvCount:this.uvs.length/2,smoothingGroupCount:this.smoothingGroupCount,mtlCount:this.mtlCount,subGroups:this.subGroups.length};return report;};return RawMesh;})();var RawMeshSubGroup=(function(){function RawMeshSubGroup(objectName,groupName,materialName,smoothingGroup){this.objectName=objectName;this.groupName=groupName;this.materialName=materialName;this.smoothingGroup=smoothingGroup;this.vertices=[];this.indexMappingsCount=0;this.indexMappings=[];this.indices=[];this.colors=[];this.uvs=[];this.normals=[];}
return RawMeshSubGroup;})();OBJLoader2.prototype._checkFiles=function(resources){var resource;var result={mtl:null,obj:null};for(var index in resources){resource=resources[index];if(!Validator.isValid(resource.name))continue;if(Validator.isValid(resource.content)){if(resource.extension==='OBJ'){if(!(resource.content instanceof Uint8Array))throw'Provided content is not of type arraybuffer! Aborting...';result.obj=resource;}else if(resource.extension==='MTL'&&Validator.isValid(resource.name)){if(!(typeof(resource.content)==='string'||resource.content instanceof String))throw'Provided  content is not of type String! Aborting...';result.mtl=resource;}else if(resource.extension==="ZIP"){}else{throw'Unidentified resource "'+resource.name+'": '+resource.url;}}else{if(!(typeof(resource.name)==='string'||resource.name instanceof String))throw'Provided file is not properly defined! Aborting...';if(resource.extension==='OBJ'){result.obj=resource;}else if(resource.extension==='MTL'){result.mtl=resource;}else if(resource.extension==="ZIP"){}else{throw'Unidentified resource "'+resource.name+'": '+resource.url;}}}
return result;};OBJLoader2.prototype.loadMtl=function(url,name,content,callbackOnLoad,crossOrigin){var resource=new THREE.LoaderSupport.ResourceDescriptor(url,'MTL');resource.setContent(content);this._loadMtl(resource,callbackOnLoad,crossOrigin);};OBJLoader2.prototype._loadMtl=function(resource,callbackOnLoad,crossOrigin){if(Validator.isValid(resource))this.logger.logTimeStart('Loading MTL: '+resource.name);var materials=[];var scope=this;var processMaterials=function(materialCreator){var materialCreatorMaterials=[];if(Validator.isValid(materialCreator)){materialCreator.preload();materialCreatorMaterials=materialCreator.materials;for(var materialName in materialCreatorMaterials){if(materialCreatorMaterials.hasOwnProperty(materialName)){materials[materialName]=materialCreatorMaterials[materialName];}}}
if(Validator.isValid(resource))scope.logger.logTimeEnd('Loading MTL: '+resource.name);callbackOnLoad(materials);};var mtlLoader=new THREE.MTLLoader();crossOrigin=Validator.verifyInput(crossOrigin,'anonymous');mtlLoader.setCrossOrigin(crossOrigin);if(!Validator.isValid(resource)||(!Validator.isValid(resource.content)&&!Validator.isValid(resource.url))){processMaterials();}else{mtlLoader.setPath(resource.path);if(Validator.isValid(resource.content)){processMaterials(Validator.isValid(resource.content)?mtlLoader.parse(resource.content):null);}else if(Validator.isValid(resource.url)){var onError=function(event){var output='Error occurred while downloading "'+resource.url+'"';this.logger.logError(output+': '+event);throw output;};mtlLoader.load(resource.name,processMaterials,undefined,onError);}}};return OBJLoader2;})();THREE.MTLLoader=function(manager){this.manager=(manager!==undefined)?manager:THREE.DefaultLoadingManager;};THREE.MTLLoader.prototype={constructor:THREE.MTLLoader,load:function(url,onLoad,onProgress,onError){var scope=this;var loader=new THREE.FileLoader(this.manager);loader.setPath(this.path);loader.load(url,function(text){onLoad(scope.parse(text));},onProgress,onError);},setPath:function(path){this.path=path;},setTexturePath:function(path){this.texturePath=path;},setBaseUrl:function(path){console.warn('THREE.MTLLoader: .setBaseUrl() is deprecated. Use .setTexturePath( path ) for texture path or .setPath( path ) for general base path instead.');this.setTexturePath(path);},setCrossOrigin:function(value){this.crossOrigin=value;},setMaterialOptions:function(value){this.materialOptions=value;},parse:function(text){var lines=text.split('\n');var info={};var delimiter_pattern=/\s+/;var materialsInfo={};for(var i=0;i<lines.length;i++){var line=lines[i];line=line.trim();if(line.length===0||line.charAt(0)==='#'){continue;}
var pos=line.indexOf(' ');var key=(pos>=0)?line.substring(0,pos):line;key=key.toLowerCase();var value=(pos>=0)?line.substring(pos+1):'';value=value.trim();if(key==='newmtl'){info={name:value};materialsInfo[value]=info;}else if(info){if(key==='ka'||key==='kd'||key==='ks'){var ss=value.split(delimiter_pattern,3);info[key]=[parseFloat(ss[0]),parseFloat(ss[1]),parseFloat(ss[2])];}else{info[key]=value;}}}
var materialCreator=new THREE.MTLLoader.MaterialCreator(this.texturePath||this.path,this.materialOptions);materialCreator.setCrossOrigin(this.crossOrigin);materialCreator.setManager(this.manager);materialCreator.setMaterials(materialsInfo);return materialCreator;}};THREE.MTLLoader.MaterialCreator=function(baseUrl,options){this.baseUrl=baseUrl||'';this.options=options;this.materialsInfo={};this.materials={};this.materialsArray=[];this.nameLookup={};this.side=(this.options&&this.options.side)?this.options.side:THREE.FrontSide;this.wrap=(this.options&&this.options.wrap)?this.options.wrap:THREE.RepeatWrapping;};THREE.MTLLoader.MaterialCreator.prototype={constructor:THREE.MTLLoader.MaterialCreator,crossOrigin:'Anonymous',setCrossOrigin:function(value){this.crossOrigin=value;},setManager:function(value){this.manager=value;},setMaterials:function(materialsInfo){this.materialsInfo=this.convert(materialsInfo);this.materials={};this.materialsArray=[];this.nameLookup={};},convert:function(materialsInfo){if(!this.options)return materialsInfo;var converted={};for(var mn in materialsInfo){var mat=materialsInfo[mn];var covmat={};converted[mn]=covmat;for(var prop in mat){var save=true;var value=mat[prop];var lprop=prop.toLowerCase();switch(lprop){case'kd':case'ka':case'ks':if(this.options&&this.options.normalizeRGB){value=[value[0]/255,value[1]/255,value[2]/255];}
if(this.options&&this.options.ignoreZeroRGBs){if(value[0]===0&&value[1]===0&&value[2]===0){save=false;}}
break;default:break;}
if(save){covmat[lprop]=value;}}}
return converted;},preload:function(){for(var mn in this.materialsInfo){this.create(mn);}},getIndex:function(materialName){return this.nameLookup[materialName];},getAsArray:function(){var index=0;for(var mn in this.materialsInfo){this.materialsArray[index]=this.create(mn);this.nameLookup[mn]=index;index++;}
return this.materialsArray;},create:function(materialName){if(this.materials[materialName]===undefined){this.createMaterial_(materialName);}
return this.materials[materialName];},createMaterial_:function(materialName){var scope=this;var mat=this.materialsInfo[materialName];var params={name:materialName,side:this.side};function resolveURL(baseUrl,url){if(typeof url!=='string'||url==='')
return'';if(/^https?:\/\//i.test(url))return url;return baseUrl+url;}
function setMapForType(mapType,value){if(params[mapType])return;var texParams=scope.getTextureParams(value,params);var map=scope.loadTexture(resolveURL(scope.baseUrl,texParams.url));map.repeat.copy(texParams.scale);map.offset.copy(texParams.offset);map.wrapS=scope.wrap;map.wrapT=scope.wrap;params[mapType]=map;}
for(var prop in mat){var value=mat[prop];var n;if(value==='')continue;switch(prop.toLowerCase()){case'kd':params.color=new THREE.Color().fromArray(value);break;case'ks':params.specular=new THREE.Color().fromArray(value);break;case'map_kd':setMapForType("map",value);break;case'map_ks':setMapForType("specularMap",value);break;case'norm':setMapForType("normalMap",value);break;case'map_bump':case'bump':setMapForType("bumpMap",value);break;case'ns':params.shininess=parseFloat(value);break;case'd':n=parseFloat(value);if(n<1){params.opacity=n;params.transparent=true;}
break;case'tr':n=parseFloat(value);if(n>0){params.opacity=1-n;params.transparent=true;}
break;default:break;}}
this.materials[materialName]=new THREE.MeshPhongMaterial(params);return this.materials[materialName];},getTextureParams:function(value,matParams){var texParams={scale:new THREE.Vector2(1,1),offset:new THREE.Vector2(0,0)};var items=value.split(/\s+/);var pos;pos=items.indexOf('-bm');if(pos>=0){matParams.bumpScale=parseFloat(items[pos+1]);items.splice(pos,2);}
pos=items.indexOf('-s');if(pos>=0){texParams.scale.set(parseFloat(items[pos+1]),parseFloat(items[pos+2]));items.splice(pos,4);}
pos=items.indexOf('-o');if(pos>=0){texParams.offset.set(parseFloat(items[pos+1]),parseFloat(items[pos+2]));items.splice(pos,4);}
texParams.url=items.join(' ').trim();return texParams;},loadTexture:function(url,mapping,onLoad,onProgress,onError){var texture;var loader=THREE.Loader.Handlers.get(url);var manager=(this.manager!==undefined)?this.manager:THREE.DefaultLoadingManager;if(loader===null){loader=new THREE.TextureLoader(manager);}
if(loader.setCrossOrigin)loader.setCrossOrigin(this.crossOrigin);texture=loader.load(url,onLoad,onProgress,onError);if(mapping!==undefined)texture.mapping=mapping;return texture;}};THREE.PlayCanvasLoader=function(manager){this.manager=(manager!==undefined)?manager:THREE.DefaultLoadingManager;};THREE.PlayCanvasLoader.prototype={constructor:THREE.PlayCanvasLoader,load:function(url,onLoad,onProgress,onError){var scope=this;var loader=new THREE.FileLoader(scope.manager);loader.load(url,function(text){onLoad(scope.parse(JSON.parse(text)));},onProgress,onError);},parse:function(json){function parseVertices(data){var attributes={};for(var name in data){var array=data[name];var type=array.type;var size=array.components;var attribute;switch(type){case'float32':attribute=new THREE.Float32BufferAttribute(array.data,size);break;case'uint8':attribute=new THREE.Uint8BufferAttribute(array.data,size);break;case'uint16':attribute=new THREE.Uint16BufferAttribute(array.data,size);break;default:console.log('THREE.PlayCanvasLoader: Array type "%s" not yet supported.',type);}
attributes[name]=attribute;}
data._attributes=attributes;}
function parseMeshes(data){var geometry=new THREE.BufferGeometry();geometry.setIndex(data.indices);var attributes=model.vertices[data.vertices]._attributes;for(var name in attributes){var attribute=attributes[name];if(name==='texCoord0')name='uv';geometry.addAttribute(name,attribute);}
data._geometry=geometry;}
function parseMeshInstances(data){var node=model.nodes[data.node];var mesh=model.meshes[data.mesh];if(node._geometries===undefined){node._geometries=[];}
node._geometries.push(mesh._geometry);}
function parseNodes(data){var object=new THREE.Group();var geometries=data._geometries;if(geometries!==undefined){var material=new THREE.MeshPhongMaterial();for(var i=0,l=geometries.length;i<l;i++){var geometry=geometries[i];object.add(new THREE.Mesh(geometry,material));}}
for(var i=0,l=data.rotation.length;i<l;i++){data.rotation[i]*=Math.PI/180;}
object.name=data.name;object.position.fromArray(data.position);object.rotation.fromArray(data.rotation);object.scale.fromArray(data.scale);data._object=object;}
var model=json.model;for(var i=0,l=model.vertices.length;i<l;i++){parseVertices(model.vertices[i]);}
for(var i=0,l=model.meshes.length;i<l;i++){parseMeshes(model.meshes[i]);}
for(var i=0,l=model.meshInstances.length;i<l;i++){parseMeshInstances(model.meshInstances[i]);}
for(var i=0,l=model.nodes.length;i<l;i++){parseNodes(model.nodes[i]);}
for(var i=0,l=model.parents.length;i<l;i++){var parent=model.parents[i];if(parent===-1)continue;model.nodes[parent]._object.add(model.nodes[i]._object);}
return model.nodes[0]._object;}};THREE.PLYLoader=function(manager){this.manager=(manager!==undefined)?manager:THREE.DefaultLoadingManager;this.propertyNameMapping={};};THREE.PLYLoader.prototype={constructor:THREE.PLYLoader,load:function(url,onLoad,onProgress,onError){var scope=this;var loader=new THREE.FileLoader(this.manager);loader.setResponseType('arraybuffer');loader.load(url,function(text){onLoad(scope.parse(text));},onProgress,onError);},setPropertyNameMapping:function(mapping){this.propertyNameMapping=mapping;},parse:function(data){function bin2str(buf){var array_buffer=new Uint8Array(buf);if(window.TextDecoder!==undefined){return new TextDecoder().decode(array_buffer);}
var str='';for(var i=0,il=buf.byteLength;i<il;i++){str+=String.fromCharCode(array_buffer[i]);}
return str;}
function parseHeader(data){var patternHeader=/ply([\s\S]*)end_header\s/;var headerText='';var headerLength=0;var result=patternHeader.exec(data);if(result!==null){headerText=result[1];headerLength=result[0].length;}
var header={comments:[],elements:[],headerLength:headerLength};var lines=headerText.split('\n');var currentElement;var lineType,lineValues;function make_ply_element_property(propertValues,propertyNameMapping){var property={type:propertValues[0]};if(property.type==='list'){property.name=propertValues[3];property.countType=propertValues[1];property.itemType=propertValues[2];}else{property.name=propertValues[1];}
if(property.name in propertyNameMapping){property.name=propertyNameMapping[property.name];}
return property;}
for(var i=0;i<lines.length;i++){var line=lines[i];line=line.trim();if(line==='')continue;lineValues=line.split(/\s+/);lineType=lineValues.shift();line=lineValues.join(' ');switch(lineType){case'format':header.format=lineValues[0];header.version=lineValues[1];break;case'comment':header.comments.push(line);break;case'element':if(currentElement!==undefined){header.elements.push(currentElement);}
currentElement={};currentElement.name=lineValues[0];currentElement.count=parseInt(lineValues[1]);currentElement.properties=[];break;case'property':currentElement.properties.push(make_ply_element_property(lineValues,scope.propertyNameMapping));break;default:console.log('unhandled',lineType,lineValues);}}
if(currentElement!==undefined){header.elements.push(currentElement);}
return header;}
function parseASCIINumber(n,type){switch(type){case'char':case'uchar':case'short':case'ushort':case'int':case'uint':case'int8':case'uint8':case'int16':case'uint16':case'int32':case'uint32':return parseInt(n);case'float':case'double':case'float32':case'float64':return parseFloat(n);}}
function parseASCIIElement(properties,line){var values=line.split(/\s+/);var element={};for(var i=0;i<properties.length;i++){if(properties[i].type==='list'){var list=[];var n=parseASCIINumber(values.shift(),properties[i].countType);for(var j=0;j<n;j++){list.push(parseASCIINumber(values.shift(),properties[i].itemType));}
element[properties[i].name]=list;}else{element[properties[i].name]=parseASCIINumber(values.shift(),properties[i].type);}}
return element;}
function parseASCII(data,header){var buffer={indices:[],vertices:[],normals:[],uvs:[],colors:[]};var result;var patternBody=/end_header\s([\s\S]*)$/;var body='';if((result=patternBody.exec(data))!==null){body=result[1];}
var lines=body.split('\n');var currentElement=0;var currentElementCount=0;for(var i=0;i<lines.length;i++){var line=lines[i];line=line.trim();if(line===''){continue;}
if(currentElementCount>=header.elements[currentElement].count){currentElement++;currentElementCount=0;}
var element=parseASCIIElement(header.elements[currentElement].properties,line);handleElement(buffer,header.elements[currentElement].name,element);currentElementCount++;}
return postProcess(buffer);}
function postProcess(buffer){var geometry=new THREE.BufferGeometry();if(buffer.indices.length>0){geometry.setIndex(buffer.indices);}
geometry.addAttribute('position',new THREE.Float32BufferAttribute(buffer.vertices,3));if(buffer.normals.length>0){geometry.addAttribute('normal',new THREE.Float32BufferAttribute(buffer.normals,3));}
if(buffer.uvs.length>0){geometry.addAttribute('uv',new THREE.Float32BufferAttribute(buffer.uvs,2));}
if(buffer.colors.length>0){geometry.addAttribute('color',new THREE.Float32BufferAttribute(buffer.colors,3));}
geometry.computeBoundingSphere();return geometry;}
function handleElement(buffer,elementName,element){if(elementName==='vertex'){buffer.vertices.push(element.x,element.y,element.z);if('nx'in element&&'ny'in element&&'nz'in element){buffer.normals.push(element.nx,element.ny,element.nz);}
if('s'in element&&'t'in element){buffer.uvs.push(element.s,element.t);}
if('red'in element&&'green'in element&&'blue'in element){buffer.colors.push(element.red/255.0,element.green/255.0,element.blue/255.0);}}else if(elementName==='face'){var vertex_indices=element.vertex_indices||element.vertex_index;if(vertex_indices.length===3){buffer.indices.push(vertex_indices[0],vertex_indices[1],vertex_indices[2]);}else if(vertex_indices.length===4){buffer.indices.push(vertex_indices[0],vertex_indices[1],vertex_indices[3]);buffer.indices.push(vertex_indices[1],vertex_indices[2],vertex_indices[3]);}}}
function binaryRead(dataview,at,type,little_endian){switch(type){case'int8':case'char':return[dataview.getInt8(at),1];case'uint8':case'uchar':return[dataview.getUint8(at),1];case'int16':case'short':return[dataview.getInt16(at,little_endian),2];case'uint16':case'ushort':return[dataview.getUint16(at,little_endian),2];case'int32':case'int':return[dataview.getInt32(at,little_endian),4];case'uint32':case'uint':return[dataview.getUint32(at,little_endian),4];case'float32':case'float':return[dataview.getFloat32(at,little_endian),4];case'float64':case'double':return[dataview.getFloat64(at,little_endian),8];}}
function binaryReadElement(dataview,at,properties,little_endian){var element={};var result,read=0;for(var i=0;i<properties.length;i++){if(properties[i].type==='list'){var list=[];result=binaryRead(dataview,at+read,properties[i].countType,little_endian);var n=result[0];read+=result[1];for(var j=0;j<n;j++){result=binaryRead(dataview,at+read,properties[i].itemType,little_endian);list.push(result[0]);read+=result[1];}
element[properties[i].name]=list;}else{result=binaryRead(dataview,at+read,properties[i].type,little_endian);element[properties[i].name]=result[0];read+=result[1];}}
return[element,read];}
function parseBinary(data,header){var buffer={indices:[],vertices:[],normals:[],uvs:[],colors:[]};var little_endian=(header.format==='binary_little_endian');var body=new DataView(data,header.headerLength);var result,loc=0;for(var currentElement=0;currentElement<header.elements.length;currentElement++){for(var currentElementCount=0;currentElementCount<header.elements[currentElement].count;currentElementCount++){result=binaryReadElement(body,loc,header.elements[currentElement].properties,little_endian);loc+=result[1];var element=result[0];handleElement(buffer,header.elements[currentElement].name,element);}}
return postProcess(buffer);}
var geometry;var scope=this;if(data instanceof ArrayBuffer){var text=bin2str(data);var header=parseHeader(text);geometry=header.format==='ascii'?parseASCII(text,header):parseBinary(data,header);}else{geometry=parseASCII(data,parseHeader(data));}
return geometry;}};THREE.STLLoader=function(manager){this.manager=(manager!==undefined)?manager:THREE.DefaultLoadingManager;};THREE.STLLoader.prototype={constructor:THREE.STLLoader,load:function(url,onLoad,onProgress,onError){var scope=this;var loader=new THREE.FileLoader(scope.manager);loader.setResponseType('arraybuffer');loader.load(url,function(text){onLoad(scope.parse(text));},onProgress,onError);},parse:function(data){function isBinary(data){var expect,face_size,n_faces,reader;reader=new DataView(data);face_size=(32/8*3)+((32/8*3)*3)+(16/8);n_faces=reader.getUint32(80,true);expect=80+(32/8)+(n_faces*face_size);if(expect===reader.byteLength){return true;}
var solid=[115,111,108,105,100];for(var i=0;i<5;i++){if(solid[i]!=reader.getUint8(i,false))return true;}
return false;}
function parseBinary(data){var reader=new DataView(data);var faces=reader.getUint32(80,true);var r,g,b,hasColors=false,colors;var defaultR,defaultG,defaultB,alpha;for(var index=0;index<80-10;index++){if((reader.getUint32(index,false)==0x434F4C4F)&&(reader.getUint8(index+4)==0x52)&&(reader.getUint8(index+5)==0x3D)){hasColors=true;colors=[];defaultR=reader.getUint8(index+6)/255;defaultG=reader.getUint8(index+7)/255;defaultB=reader.getUint8(index+8)/255;alpha=reader.getUint8(index+9)/255;}}
var dataOffset=84;var faceLength=12*4+2;var geometry=new THREE.BufferGeometry();var vertices=[];var normals=[];for(var face=0;face<faces;face++){var start=dataOffset+face*faceLength;var normalX=reader.getFloat32(start,true);var normalY=reader.getFloat32(start+4,true);var normalZ=reader.getFloat32(start+8,true);if(hasColors){var packedColor=reader.getUint16(start+48,true);if((packedColor&0x8000)===0){r=(packedColor&0x1F)/31;g=((packedColor>>5)&0x1F)/31;b=((packedColor>>10)&0x1F)/31;}else{r=defaultR;g=defaultG;b=defaultB;}}
for(var i=1;i<=3;i++){var vertexstart=start+i*12;vertices.push(reader.getFloat32(vertexstart,true));vertices.push(reader.getFloat32(vertexstart+4,true));vertices.push(reader.getFloat32(vertexstart+8,true));normals.push(normalX,normalY,normalZ);if(hasColors){colors.push(r,g,b);}}}
geometry.addAttribute('position',new THREE.BufferAttribute(new Float32Array(vertices),3));geometry.addAttribute('normal',new THREE.BufferAttribute(new Float32Array(normals),3));if(hasColors){geometry.addAttribute('color',new THREE.BufferAttribute(new Float32Array(colors),3));geometry.hasColors=true;geometry.alpha=alpha;}
return geometry;}
function parseASCII(data){var geometry=new THREE.BufferGeometry();var patternFace=/facet([\s\S]*?)endfacet/g;var faceCounter=0;var patternFloat=/[\s]+([+-]?(?:\d+.\d+|\d+.|\d+|.\d+)(?:[eE][+-]?\d+)?)/.source;var patternVertex=new RegExp('vertex'+patternFloat+patternFloat+patternFloat,'g');var patternNormal=new RegExp('normal'+patternFloat+patternFloat+patternFloat,'g');var vertices=[];var normals=[];var normal=new THREE.Vector3();var result;while((result=patternFace.exec(data))!==null){var vertexCountPerFace=0;var normalCountPerFace=0;var text=result[0];while((result=patternNormal.exec(text))!==null){normal.x=parseFloat(result[1]);normal.y=parseFloat(result[2]);normal.z=parseFloat(result[3]);normalCountPerFace++;}
while((result=patternVertex.exec(text))!==null){vertices.push(parseFloat(result[1]),parseFloat(result[2]),parseFloat(result[3]));normals.push(normal.x,normal.y,normal.z);vertexCountPerFace++;}
if(normalCountPerFace!==1){console.error('THREE.STLLoader: Something isn\'t right with the normal of face number '+faceCounter);}
if(vertexCountPerFace!==3){console.error('THREE.STLLoader: Something isn\'t right with the vertices of face number '+faceCounter);}
faceCounter++;}
geometry.addAttribute('position',new THREE.Float32BufferAttribute(vertices,3));geometry.addAttribute('normal',new THREE.Float32BufferAttribute(normals,3));return geometry;}
function ensureString(buffer){if(typeof buffer!=='string'){var array_buffer=new Uint8Array(buffer);if(window.TextDecoder!==undefined){return new TextDecoder().decode(array_buffer);}
var str='';for(var i=0,il=buffer.byteLength;i<il;i++){str+=String.fromCharCode(array_buffer[i]);}
return str;}else{return buffer;}}
function ensureBinary(buffer){if(typeof buffer==='string'){var array_buffer=new Uint8Array(buffer.length);for(var i=0;i<buffer.length;i++){array_buffer[i]=buffer.charCodeAt(i)&0xff;}
return array_buffer.buffer||array_buffer;}else{return buffer;}}
var binData=ensureBinary(data);return isBinary(binData)?parseBinary(binData):parseASCII(ensureString(data));}};THREE.TGALoader=function(manager){this.manager=(manager!==undefined)?manager:THREE.DefaultLoadingManager;};THREE.TGALoader.prototype={constructor:THREE.TGALoader,load:function(url,onLoad,onProgress,onError){var scope=this;var texture=new THREE.Texture();var loader=new THREE.FileLoader(this.manager);loader.setResponseType('arraybuffer');loader.load(url,function(buffer){texture.image=scope.parse(buffer);texture.needsUpdate=true;if(onLoad!==undefined){onLoad(texture);}},onProgress,onError);return texture;},parse:function(buffer){function tgaCheckHeader(header){switch(header.image_type){case TGA_TYPE_INDEXED:case TGA_TYPE_RLE_INDEXED:if(header.colormap_length>256||header.colormap_size!==24||header.colormap_type!==1){console.error('THREE.TGALoader: Invalid type colormap data for indexed type.');}
break;case TGA_TYPE_RGB:case TGA_TYPE_GREY:case TGA_TYPE_RLE_RGB:case TGA_TYPE_RLE_GREY:if(header.colormap_type){console.error('THREE.TGALoader: Invalid type colormap data for colormap type.');}
break;case TGA_TYPE_NO_DATA:console.error('THREE.TGALoader: No data.');default:console.error('THREE.TGALoader: Invalid type "%s".',header.image_type);}
if(header.width<=0||header.height<=0){console.error('THREE.TGALoader: Invalid image size.');}
if(header.pixel_size!==8&&header.pixel_size!==16&&header.pixel_size!==24&&header.pixel_size!==32){console.error('THREE.TGALoader: Invalid pixel size "%s".',header.pixel_size);}}
function tgaParse(use_rle,use_pal,header,offset,data){var pixel_data,pixel_size,pixel_total,palettes;pixel_size=header.pixel_size>>3;pixel_total=header.width*header.height*pixel_size;if(use_pal){palettes=data.subarray(offset,offset+=header.colormap_length*(header.colormap_size>>3));}
if(use_rle){pixel_data=new Uint8Array(pixel_total);var c,count,i;var shift=0;var pixels=new Uint8Array(pixel_size);while(shift<pixel_total){c=data[offset++];count=(c&0x7f)+1;if(c&0x80){for(i=0;i<pixel_size;++i){pixels[i]=data[offset++];}
for(i=0;i<count;++i){pixel_data.set(pixels,shift+i*pixel_size);}
shift+=pixel_size*count;}else{count*=pixel_size;for(i=0;i<count;++i){pixel_data[shift+i]=data[offset++];}
shift+=count;}}}else{pixel_data=data.subarray(offset,offset+=(use_pal?header.width*header.height:pixel_total));}
return{pixel_data:pixel_data,palettes:palettes};}
function tgaGetImageData8bits(imageData,y_start,y_step,y_end,x_start,x_step,x_end,image,palettes){var colormap=palettes;var color,i=0,x,y;var width=header.width;for(y=y_start;y!==y_end;y+=y_step){for(x=x_start;x!==x_end;x+=x_step,i++){color=image[i];imageData[(x+width*y)*4+3]=255;imageData[(x+width*y)*4+2]=colormap[(color*3)+0];imageData[(x+width*y)*4+1]=colormap[(color*3)+1];imageData[(x+width*y)*4+0]=colormap[(color*3)+2];}}
return imageData;}
function tgaGetImageData16bits(imageData,y_start,y_step,y_end,x_start,x_step,x_end,image){var color,i=0,x,y;var width=header.width;for(y=y_start;y!==y_end;y+=y_step){for(x=x_start;x!==x_end;x+=x_step,i+=2){color=image[i+0]+(image[i+1]<<8);imageData[(x+width*y)*4+0]=(color&0x7C00)>>7;imageData[(x+width*y)*4+1]=(color&0x03E0)>>2;imageData[(x+width*y)*4+2]=(color&0x001F)>>3;imageData[(x+width*y)*4+3]=(color&0x8000)?0:255;}}
return imageData;}
function tgaGetImageData24bits(imageData,y_start,y_step,y_end,x_start,x_step,x_end,image){var i=0,x,y;var width=header.width;for(y=y_start;y!==y_end;y+=y_step){for(x=x_start;x!==x_end;x+=x_step,i+=3){imageData[(x+width*y)*4+3]=255;imageData[(x+width*y)*4+2]=image[i+0];imageData[(x+width*y)*4+1]=image[i+1];imageData[(x+width*y)*4+0]=image[i+2];}}
return imageData;}
function tgaGetImageData32bits(imageData,y_start,y_step,y_end,x_start,x_step,x_end,image){var i=0,x,y;var width=header.width;for(y=y_start;y!==y_end;y+=y_step){for(x=x_start;x!==x_end;x+=x_step,i+=4){imageData[(x+width*y)*4+2]=image[i+0];imageData[(x+width*y)*4+1]=image[i+1];imageData[(x+width*y)*4+0]=image[i+2];imageData[(x+width*y)*4+3]=image[i+3];}}
return imageData;}
function tgaGetImageDataGrey8bits(imageData,y_start,y_step,y_end,x_start,x_step,x_end,image){var color,i=0,x,y;var width=header.width;for(y=y_start;y!==y_end;y+=y_step){for(x=x_start;x!==x_end;x+=x_step,i++){color=image[i];imageData[(x+width*y)*4+0]=color;imageData[(x+width*y)*4+1]=color;imageData[(x+width*y)*4+2]=color;imageData[(x+width*y)*4+3]=255;}}
return imageData;}
function tgaGetImageDataGrey16bits(imageData,y_start,y_step,y_end,x_start,x_step,x_end,image){var i=0,x,y;var width=header.width;for(y=y_start;y!==y_end;y+=y_step){for(x=x_start;x!==x_end;x+=x_step,i+=2){imageData[(x+width*y)*4+0]=image[i+0];imageData[(x+width*y)*4+1]=image[i+0];imageData[(x+width*y)*4+2]=image[i+0];imageData[(x+width*y)*4+3]=image[i+1];}}
return imageData;}
function getTgaRGBA(data,width,height,image,palette){var x_start,y_start,x_step,y_step,x_end,y_end;switch((header.flags&TGA_ORIGIN_MASK)>>TGA_ORIGIN_SHIFT){default:case TGA_ORIGIN_UL:x_start=0;x_step=1;x_end=width;y_start=0;y_step=1;y_end=height;break;case TGA_ORIGIN_BL:x_start=0;x_step=1;x_end=width;y_start=height-1;y_step=-1;y_end=-1;break;case TGA_ORIGIN_UR:x_start=width-1;x_step=-1;x_end=-1;y_start=0;y_step=1;y_end=height;break;case TGA_ORIGIN_BR:x_start=width-1;x_step=-1;x_end=-1;y_start=height-1;y_step=-1;y_end=-1;break;}
if(use_grey){switch(header.pixel_size){case 8:tgaGetImageDataGrey8bits(data,y_start,y_step,y_end,x_start,x_step,x_end,image);break;case 16:tgaGetImageDataGrey16bits(data,y_start,y_step,y_end,x_start,x_step,x_end,image);break;default:console.error('THREE.TGALoader: Format not supported.');break;}}else{switch(header.pixel_size){case 8:tgaGetImageData8bits(data,y_start,y_step,y_end,x_start,x_step,x_end,image,palette);break;case 16:tgaGetImageData16bits(data,y_start,y_step,y_end,x_start,x_step,x_end,image);break;case 24:tgaGetImageData24bits(data,y_start,y_step,y_end,x_start,x_step,x_end,image);break;case 32:tgaGetImageData32bits(data,y_start,y_step,y_end,x_start,x_step,x_end,image);break;default:console.error('THREE.TGALoader: Format not supported.');break;}}
return data;}
var TGA_TYPE_NO_DATA=0,TGA_TYPE_INDEXED=1,TGA_TYPE_RGB=2,TGA_TYPE_GREY=3,TGA_TYPE_RLE_INDEXED=9,TGA_TYPE_RLE_RGB=10,TGA_TYPE_RLE_GREY=11,TGA_ORIGIN_MASK=0x30,TGA_ORIGIN_SHIFT=0x04,TGA_ORIGIN_BL=0x00,TGA_ORIGIN_BR=0x01,TGA_ORIGIN_UL=0x02,TGA_ORIGIN_UR=0x03;if(buffer.length<19)console.error('THREE.TGALoader: Not enough data to contain header.');var content=new Uint8Array(buffer),offset=0,header={id_length:content[offset++],colormap_type:content[offset++],image_type:content[offset++],colormap_index:content[offset++]|content[offset++]<<8,colormap_length:content[offset++]|content[offset++]<<8,colormap_size:content[offset++],origin:[content[offset++]|content[offset++]<<8,content[offset++]|content[offset++]<<8],width:content[offset++]|content[offset++]<<8,height:content[offset++]|content[offset++]<<8,pixel_size:content[offset++],flags:content[offset++]};tgaCheckHeader(header);if(header.id_length+offset>buffer.length){console.error('THREE.TGALoader: No data.');}
offset+=header.id_length;var use_rle=false,use_pal=false,use_grey=false;switch(header.image_type){case TGA_TYPE_RLE_INDEXED:use_rle=true;use_pal=true;break;case TGA_TYPE_INDEXED:use_pal=true;break;case TGA_TYPE_RLE_RGB:use_rle=true;break;case TGA_TYPE_RGB:break;case TGA_TYPE_RLE_GREY:use_rle=true;use_grey=true;break;case TGA_TYPE_GREY:use_grey=true;break;}
var canvas=document.createElement('canvas');canvas.width=header.width;canvas.height=header.height;var context=canvas.getContext('2d');var imageData=context.createImageData(header.width,header.height);var result=tgaParse(use_rle,use_pal,header,offset,content);var rgbaData=getTgaRGBA(imageData.data,header.width,header.height,result.pixel_data,result.palettes);context.putImageData(imageData,0,0);return canvas;}};'use strict';THREE.TDSLoader=function(manager){this.manager=(manager!==undefined)?manager:THREE.DefaultLoadingManager;this.debug=false;this.group=null;this.position=0;this.materials=[];this.meshes=[];this.path="";};THREE.TDSLoader.prototype={constructor:THREE.TDSLoader,load:function(url,onLoad,onProgress,onError){var scope=this;var loader=new THREE.FileLoader(this.manager);loader.setResponseType('arraybuffer');loader.load(url,function(data){onLoad(scope.parse(data));},onProgress,onError);},parse:function(arraybuffer){this.group=new THREE.Group();this.position=0;this.materials=[];this.meshes=[];this.readFile(arraybuffer);for(var i=0;i<this.meshes.length;i++){this.group.add(this.meshes[i]);}
return this.group;},readFile:function(arraybuffer){var data=new DataView(arraybuffer);var chunk=this.readChunk(data);if(chunk.id===MLIBMAGIC||chunk.id===CMAGIC||chunk.id===M3DMAGIC){var next=this.nextChunk(data,chunk);while(next!==0){if(next===M3D_VERSION){var version=this.readDWord(data);this.debugMessage('3DS file version: '+version);}else if(next===MDATA){this.resetPosition(data);this.readMeshData(data);}else{this.debugMessage('Unknown main chunk: '+next.toString(16));}
next=this.nextChunk(data,chunk);}}
this.debugMessage('Parsed '+this.meshes.length+' meshes');},readMeshData:function(data){var chunk=this.readChunk(data);var next=this.nextChunk(data,chunk);while(next!==0){if(next===MESH_VERSION){var version=+this.readDWord(data);this.debugMessage('Mesh Version: '+version);}else if(next===MASTER_SCALE){var scale=this.readFloat(data);this.debugMessage('Master scale: '+scale);this.group.scale.set(scale,scale,scale);}else if(next===NAMED_OBJECT){this.debugMessage('Named Object');this.resetPosition(data);this.readNamedObject(data);}else if(next===MAT_ENTRY){this.debugMessage('Material');this.resetPosition(data);this.readMaterialEntry(data);}else{this.debugMessage('Unknown MDATA chunk: '+next.toString(16));}
next=this.nextChunk(data,chunk);}},readNamedObject:function(data){var chunk=this.readChunk(data);var name=this.readString(data,64);chunk.cur=this.position;var next=this.nextChunk(data,chunk);while(next!==0){if(next===N_TRI_OBJECT){this.resetPosition(data);var mesh=this.readMesh(data);mesh.name=name;this.meshes.push(mesh);}else{this.debugMessage('Unknown named object chunk: '+next.toString(16));}
next=this.nextChunk(data,chunk);}
this.endChunk(chunk);},readMaterialEntry:function(data){var chunk=this.readChunk(data);var next=this.nextChunk(data,chunk);var material=new THREE.MeshPhongMaterial();while(next!==0){if(next===MAT_NAME){material.name=this.readString(data,64);this.debugMessage('   Name: '+material.name);}else if(next===MAT_WIRE){this.debugMessage('   Wireframe');material.wireframe=true;}else if(next===MAT_WIRE_SIZE){var value=this.readByte(data);material.wireframeLinewidth=value;this.debugMessage('   Wireframe Thickness: '+value);}else if(next===MAT_TWO_SIDE){material.side=THREE.DoubleSide;this.debugMessage('   DoubleSided');}else if(next===MAT_ADDITIVE){this.debugMessage('   Additive Blending');material.blending=THREE.AdditiveBlending;}else if(next===MAT_DIFFUSE){this.debugMessage('   Diffuse Color');material.color=this.readColor(data);}else if(next===MAT_SPECULAR){this.debugMessage('   Specular Color');material.specular=this.readColor(data);}else if(next===MAT_AMBIENT){this.debugMessage('   Ambient color');material.color=this.readColor(data);}else if(next===MAT_SHININESS){var shininess=this.readWord(data);material.shininess=shininess;this.debugMessage('   Shininess : '+shininess);}else if(next===MAT_TEXMAP){this.debugMessage('   ColorMap');this.resetPosition(data);material.map=this.readMap(data);}else if(next===MAT_BUMPMAP){this.debugMessage('   BumpMap');this.resetPosition(data);material.bumpMap=this.readMap(data);}else if(next===MAT_OPACMAP){this.debugMessage('   OpacityMap');this.resetPosition(data);material.alphaMap=this.readMap(data);}else if(next===MAT_SPECMAP){this.debugMessage('   SpecularMap');this.resetPosition(data);material.specularMap=this.readMap(data);}else{this.debugMessage('   Unknown material chunk: '+next.toString(16));}
next=this.nextChunk(data,chunk);}
this.endChunk(chunk);this.materials[material.name]=material;},readMesh:function(data){var chunk=this.readChunk(data);var next=this.nextChunk(data,chunk);var useBufferGeometry=false;var geometry=null;var uvs=[];if(useBufferGeometry){geometry=new THREE.BufferGeometry();}else{geometry=new THREE.Geometry();}
var material=new THREE.MeshPhongMaterial();var mesh=new THREE.Mesh(geometry,material);mesh.name='mesh';while(next!==0){if(next===POINT_ARRAY){var points=this.readWord(data);this.debugMessage('   Vertex: '+points);if(useBufferGeometry){var vertices=[];for(var i=0;i<points;i++){vertices.push(this.readFloat(data));vertices.push(this.readFloat(data));vertices.push(this.readFloat(data));}
geometry.addAttribute('position',new THREE.BufferAttribute(new Float32Array(vertices),3));}else{for(var i=0;i<points;i++){geometry.vertices.push(new THREE.Vector3(this.readFloat(data),this.readFloat(data),this.readFloat(data)));}}}else if(next===FACE_ARRAY){this.resetPosition(data);this.readFaceArray(data,mesh);}else if(next===TEX_VERTS){var texels=this.readWord(data);this.debugMessage('   UV: '+texels);if(useBufferGeometry){var uvs=[];for(var i=0;i<texels;i++){uvs.push(this.readFloat(data));uvs.push(this.readFloat(data));}
geometry.addAttribute('uv',new THREE.BufferAttribute(new Float32Array(uvs),2));}else{uvs=[];for(var i=0;i<texels;i++){uvs.push(new THREE.Vector2(this.readFloat(data),this.readFloat(data)));}}}else if(next===MESH_MATRIX){this.debugMessage('   Tranformation Matrix (TODO)');var values=[];for(var i=0;i<12;i++){values[i]=this.readFloat(data);}
var matrix=new THREE.Matrix4();matrix.elements[0]=values[0];matrix.elements[1]=values[6];matrix.elements[2]=values[3];matrix.elements[3]=values[9];matrix.elements[4]=values[2];matrix.elements[5]=values[8];matrix.elements[6]=values[5];matrix.elements[7]=values[11];matrix.elements[8]=values[1];matrix.elements[9]=values[7];matrix.elements[10]=values[4];matrix.elements[11]=values[10];matrix.elements[12]=0;matrix.elements[13]=0;matrix.elements[14]=0;matrix.elements[15]=1;matrix.transpose();var inverse=new THREE.Matrix4();inverse.getInverse(matrix,true);geometry.applyMatrix(inverse);matrix.decompose(mesh.position,mesh.quaternion,mesh.scale);}else{this.debugMessage('   Unknown mesh chunk: '+next.toString(16));}
next=this.nextChunk(data,chunk);}
this.endChunk(chunk);if(!useBufferGeometry){if(uvs.length>0){var faceUV=[];for(var i=0;i<geometry.faces.length;i++){faceUV.push([uvs[geometry.faces[i].a],uvs[geometry.faces[i].b],uvs[geometry.faces[i].c]]);}
geometry.faceVertexUvs[0]=faceUV;}
geometry.computeVertexNormals();}
return mesh;},readFaceArray:function(data,mesh){var chunk=this.readChunk(data);var faces=this.readWord(data);this.debugMessage('   Faces: '+faces);for(var i=0;i<faces;++i){mesh.geometry.faces.push(new THREE.Face3(this.readWord(data),this.readWord(data),this.readWord(data)));var visibility=this.readWord(data);}
while(this.position<chunk.end){var chunk=this.readChunk(data);if(chunk.id===MSH_MAT_GROUP){this.debugMessage('      Material Group');this.resetPosition(data);var group=this.readMaterialGroup(data);var material=this.materials[group.name];if(material!==undefined){mesh.material=material;if(material.name===''){material.name=mesh.name;}}}else{this.debugMessage('      Unknown face array chunk: '+chunk.toString(16));}
this.endChunk(chunk);}
this.endChunk(chunk);},readMap:function(data){var chunk=this.readChunk(data);var next=this.nextChunk(data,chunk);var texture={};var loader=new THREE.TextureLoader();loader.setPath(this.path);while(next!==0){if(next===MAT_MAPNAME){var name=this.readString(data,128);texture=loader.load(name);this.debugMessage('      File: '+this.path+name);}else if(next===MAT_MAP_UOFFSET){texture.offset.x=this.readFloat(data);this.debugMessage('      OffsetX: '+texture.offset.x);}else if(next===MAT_MAP_VOFFSET){texture.offset.y=this.readFloat(data);this.debugMessage('      OffsetY: '+texture.offset.y);}else if(next===MAT_MAP_USCALE){texture.repeat.x=this.readFloat(data);this.debugMessage('      RepeatX: '+texture.repeat.x);}else if(next===MAT_MAP_VSCALE){texture.repeat.y=this.readFloat(data);this.debugMessage('      RepeatY: '+texture.repeat.y);}else{this.debugMessage('      Unknown map chunk: '+next.toString(16));}
next=this.nextChunk(data,chunk);}
this.endChunk(chunk);return texture;},readMaterialGroup:function(data){var chunk=this.readChunk(data);var name=this.readString(data,64);var numFaces=this.readWord(data);this.debugMessage('         Name: '+name);this.debugMessage('         Faces: '+numFaces);var index=[];for(var i=0;i<numFaces;++i){index.push(this.readWord(data));}
return{name:name,index:index};},readColor:function(data){var chunk=this.readChunk(data);var color=new THREE.Color();if(chunk.id===COLOR_24||chunk.id===LIN_COLOR_24){var r=this.readByte(data);var g=this.readByte(data);var b=this.readByte(data);color.setRGB(r/255,g/255,b/255);this.debugMessage('      Color: '+color.r+', '+color.g+', '+color.b);}else if(chunk.id===COLOR_F||chunk.id===LIN_COLOR_F){var r=this.readFloat(data);var g=this.readFloat(data);var b=this.readFloat(data);color.setRGB(r,g,b);this.debugMessage('      Color: '+color.r+', '+color.g+', '+color.b);}else{this.debugMessage('      Unknown color chunk: '+chunk.toString(16));}
this.endChunk(chunk);return color;},readChunk:function(data){var chunk={};chunk.cur=this.position;chunk.id=this.readWord(data);chunk.size=this.readDWord(data);chunk.end=chunk.cur+chunk.size;chunk.cur+=6;return chunk;},endChunk:function(chunk){this.position=chunk.end;},nextChunk:function(data,chunk){if(chunk.cur>=chunk.end){return 0;}
this.position=chunk.cur;try{var next=this.readChunk(data);chunk.cur+=next.size;return next.id;}catch(e){this.debugMessage('Unable to read chunk at '+this.position);return 0;}},resetPosition:function(){this.position-=6;},readByte:function(data){var v=data.getUint8(this.position,true);this.position+=1;return v;},readFloat:function(data){try{var v=data.getFloat32(this.position,true);this.position+=4;return v;}catch(e){this.debugMessage(e+' '+this.position+' '+data.byteLength);}},readInt:function(data){var v=data.getInt32(this.position,true);this.position+=4;return v;},readShort:function(data){var v=data.getInt16(this.position,true);this.position+=2;return v;},readDWord:function(data){var v=data.getUint32(this.position,true);this.position+=4;return v;},readWord:function(data){var v=data.getUint16(this.position,true);this.position+=2;return v;},readString:function(data,maxLength){var s='';for(var i=0;i<maxLength;i++){var c=this.readByte(data);if(!c){break;}
s+=String.fromCharCode(c);}
return s;},setPath:function(path){if(path!==undefined){this.path=path;}
return this;},debugMessage:function(message){if(this.debug){console.log(message);}}};var NULL_CHUNK=0x0000;var M3DMAGIC=0x4D4D;var SMAGIC=0x2D2D;var LMAGIC=0x2D3D;var MLIBMAGIC=0x3DAA;var MATMAGIC=0x3DFF;var CMAGIC=0xC23D;var M3D_VERSION=0x0002;var M3D_KFVERSION=0x0005;var COLOR_F=0x0010;var COLOR_24=0x0011;var LIN_COLOR_24=0x0012;var LIN_COLOR_F=0x0013;var INT_PERCENTAGE=0x0030;var FLOAT_PERCENTAGE=0x0031;var MDATA=0x3D3D;var MESH_VERSION=0x3D3E;var MASTER_SCALE=0x0100;var LO_SHADOW_BIAS=0x1400;var HI_SHADOW_BIAS=0x1410;var SHADOW_MAP_SIZE=0x1420;var SHADOW_SAMPLES=0x1430;var SHADOW_RANGE=0x1440;var SHADOW_FILTER=0x1450;var RAY_BIAS=0x1460;var O_CONSTS=0x1500;var AMBIENT_LIGHT=0x2100;var BIT_MAP=0x1100;var SOLID_BGND=0x1200;var V_GRADIENT=0x1300;var USE_BIT_MAP=0x1101;var USE_SOLID_BGND=0x1201;var USE_V_GRADIENT=0x1301;var FOG=0x2200;var FOG_BGND=0x2210;var LAYER_FOG=0x2302;var DISTANCE_CUE=0x2300;var DCUE_BGND=0x2310;var USE_FOG=0x2201;var USE_LAYER_FOG=0x2303;var USE_DISTANCE_CUE=0x2301;var MAT_ENTRY=0xAFFF;var MAT_NAME=0xA000;var MAT_AMBIENT=0xA010;var MAT_DIFFUSE=0xA020;var MAT_SPECULAR=0xA030;var MAT_SHININESS=0xA040;var MAT_SHIN2PCT=0xA041;var MAT_TRANSPARENCY=0xA050;var MAT_XPFALL=0xA052;var MAT_USE_XPFALL=0xA240;var MAT_REFBLUR=0xA053;var MAT_SHADING=0xA100;var MAT_USE_REFBLUR=0xA250;var MAT_SELF_ILLUM=0xA084;var MAT_TWO_SIDE=0xA081;var MAT_DECAL=0xA082;var MAT_ADDITIVE=0xA083;var MAT_WIRE=0xA085;var MAT_FACEMAP=0xA088;var MAT_TRANSFALLOFF_IN=0xA08A;var MAT_PHONGSOFT=0xA08C;var MAT_WIREABS=0xA08E;var MAT_WIRE_SIZE=0xA087;var MAT_TEXMAP=0xA200;var MAT_SXP_TEXT_DATA=0xA320;var MAT_TEXMASK=0xA33E;var MAT_SXP_TEXTMASK_DATA=0xA32A;var MAT_TEX2MAP=0xA33A;var MAT_SXP_TEXT2_DATA=0xA321;var MAT_TEX2MASK=0xA340;var MAT_SXP_TEXT2MASK_DATA=0xA32C;var MAT_OPACMAP=0xA210;var MAT_SXP_OPAC_DATA=0xA322;var MAT_OPACMASK=0xA342;var MAT_SXP_OPACMASK_DATA=0xA32E;var MAT_BUMPMAP=0xA230;var MAT_SXP_BUMP_DATA=0xA324;var MAT_BUMPMASK=0xA344;var MAT_SXP_BUMPMASK_DATA=0xA330;var MAT_SPECMAP=0xA204;var MAT_SXP_SPEC_DATA=0xA325;var MAT_SPECMASK=0xA348;var MAT_SXP_SPECMASK_DATA=0xA332;var MAT_SHINMAP=0xA33C;var MAT_SXP_SHIN_DATA=0xA326;var MAT_SHINMASK=0xA346;var MAT_SXP_SHINMASK_DATA=0xA334;var MAT_SELFIMAP=0xA33D;var MAT_SXP_SELFI_DATA=0xA328;var MAT_SELFIMASK=0xA34A;var MAT_SXP_SELFIMASK_DATA=0xA336;var MAT_REFLMAP=0xA220;var MAT_REFLMASK=0xA34C;var MAT_SXP_REFLMASK_DATA=0xA338;var MAT_ACUBIC=0xA310;var MAT_MAPNAME=0xA300;var MAT_MAP_TILING=0xA351;var MAT_MAP_TEXBLUR=0xA353;var MAT_MAP_USCALE=0xA354;var MAT_MAP_VSCALE=0xA356;var MAT_MAP_UOFFSET=0xA358;var MAT_MAP_VOFFSET=0xA35A;var MAT_MAP_ANG=0xA35C;var MAT_MAP_COL1=0xA360;var MAT_MAP_COL2=0xA362;var MAT_MAP_RCOL=0xA364;var MAT_MAP_GCOL=0xA366;var MAT_MAP_BCOL=0xA368;var NAMED_OBJECT=0x4000;var N_DIRECT_LIGHT=0x4600;var DL_OFF=0x4620;var DL_OUTER_RANGE=0x465A;var DL_INNER_RANGE=0x4659;var DL_MULTIPLIER=0x465B;var DL_EXCLUDE=0x4654;var DL_ATTENUATE=0x4625;var DL_SPOTLIGHT=0x4610;var DL_SPOT_ROLL=0x4656;var DL_SHADOWED=0x4630;var DL_LOCAL_SHADOW2=0x4641;var DL_SEE_CONE=0x4650;var DL_SPOT_RECTANGULAR=0x4651;var DL_SPOT_ASPECT=0x4657;var DL_SPOT_PROJECTOR=0x4653;var DL_SPOT_OVERSHOOT=0x4652;var DL_RAY_BIAS=0x4658;var DL_RAYSHAD=0x4627;var N_CAMERA=0x4700;var CAM_SEE_CONE=0x4710;var CAM_RANGES=0x4720;var OBJ_HIDDEN=0x4010;var OBJ_VIS_LOFTER=0x4011;var OBJ_DOESNT_CAST=0x4012;var OBJ_DONT_RECVSHADOW=0x4017;var OBJ_MATTE=0x4013;var OBJ_FAST=0x4014;var OBJ_PROCEDURAL=0x4015;var OBJ_FROZEN=0x4016;var N_TRI_OBJECT=0x4100;var POINT_ARRAY=0x4110;var POINT_FLAG_ARRAY=0x4111;var FACE_ARRAY=0x4120;var MSH_MAT_GROUP=0x4130;var SMOOTH_GROUP=0x4150;var MSH_BOXMAP=0x4190;var TEX_VERTS=0x4140;var MESH_MATRIX=0x4160;var MESH_COLOR=0x4165;var MESH_TEXTURE_INFO=0x4170;var KFDATA=0xB000;var KFHDR=0xB00A;var KFSEG=0xB008;var KFCURTIME=0xB009;var AMBIENT_NODE_TAG=0xB001;var OBJECT_NODE_TAG=0xB002;var CAMERA_NODE_TAG=0xB003;var TARGET_NODE_TAG=0xB004;var LIGHT_NODE_TAG=0xB005;var L_TARGET_NODE_TAG=0xB006;var SPOTLIGHT_NODE_TAG=0xB007;var NODE_ID=0xB030;var NODE_HDR=0xB010;var PIVOT=0xB013;var INSTANCE_NAME=0xB011;var MORPH_SMOOTH=0xB015;var BOUNDBOX=0xB014;var POS_TRACK_TAG=0xB020;var COL_TRACK_TAG=0xB025;var ROT_TRACK_TAG=0xB021;var SCL_TRACK_TAG=0xB022;var MORPH_TRACK_TAG=0xB026;var FOV_TRACK_TAG=0xB023;var ROLL_TRACK_TAG=0xB024;var HOT_TRACK_TAG=0xB027;var FALL_TRACK_TAG=0xB028;var HIDE_TRACK_TAG=0xB029;var POLY_2D=0x5000;var SHAPE_OK=0x5010;var SHAPE_NOT_OK=0x5011;var SHAPE_HOOK=0x5020;var PATH_3D=0x6000;var PATH_MATRIX=0x6005;var SHAPE_2D=0x6010;var M_SCALE=0x6020;var M_TWIST=0x6030;var M_TEETER=0x6040;var M_FIT=0x6050;var M_BEVEL=0x6060;var XZ_CURVE=0x6070;var YZ_CURVE=0x6080;var INTERPCT=0x6090;var DEFORM_LIMIT=0x60A0;var USE_CONTOUR=0x6100;var USE_TWEEN=0x6110;var USE_SCALE=0x6120;var USE_TWIST=0x6130;var USE_TEETER=0x6140;var USE_FIT=0x6150;var USE_BEVEL=0x6160;var DEFAULT_VIEW=0x3000;var VIEW_TOP=0x3010;var VIEW_BOTTOM=0x3020;var VIEW_LEFT=0x3030;var VIEW_RIGHT=0x3040;var VIEW_FRONT=0x3050;var VIEW_BACK=0x3060;var VIEW_USER=0x3070;var VIEW_CAMERA=0x3080;var VIEW_WINDOW=0x3090;var VIEWPORT_LAYOUT_OLD=0x7000;var VIEWPORT_DATA_OLD=0x7010;var VIEWPORT_LAYOUT=0x7001;var VIEWPORT_DATA=0x7011;var VIEWPORT_DATA_3=0x7012;var VIEWPORT_SIZE=0x7020;var NETWORK_VIEW=0x7030;THREE.UTF8Loader=function(){};THREE.UTF8Loader.prototype.load=function(jsonUrl,callback,options){this.downloadModelJson(jsonUrl,callback,options);};THREE.UTF8Loader.BufferGeometryCreator=function(){};THREE.UTF8Loader.BufferGeometryCreator.prototype.create=function(attribArray,indices){var ntris=indices.length/3;var geometry=new THREE.BufferGeometry();var positions=new Float32Array(ntris*3*3);var normals=new Float32Array(ntris*3*3);var uvs=new Float32Array(ntris*3*2);var i,j,offset;var end=attribArray.length;var stride=8;j=0;offset=0;for(i=offset;i<end;i+=stride){positions[j++]=attribArray[i];positions[j++]=attribArray[i+1];positions[j++]=attribArray[i+2];}
j=0;offset=3;for(i=offset;i<end;i+=stride){uvs[j++]=attribArray[i];uvs[j++]=attribArray[i+1];}
j=0;offset=5;for(i=offset;i<end;i+=stride){normals[j++]=attribArray[i];normals[j++]=attribArray[i+1];normals[j++]=attribArray[i+2];}
geometry.setIndex(new THREE.BufferAttribute(indices,1));geometry.addAttribute('position',new THREE.BufferAttribute(positions,3));geometry.addAttribute('normal',new THREE.BufferAttribute(normals,3));geometry.addAttribute('uv',new THREE.BufferAttribute(uvs,2));geometry.computeBoundingSphere();return geometry;};var DEFAULT_DECODE_PARAMS={decodeOffsets:[-4095,-4095,-4095,0,0,-511,-511,-511],decodeScales:[1/8191,1/8191,1/8191,1/1023,1/1023,1/1023,1/1023,1/1023]};THREE.UTF8Loader.prototype.decompressAttribsInner_=function(str,inputStart,inputEnd,output,outputStart,stride,decodeOffset,decodeScale){var prev=0;for(var j=inputStart;j<inputEnd;j++){var code=str.charCodeAt(j);prev+=(code>>1)^(-(code&1));output[outputStart]=decodeScale*(prev+decodeOffset);outputStart+=stride;}};THREE.UTF8Loader.prototype.decompressIndices_=function(str,inputStart,numIndices,output,outputStart){var highest=0;for(var i=0;i<numIndices;i++){var code=str.charCodeAt(inputStart++);output[outputStart++]=highest-code;if(code===0){highest++;}}};THREE.UTF8Loader.prototype.decompressAABBs_=function(str,inputStart,numBBoxen,decodeOffsets,decodeScales){var numFloats=6*numBBoxen;var inputEnd=inputStart+numFloats;var outputStart=0;var bboxen=new Float32Array(numFloats);for(var i=inputStart;i<inputEnd;i+=6){var minX=str.charCodeAt(i+0)+decodeOffsets[0];var minY=str.charCodeAt(i+1)+decodeOffsets[1];var minZ=str.charCodeAt(i+2)+decodeOffsets[2];var radiusX=(str.charCodeAt(i+3)+1)>>1;var radiusY=(str.charCodeAt(i+4)+1)>>1;var radiusZ=(str.charCodeAt(i+5)+1)>>1;bboxen[outputStart++]=decodeScales[0]*(minX+radiusX);bboxen[outputStart++]=decodeScales[1]*(minY+radiusY);bboxen[outputStart++]=decodeScales[2]*(minZ+radiusZ);bboxen[outputStart++]=decodeScales[0]*radiusX;bboxen[outputStart++]=decodeScales[1]*radiusY;bboxen[outputStart++]=decodeScales[2]*radiusZ;}
return bboxen;};THREE.UTF8Loader.prototype.decompressMesh=function(str,meshParams,decodeParams,name,idx,callback){var stride=decodeParams.decodeScales.length;var decodeOffsets=decodeParams.decodeOffsets;var decodeScales=decodeParams.decodeScales;var attribStart=meshParams.attribRange[0];var numVerts=meshParams.attribRange[1];var inputOffset=attribStart;var attribsOut=new Float32Array(stride*numVerts);for(var j=0;j<stride;j++){var end=inputOffset+numVerts;var decodeScale=decodeScales[j];if(decodeScale){this.decompressAttribsInner_(str,inputOffset,end,attribsOut,j,stride,decodeOffsets[j],decodeScale);}
inputOffset=end;}
var numIndices=3*meshParams.indexRange[1];var indicesOut=new Uint16Array(numIndices);this.decompressIndices_(str,inputOffset,numIndices,indicesOut,0);var bboxen=undefined;var bboxOffset=meshParams.bboxes;if(bboxOffset){bboxen=this.decompressAABBs_(str,bboxOffset,meshParams.names.length,decodeOffsets,decodeScales);}
callback(name,idx,attribsOut,indicesOut,bboxen,meshParams);};THREE.UTF8Loader.prototype.copyAttrib=function(stride,attribsOutFixed,lastAttrib,index){for(var j=0;j<stride;j++){lastAttrib[j]=attribsOutFixed[stride*index+j];}};THREE.UTF8Loader.prototype.decodeAttrib2=function(str,stride,decodeOffsets,decodeScales,deltaStart,numVerts,attribsOut,attribsOutFixed,lastAttrib,index){for(var j=0;j<5;j++){var code=str.charCodeAt(deltaStart+numVerts*j+index);var delta=(code>>1)^(-(code&1));lastAttrib[j]+=delta;attribsOutFixed[stride*index+j]=lastAttrib[j];attribsOut[stride*index+j]=decodeScales[j]*(lastAttrib[j]+decodeOffsets[j]);}};THREE.UTF8Loader.prototype.accumulateNormal=function(i0,i1,i2,attribsOutFixed,crosses){var p0x=attribsOutFixed[8*i0];var p0y=attribsOutFixed[8*i0+1];var p0z=attribsOutFixed[8*i0+2];var p1x=attribsOutFixed[8*i1];var p1y=attribsOutFixed[8*i1+1];var p1z=attribsOutFixed[8*i1+2];var p2x=attribsOutFixed[8*i2];var p2y=attribsOutFixed[8*i2+1];var p2z=attribsOutFixed[8*i2+2];p1x-=p0x;p1y-=p0y;p1z-=p0z;p2x-=p0x;p2y-=p0y;p2z-=p0z;p0x=p1y*p2z-p1z*p2y;p0y=p1z*p2x-p1x*p2z;p0z=p1x*p2y-p1y*p2x;crosses[3*i0]+=p0x;crosses[3*i0+1]+=p0y;crosses[3*i0+2]+=p0z;crosses[3*i1]+=p0x;crosses[3*i1+1]+=p0y;crosses[3*i1+2]+=p0z;crosses[3*i2]+=p0x;crosses[3*i2+1]+=p0y;crosses[3*i2+2]+=p0z;};THREE.UTF8Loader.prototype.decompressMesh2=function(str,meshParams,decodeParams,name,idx,callback){var MAX_BACKREF=96;var stride=decodeParams.decodeScales.length;var decodeOffsets=decodeParams.decodeOffsets;var decodeScales=decodeParams.decodeScales;var deltaStart=meshParams.attribRange[0];var numVerts=meshParams.attribRange[1];var codeStart=meshParams.codeRange[0];var numIndices=3*meshParams.codeRange[2];var indicesOut=new Uint16Array(numIndices);var crosses=new Int32Array(3*numVerts);var lastAttrib=new Uint16Array(stride);var attribsOutFixed=new Uint16Array(stride*numVerts);var attribsOut=new Float32Array(stride*numVerts);var highest=0;var outputStart=0;for(var i=0;i<numIndices;i+=3){var code=str.charCodeAt(codeStart++);var max_backref=Math.min(i,MAX_BACKREF);if(code<max_backref){var winding=code%3;var backref=i-(code-winding);var i0,i1,i2;switch(winding){case 0:i0=indicesOut[backref+2];i1=indicesOut[backref+1];i2=indicesOut[backref+0];break;case 1:i0=indicesOut[backref+0];i1=indicesOut[backref+2];i2=indicesOut[backref+1];break;case 2:i0=indicesOut[backref+1];i1=indicesOut[backref+0];i2=indicesOut[backref+2];break;}
indicesOut[outputStart++]=i0;indicesOut[outputStart++]=i1;code=str.charCodeAt(codeStart++);var index=highest-code;indicesOut[outputStart++]=index;if(code===0){for(var j=0;j<5;j++){var deltaCode=str.charCodeAt(deltaStart+numVerts*j+highest);var prediction=((deltaCode>>1)^(-(deltaCode&1)))+
attribsOutFixed[stride*i0+j]+
attribsOutFixed[stride*i1+j]-
attribsOutFixed[stride*i2+j];lastAttrib[j]=prediction;attribsOutFixed[stride*highest+j]=prediction;attribsOut[stride*highest+j]=decodeScales[j]*(prediction+decodeOffsets[j]);}
highest++;}else{this.copyAttrib(stride,attribsOutFixed,lastAttrib,index);}
this.accumulateNormal(i0,i1,index,attribsOutFixed,crosses);}else{var index0=highest-(code-max_backref);indicesOut[outputStart++]=index0;if(code===max_backref){this.decodeAttrib2(str,stride,decodeOffsets,decodeScales,deltaStart,numVerts,attribsOut,attribsOutFixed,lastAttrib,highest++);}else{this.copyAttrib(stride,attribsOutFixed,lastAttrib,index0);}
code=str.charCodeAt(codeStart++);var index1=highest-code;indicesOut[outputStart++]=index1;if(code===0){this.decodeAttrib2(str,stride,decodeOffsets,decodeScales,deltaStart,numVerts,attribsOut,attribsOutFixed,lastAttrib,highest++);}else{this.copyAttrib(stride,attribsOutFixed,lastAttrib,index1);}
code=str.charCodeAt(codeStart++);var index2=highest-code;indicesOut[outputStart++]=index2;if(code===0){for(var j=0;j<5;j++){lastAttrib[j]=(attribsOutFixed[stride*index0+j]+attribsOutFixed[stride*index1+j])/2;}
this.decodeAttrib2(str,stride,decodeOffsets,decodeScales,deltaStart,numVerts,attribsOut,attribsOutFixed,lastAttrib,highest++);}else{this.copyAttrib(stride,attribsOutFixed,lastAttrib,index2);}
this.accumulateNormal(index0,index1,index2,attribsOutFixed,crosses);}}
for(var i=0;i<numVerts;i++){var nx=crosses[3*i];var ny=crosses[3*i+1];var nz=crosses[3*i+2];var norm=511.0/Math.sqrt(nx*nx+ny*ny+nz*nz);var cx=str.charCodeAt(deltaStart+5*numVerts+i);var cy=str.charCodeAt(deltaStart+6*numVerts+i);var cz=str.charCodeAt(deltaStart+7*numVerts+i);attribsOut[stride*i+5]=norm*nx+((cx>>1)^(-(cx&1)));attribsOut[stride*i+6]=norm*ny+((cy>>1)^(-(cy&1)));attribsOut[stride*i+7]=norm*nz+((cz>>1)^(-(cz&1)));}
callback(name,idx,attribsOut,indicesOut,undefined,meshParams);};THREE.UTF8Loader.prototype.downloadMesh=function(path,name,meshEntry,decodeParams,callback){var loader=this;var idx=0;function onprogress(data){while(idx<meshEntry.length){var meshParams=meshEntry[idx];var indexRange=meshParams.indexRange;if(indexRange){var meshEnd=indexRange[0]+3*indexRange[1];if(data.length<meshEnd)break;loader.decompressMesh(data,meshParams,decodeParams,name,idx,callback);}else{var codeRange=meshParams.codeRange;var meshEnd=codeRange[0]+codeRange[1];if(data.length<meshEnd)break;loader.decompressMesh2(data,meshParams,decodeParams,name,idx,callback);}
++idx;}}
getHttpRequest(path,function(data){onprogress(data);});};THREE.UTF8Loader.prototype.downloadMeshes=function(path,meshUrlMap,decodeParams,callback){for(var url in meshUrlMap){var meshEntry=meshUrlMap[url];this.downloadMesh(path+url,url,meshEntry,decodeParams,callback);}};THREE.UTF8Loader.prototype.createMeshCallback=function(materialBaseUrl,loadModelInfo,allDoneCallback){var nCompletedUrls=0;var nExpectedUrls=0;var expectedMeshesPerUrl={};var decodedMeshesPerUrl={};var modelParts={};var meshUrlMap=loadModelInfo.urls;for(var url in meshUrlMap){expectedMeshesPerUrl[url]=meshUrlMap[url].length;decodedMeshesPerUrl[url]=0;nExpectedUrls++;modelParts[url]=new THREE.Object3D();}
var model=new THREE.Object3D();var materialCreator=new THREE.MTLLoader.MaterialCreator(materialBaseUrl,loadModelInfo.options);materialCreator.setMaterials(loadModelInfo.materials);materialCreator.preload();var bufferGeometryCreator=new THREE.UTF8Loader.BufferGeometryCreator();var meshCallback=function(name,idx,attribArray,indexArray,bboxen,meshParams){var geometry=bufferGeometryCreator.create(attribArray,indexArray);var material=materialCreator.create(meshParams.material);var mesh=new THREE.Mesh(geometry,material);modelParts[name].add(mesh);decodedMeshesPerUrl[name]++;if(decodedMeshesPerUrl[name]===expectedMeshesPerUrl[name]){nCompletedUrls++;model.add(modelParts[name]);if(nCompletedUrls===nExpectedUrls){allDoneCallback(model);}}};return meshCallback;};THREE.UTF8Loader.prototype.downloadModel=function(geometryBase,materialBase,model,callback){var meshCallback=this.createMeshCallback(materialBase,model,callback);this.downloadMeshes(geometryBase,model.urls,model.decodeParams,meshCallback);};THREE.UTF8Loader.prototype.downloadModelJson=function(jsonUrl,callback,options){getJsonRequest(jsonUrl,function(loaded){if(!loaded.decodeParams){if(options&&options.decodeParams){loaded.decodeParams=options.decodeParams;}else{loaded.decodeParams=DEFAULT_DECODE_PARAMS;}}
loaded.options=options;var geometryBase=jsonUrl.substr(0,jsonUrl.lastIndexOf("/")+1);var materialBase=geometryBase;if(options&&options.geometryBase){geometryBase=options.geometryBase;if(geometryBase.charAt(geometryBase.length-1)!=="/"){geometryBase=geometryBase+"/";}}
if(options&&options.materialBase){materialBase=options.materialBase;if(materialBase.charAt(materialBase.length-1)!=="/"){materialBase=materialBase+"/";}}
this.downloadModel(geometryBase,materialBase,loaded,callback);}.bind(this));};function getHttpRequest(url,onload,opt_onprogress){var req=new THREE.FileLoader();req.load(url,onload,opt_onprogress);}
function getJsonRequest(url,onjson){getHttpRequest(url,function(e){onjson(JSON.parse(e));},function(){});}
function addListeners(dom,listeners){for(var key in listeners){dom.addEventListener(key,listeners[key]);}}
THREE.VRMLLoader=function(manager){this.manager=(manager!==undefined)?manager:THREE.DefaultLoadingManager;};THREE.VRMLLoader.prototype={constructor:THREE.VRMLLoader,isRecordingPoints:false,isRecordingFaces:false,points:[],indexes:[],isRecordingAngles:false,isRecordingColors:false,angles:[],colors:[],recordingFieldname:null,crossOrigin:'Anonymous',load:function(url,onLoad,onProgress,onError){var scope=this;var loader=new THREE.FileLoader(this.manager);loader.load(url,function(text){onLoad(scope.parse(text));},onProgress,onError);},setCrossOrigin:function(value){this.crossOrigin=value;},parse:function(data){var texturePath=this.texturePath||'';var textureLoader=new THREE.TextureLoader(this.manager);textureLoader.setCrossOrigin(this.crossOrigin);function parseV1(){console.warn('THREE.VRMLLoader: V1.0 not supported yet.');}
function parseV2(lines,scene){var defines={};var float_pattern=/(\b|\-|\+)([\d\.e]+)/;var float2_pattern=/([\d\.\+\-e]+)\s+([\d\.\+\-e]+)/g;var float3_pattern=/([\d\.\+\-e]+)\s+([\d\.\+\-e]+)\s+([\d\.\+\-e]+)/g;function paintFaces(geometry,radius,angles,colors,topDown){var direction=(topDown===true)?1:-1;var coord=[],A={},B={},applyColor=false;for(var k=0;k<angles.length;k++){var vec={x:direction*(Math.cos(angles[k])*radius),y:direction*(Math.sin(angles[k])*radius)};coord.push(vec);}
var index=geometry.index;var positionAttribute=geometry.attributes.position;var colorAttribute=new THREE.BufferAttribute(new Float32Array(geometry.attributes.position.count*3),3);var position=new THREE.Vector3();var color=new THREE.Color();for(var i=0;i<index.count;i++){var vertexIndex=index.getX(i);position.fromBufferAttribute(positionAttribute,vertexIndex);for(var j=0;j<colors.length;j++){if(j===0){A.x=0;A.y=(topDown===true)?radius:-1*radius;}else{A.x=coord[j-1].x;A.y=coord[j-1].y;}
B=coord[j];if(B!==undefined){applyColor=(topDown===true)?(position.y<=A.y&&position.y>B.y):(position.y>=A.y&&position.y<B.y);if(applyColor===true){var aColor=colors[j];var bColor=colors[j+1];var t=Math.abs(position.y-A.y)/(A.y-B.y);color.copy(aColor).lerp(bColor,t);colorAttribute.setXYZ(vertexIndex,color.r,color.g,color.b);}else{var colorIndex=(topDown===true)?colors.length-1:0;var c=colors[colorIndex];colorAttribute.setXYZ(vertexIndex,c.r,c.g,c.b);}}}}
geometry.addAttribute('color',colorAttribute);}
var index=[];function parseProperty(node,line){var parts=[],part,property={},fieldName;var regex=/[^\s,\[\]]+/g;var point;while(null!==(part=regex.exec(line))){parts.push(part[0]);}
fieldName=parts[0];switch(fieldName){case'skyAngle':case'groundAngle':this.recordingFieldname=fieldName;this.isRecordingAngles=true;this.angles=[];break;case'skyColor':case'groundColor':this.recordingFieldname=fieldName;this.isRecordingColors=true;this.colors=[];break;case'point':this.recordingFieldname=fieldName;this.isRecordingPoints=true;this.points=[];break;case'coordIndex':case'texCoordIndex':this.recordingFieldname=fieldName;this.isRecordingFaces=true;this.indexes=[];break;}
if(this.isRecordingFaces){if(parts.length>0){for(var ind=0;ind<parts.length;ind++){if(!/(-?\d+)/.test(parts[ind])){continue;}
if(parts[ind]==='-1'){if(index.length>0){this.indexes.push(index);}
index=[];}else{index.push(parseInt(parts[ind]));}}}
if(/]/.exec(line)){if(index.length>0){this.indexes.push(index);}
index=[];this.isRecordingFaces=false;node[this.recordingFieldname]=this.indexes;}}else if(this.isRecordingPoints){if(node.nodeType=='Coordinate'){while(null!==(parts=float3_pattern.exec(line))){point={x:parseFloat(parts[1]),y:parseFloat(parts[2]),z:parseFloat(parts[3])};this.points.push(point);}}
if(node.nodeType=='TextureCoordinate'){while(null!==(parts=float2_pattern.exec(line))){point={x:parseFloat(parts[1]),y:parseFloat(parts[2])};this.points.push(point);}}
if(/]/.exec(line)){this.isRecordingPoints=false;node.points=this.points;}}else if(this.isRecordingAngles){if(parts.length>0){for(var ind=0;ind<parts.length;ind++){if(!float_pattern.test(parts[ind])){continue;}
this.angles.push(parseFloat(parts[ind]));}}
if(/]/.exec(line)){this.isRecordingAngles=false;node[this.recordingFieldname]=this.angles;}}else if(this.isRecordingColors){while(null!==(parts=float3_pattern.exec(line))){var color={r:parseFloat(parts[1]),g:parseFloat(parts[2]),b:parseFloat(parts[3])};this.colors.push(color);}
if(/]/.exec(line)){this.isRecordingColors=false;node[this.recordingFieldname]=this.colors;}}else if(parts[parts.length-1]!=='NULL'&&fieldName!=='children'){switch(fieldName){case'diffuseColor':case'emissiveColor':case'specularColor':case'color':if(parts.length!==4){console.warn('THREE.VRMLLoader: Invalid color format detected for %s.',fieldName);break;}
property={r:parseFloat(parts[1]),g:parseFloat(parts[2]),b:parseFloat(parts[3])};break;case'location':case'direction':case'translation':case'scale':case'size':if(parts.length!==4){console.warn('THREE.VRMLLoader: Invalid vector format detected for %s.',fieldName);break;}
property={x:parseFloat(parts[1]),y:parseFloat(parts[2]),z:parseFloat(parts[3])};break;case'intensity':case'cutOffAngle':case'radius':case'topRadius':case'bottomRadius':case'height':case'transparency':case'shininess':case'ambientIntensity':if(parts.length!==2){console.warn('THREE.VRMLLoader: Invalid single float value specification detected for %s.',fieldName);break;}
property=parseFloat(parts[1]);break;case'rotation':if(parts.length!==5){console.warn('THREE.VRMLLoader: Invalid quaternion format detected for %s.',fieldName);break;}
property={x:parseFloat(parts[1]),y:parseFloat(parts[2]),z:parseFloat(parts[3]),w:parseFloat(parts[4])};break;case'on':case'ccw':case'solid':case'colorPerVertex':case'convex':if(parts.length!==2){console.warn('THREE.VRMLLoader: Invalid format detected for %s.',fieldName);break;}
property=parts[1]==='TRUE'?true:false;break;}
node[fieldName]=property;}
return property;}
function getTree(lines){var tree={'string':'Scene',children:[]};var current=tree;var matches;var specification;for(var i=0;i<lines.length;i++){var comment='';var line=lines[i];if(null!==(/^\s+?$/g.exec(line))){continue;}
line=line.trim();if(line===''){continue;}
if(/#/.exec(line)){var parts=line.split('#');line=parts[0];comment=parts[1];}
if(matches=/([^\s]*){1}(?:\s+)?{/.exec(line)){var block={'nodeType':matches[1],'string':line,'parent':current,'children':[],'comment':comment};current.children.push(block);current=block;if(/}/.exec(line)){specification=/{(.*)}/.exec(line)[1];block.children.push(specification);parseProperty(current,specification);current=current.parent;}}else if(/}/.exec(line)){current=current.parent;}else if(line!==''){parseProperty(current,line);current.children.push(line);}}
return tree;}
function parseNode(data,parent){var object;if(typeof data==='string'){if(/USE/.exec(data)){var defineKey=/USE\s+?([^\s]+)/.exec(data)[1];if(undefined==defines[defineKey]){console.warn('THREE.VRMLLoader: %s is not defined.',defineKey);}else{if(/appearance/.exec(data)&&defineKey){parent.material=defines[defineKey].clone();}else if(/geometry/.exec(data)&&defineKey){parent.geometry=defines[defineKey].clone();if(undefined!==defines[defineKey].solid&&defines[defineKey].solid===false){parent.geometry.solid=false;parent.material.side=THREE.DoubleSide;}}else if(defineKey){object=defines[defineKey].clone();parent.add(object);}}}
return;}
object=parent;if(data.string.indexOf('AmbientLight')>-1&&data.nodeType==='PointLight'){data.nodeType='AmbientLight';}
var l_visible=data.on!==undefined?data.on:true;var l_intensity=data.intensity!==undefined?data.intensity:1;var l_color=new THREE.Color();if(data.color){l_color.copy(data.color);}
if(data.nodeType==='AmbientLight'){object=new THREE.AmbientLight(l_color,l_intensity);object.visible=l_visible;parent.add(object);}else if(data.nodeType==='PointLight'){var l_distance=0;if(data.radius!==undefined&&data.radius<1000){l_distance=data.radius;}
object=new THREE.PointLight(l_color,l_intensity,l_distance);object.visible=l_visible;parent.add(object);}else if(data.nodeType==='SpotLight'){var l_intensity=1;var l_distance=0;var l_angle=Math.PI/3;var l_penumbra=0;var l_visible=true;if(data.radius!==undefined&&data.radius<1000){l_distance=data.radius;}
if(data.cutOffAngle!==undefined){l_angle=data.cutOffAngle;}
object=new THREE.SpotLight(l_color,l_intensity,l_distance,l_angle,l_penumbra);object.visible=l_visible;parent.add(object);}else if(data.nodeType==='Transform'||data.nodeType==='Group'){object=new THREE.Object3D();if(/DEF/.exec(data.string)){object.name=/DEF\s+([^\s]+)/.exec(data.string)[1];defines[object.name]=object;}
if(data.translation!==undefined){var t=data.translation;object.position.set(t.x,t.y,t.z);}
if(data.rotation!==undefined){var r=data.rotation;object.quaternion.setFromAxisAngle(new THREE.Vector3(r.x,r.y,r.z),r.w);}
if(data.scale!==undefined){var s=data.scale;object.scale.set(s.x,s.y,s.z);}
parent.add(object);}else if(data.nodeType==='Shape'){object=new THREE.Mesh();if(/DEF/.exec(data.string)){object.name=/DEF\s+([^\s]+)/.exec(data.string)[1];defines[object.name]=object;}
parent.add(object);}else if(data.nodeType==='Background'){var segments=20;var radius=2e4;var skyGeometry=new THREE.SphereBufferGeometry(radius,segments,segments);var skyMaterial=new THREE.MeshBasicMaterial({fog:false,side:THREE.BackSide});if(data.skyColor.length>1){paintFaces(skyGeometry,radius,data.skyAngle,data.skyColor,true);skyMaterial.vertexColors=THREE.VertexColors;}else{var color=data.skyColor[0];skyMaterial.color.setRGB(color.r,color.b,color.g);}
scene.add(new THREE.Mesh(skyGeometry,skyMaterial));if(data.groundColor!==undefined){radius=1.2e4;var groundGeometry=new THREE.SphereBufferGeometry(radius,segments,segments,0,2*Math.PI,0.5*Math.PI,1.5*Math.PI);var groundMaterial=new THREE.MeshBasicMaterial({fog:false,side:THREE.BackSide,vertexColors:THREE.VertexColors});paintFaces(groundGeometry,radius,data.groundAngle,data.groundColor,false);scene.add(new THREE.Mesh(groundGeometry,groundMaterial));}}else if(/geometry/.exec(data.string)){if(data.nodeType==='Box'){var s=data.size;parent.geometry=new THREE.BoxBufferGeometry(s.x,s.y,s.z);}else if(data.nodeType==='Cylinder'){parent.geometry=new THREE.CylinderBufferGeometry(data.radius,data.radius,data.height);}else if(data.nodeType==='Cone'){parent.geometry=new THREE.CylinderBufferGeometry(data.topRadius,data.bottomRadius,data.height);}else if(data.nodeType==='Sphere'){parent.geometry=new THREE.SphereBufferGeometry(data.radius);}else if(data.nodeType==='IndexedFaceSet'){var geometry=new THREE.BufferGeometry();var positions=[];var uvs=[];var position,uv;var i,il,j,jl;for(i=0,il=data.children.length;i<il;i++){var child=data.children[i];if(child.nodeType==='TextureCoordinate'){if(child.points){for(j=0,jl=child.points.length;j<jl;j++){uv=child.points[j];uvs.push(uv.x,uv.y);}}}
if(child.nodeType==='Coordinate'){if(child.points){for(j=0,jl=child.points.length;j<jl;j++){position=child.points[j];positions.push(position.x,position.y,position.z);}}
if(child.string.indexOf('DEF')>-1){var name=/DEF\s+([^\s]+)/.exec(child.string)[1];defines[name]=positions.slice(0);}
if(child.string.indexOf('USE')>-1){var defineKey=/USE\s+([^\s]+)/.exec(child.string)[1];positions=defines[defineKey];}}}
var skip=0;if(data.coordIndex){var newPositions=[];var newUvs=[];position=new THREE.Vector3();uv=new THREE.Vector2();for(i=0,il=data.coordIndex.length;i<il;i++){var indexes=data.coordIndex[i];skip=0;while(indexes.length>=3&&skip<(indexes.length-2)){if(data.ccw===undefined)data.ccw=true;var i1=indexes[0];var i2=indexes[skip+(data.ccw?1:2)];var i3=indexes[skip+(data.ccw?2:1)];position.fromArray(positions,i1*3);uv.fromArray(uvs,i1*2);newPositions.push(position.x,position.y,position.z);newUvs.push(uv.x,uv.y);position.fromArray(positions,i2*3);uv.fromArray(uvs,i2*2);newPositions.push(position.x,position.y,position.z);newUvs.push(uv.x,uv.y);position.fromArray(positions,i3*3);uv.fromArray(uvs,i3*2);newPositions.push(position.x,position.y,position.z);newUvs.push(uv.x,uv.y);skip++;}}
positions=newPositions;uvs=newUvs;}else{parent.parent.remove(parent);}
if(false===data.solid){parent.material.side=THREE.DoubleSide;}
geometry.solid=data.solid;geometry.addAttribute('position',new THREE.Float32BufferAttribute(positions,3));if(uvs.length>0){geometry.addAttribute('uv',new THREE.Float32BufferAttribute(uvs,2));}
geometry.computeVertexNormals();geometry.computeBoundingSphere();if(/DEF/.exec(data.string)){geometry.name=/DEF ([^\s]+)/.exec(data.string)[1];defines[geometry.name]=geometry;}
parent.geometry=geometry;}
return;}else if(/appearance/.exec(data.string)){for(var i=0;i<data.children.length;i++){var child=data.children[i];if(child.nodeType==='Material'){var material=new THREE.MeshPhongMaterial();if(child.diffuseColor!==undefined){var d=child.diffuseColor;material.color.setRGB(d.r,d.g,d.b);}
if(child.emissiveColor!==undefined){var e=child.emissiveColor;material.emissive.setRGB(e.r,e.g,e.b);}
if(child.specularColor!==undefined){var s=child.specularColor;material.specular.setRGB(s.r,s.g,s.b);}
if(child.transparency!==undefined){var t=child.transparency;material.opacity=Math.abs(1-t);material.transparent=true;}
if(/DEF/.exec(data.string)){material.name=/DEF ([^\s]+)/.exec(data.string)[1];defines[material.name]=material;}
parent.material=material;}
if(child.nodeType==='ImageTexture'){var textureName=/"([^"]+)"/.exec(child.children[0]);if(textureName){parent.material.name=textureName[1];parent.material.map=textureLoader.load(texturePath+textureName[1]);}}}
return;}
for(var i=0,l=data.children.length;i<l;i++){parseNode(data.children[i],object);}}
parseNode(getTree(lines),scene);}
var scene=new THREE.Scene();var lines=data.split('\n');for(var i=lines.length-1;i>-1;i--){var line=lines[i];if(/{.*[{\[]/.test(line)){var parts=line.split('{').join('{\n').split('\n');parts.unshift(1);parts.unshift(i);lines.splice.apply(lines,parts);}else if(/\].*}/.test(line)){var parts=line.split(']').join(']\n').split('\n');parts.unshift(1);parts.unshift(i);lines.splice.apply(lines,parts);}
if(/}.*}/.test(line)){var parts=line.split('}').join('}\n').split('\n');parts.unshift(1);parts.unshift(i);lines.splice.apply(lines,parts);}
if(/^\b[^\s]+\b$/.test(line.trim())){lines[i+1]=line+' '+lines[i+1].trim();lines.splice(i,1);}else if((line.indexOf('coord')>-1)&&(line.indexOf('[')<0)&&(line.indexOf('{')<0)){lines[i]+=' Coordinate {}';}}
var header=lines.shift();if(/V1.0/.exec(header)){parseV1(lines,scene);}else if(/V2.0/.exec(header)){parseV2(lines,scene);}
return scene;}};THREE.VTKLoader=function(manager){this.manager=(manager!==undefined)?manager:THREE.DefaultLoadingManager;};Object.assign(THREE.VTKLoader.prototype,THREE.EventDispatcher.prototype,{load:function(url,onLoad,onProgress,onError){var scope=this;var loader=new THREE.FileLoader(scope.manager);loader.setResponseType('arraybuffer');loader.load(url,function(text){onLoad(scope.parse(text));},onProgress,onError);},parse:function(data){function parseASCII(data){var indices=[];var positions=[];var colors=[];var normals=[];var result;var pat3Floats=/(\-?\d+\.?[\d\-\+e]*)\s+(\-?\d+\.?[\d\-\+e]*)\s+(\-?\d+\.?[\d\-\+e]*)/g;var patConnectivity=/^(\d+)\s+([\s\d]*)/;var patPOINTS=/^POINTS /;var patPOLYGONS=/^POLYGONS /;var patTRIANGLE_STRIPS=/^TRIANGLE_STRIPS /;var patPOINT_DATA=/^POINT_DATA[ ]+(\d+)/;var patCELL_DATA=/^CELL_DATA[ ]+(\d+)/;var patCOLOR_SCALARS=/^COLOR_SCALARS[ ]+(\w+)[ ]+3/;var patNORMALS=/^NORMALS[ ]+(\w+)[ ]+(\w+)/;var inPointsSection=false;var inPolygonsSection=false;var inTriangleStripSection=false;var inPointDataSection=false;var inCellDataSection=false;var inColorSection=false;var inNormalsSection=false;var lines=data.split('\n');for(var i in lines){var line=lines[i];if(inPointsSection){while((result=pat3Floats.exec(line))!==null){var x=parseFloat(result[1]);var y=parseFloat(result[2]);var z=parseFloat(result[3]);positions.push(x,y,z);}}else if(inPolygonsSection){if((result=patConnectivity.exec(line))!==null){var numVertices=parseInt(result[1]);var inds=result[2].split(/\s+/);if(numVertices>=3){var i0=parseInt(inds[0]);var i1,i2;var k=1;for(var j=0;j<numVertices-2;++j){i1=parseInt(inds[k]);i2=parseInt(inds[k+1]);indices.push(i0,i1,i2);k++;}}}}else if(inTriangleStripSection){if((result=patConnectivity.exec(line))!==null){var numVertices=parseInt(result[1]);var inds=result[2].split(/\s+/);if(numVertices>=3){var i0,i1,i2;for(var j=0;j<numVertices-2;j++){if(j%2===1){i0=parseInt(inds[j]);i1=parseInt(inds[j+2]);i2=parseInt(inds[j+1]);indices.push(i0,i1,i2);}else{i0=parseInt(inds[j]);i1=parseInt(inds[j+1]);i2=parseInt(inds[j+2]);indices.push(i0,i1,i2);}}}}}else if(inPointDataSection||inCellDataSection){if(inColorSection){while((result=pat3Floats.exec(line))!==null){var r=parseFloat(result[1]);var g=parseFloat(result[2]);var b=parseFloat(result[3]);colors.push(r,g,b);}}else if(inNormalsSection){while((result=pat3Floats.exec(line))!==null){var nx=parseFloat(result[1]);var ny=parseFloat(result[2]);var nz=parseFloat(result[3]);normals.push(nx,ny,nz);}}}
if(patPOLYGONS.exec(line)!==null){inPolygonsSection=true;inPointsSection=false;inTriangleStripSection=false;}else if(patPOINTS.exec(line)!==null){inPolygonsSection=false;inPointsSection=true;inTriangleStripSection=false;}else if(patTRIANGLE_STRIPS.exec(line)!==null){inPolygonsSection=false;inPointsSection=false;inTriangleStripSection=true;}else if(patPOINT_DATA.exec(line)!==null){inPointDataSection=true;inPointsSection=false;inPolygonsSection=false;inTriangleStripSection=false;}else if(patCELL_DATA.exec(line)!==null){inCellDataSection=true;inPointsSection=false;inPolygonsSection=false;inTriangleStripSection=false;}else if(patCOLOR_SCALARS.exec(line)!==null){inColorSection=true;inNormalsSection=false;inPointsSection=false;inPolygonsSection=false;inTriangleStripSection=false;}else if(patNORMALS.exec(line)!==null){inNormalsSection=true;inColorSection=false;inPointsSection=false;inPolygonsSection=false;inTriangleStripSection=false;}}
var geometry;var stagger='point';if(colors.length==indices.length){stagger='cell';}
if(stagger=='point'){geometry=new THREE.BufferGeometry();geometry.setIndex(new THREE.BufferAttribute(new Uint32Array(indices),1));geometry.addAttribute('position',new THREE.BufferAttribute(new Float32Array(positions),3));if(colors.length==positions.length){geometry.addAttribute('color',new THREE.BufferAttribute(new Float32Array(colors),3));}
if(normals.length==positions.length){geometry.addAttribute('normal',new THREE.BufferAttribute(new Float32Array(normals),3));}}else{geometry=new THREE.Geometry();var numTriangles=indices.length/3;var numPoints=positions.length/3;var face;var ia,ib,ic;var x,y,z;var r,g,b;for(var j=0;j<numPoints;++j){x=positions[3*j+0];y=positions[3*j+1];z=positions[3*j+2];geometry.vertices.push(new THREE.Vector3(x,y,z));}
for(var i=0;i<numTriangles;++i){ia=indices[3*i+0];ib=indices[3*i+1];ic=indices[3*i+2];geometry.faces.push(new THREE.Face3(ia,ib,ic));}
if(colors.length==numTriangles*3){for(var i=0;i<numTriangles;++i){face=geometry.faces[i];r=colors[3*i+0];g=colors[3*i+1];b=colors[3*i+2];face.color=new THREE.Color().setRGB(r,g,b);}}}
return geometry;}
function parseBinary(data){var count,pointIndex,i,numberOfPoints,s;var buffer=new Uint8Array(data);var dataView=new DataView(data);var points=[];var normals=[];var indices=[];var vtk=[];var index=0;function findString(buffer,start){var index=start;var c=buffer[index];var s=[];while(c!=10){s.push(String.fromCharCode(c));index++;c=buffer[index];}
return{start:start,end:index,next:index+1,parsedString:s.join('')};}
var state,line;while(true){state=findString(buffer,index);line=state.parsedString;if(line.indexOf('POINTS')===0){vtk.push(line);numberOfPoints=parseInt(line.split(' ')[1],10);count=numberOfPoints*4*3;points=new Float32Array(numberOfPoints*3);pointIndex=state.next;for(i=0;i<numberOfPoints;i++){points[3*i]=dataView.getFloat32(pointIndex,false);points[3*i+1]=dataView.getFloat32(pointIndex+4,false);points[3*i+2]=dataView.getFloat32(pointIndex+8,false);pointIndex=pointIndex+12;}
state.next=state.next+count+1;}else if(line.indexOf('TRIANGLE_STRIPS')===0){var numberOfStrips=parseInt(line.split(' ')[1],10);var size=parseInt(line.split(' ')[2],10);count=size*4;indices=new Uint32Array(3*size-9*numberOfStrips);var indicesIndex=0;pointIndex=state.next;for(i=0;i<numberOfStrips;i++){var indexCount=dataView.getInt32(pointIndex,false);var strip=[];pointIndex+=4;for(s=0;s<indexCount;s++){strip.push(dataView.getInt32(pointIndex,false));pointIndex+=4;}
for(var j=0;j<indexCount-2;j++){if(j%2){indices[indicesIndex++]=strip[j];indices[indicesIndex++]=strip[j+2];indices[indicesIndex++]=strip[j+1];}else{indices[indicesIndex++]=strip[j];indices[indicesIndex++]=strip[j+1];indices[indicesIndex++]=strip[j+2];}}}
state.next=state.next+count+1;}else if(line.indexOf('POLYGONS')===0){var numberOfStrips=parseInt(line.split(' ')[1],10);var size=parseInt(line.split(' ')[2],10);count=size*4;indices=new Uint32Array(3*size-9*numberOfStrips);var indicesIndex=0;pointIndex=state.next;for(i=0;i<numberOfStrips;i++){var indexCount=dataView.getInt32(pointIndex,false);var strip=[];pointIndex+=4;for(s=0;s<indexCount;s++){strip.push(dataView.getInt32(pointIndex,false));pointIndex+=4;}
for(var j=1;j<indexCount-1;j++){indices[indicesIndex++]=strip[0];indices[indicesIndex++]=strip[j];indices[indicesIndex++]=strip[j+1];}}
state.next=state.next+count+1;}else if(line.indexOf('POINT_DATA')===0){numberOfPoints=parseInt(line.split(' ')[1],10);state=findString(buffer,state.next);count=numberOfPoints*4*3;normals=new Float32Array(numberOfPoints*3);pointIndex=state.next;for(i=0;i<numberOfPoints;i++){normals[3*i]=dataView.getFloat32(pointIndex,false);normals[3*i+1]=dataView.getFloat32(pointIndex+4,false);normals[3*i+2]=dataView.getFloat32(pointIndex+8,false);pointIndex+=12;}
state.next=state.next+count;}
index=state.next;if(index>=buffer.byteLength){break;}}
var geometry=new THREE.BufferGeometry();geometry.setIndex(new THREE.BufferAttribute(indices,1));geometry.addAttribute('position',new THREE.BufferAttribute(points,3));if(normals.length==points.length){geometry.addAttribute('normal',new THREE.BufferAttribute(normals,3));}
return geometry;}
function Float32Concat(first,second){var firstLength=first.length,result=new Float32Array(firstLength+second.length);result.set(first);result.set(second,firstLength);return result;}
function Int32Concat(first,second){var firstLength=first.length,result=new Int32Array(firstLength+second.length);result.set(first);result.set(second,firstLength);return result;}
function parseXML(stringFile){function xmlToJson(xml){var obj={};if(xml.nodeType==1){if(xml.attributes){if(xml.attributes.length>0){obj['attributes']={};for(var j=0;j<xml.attributes.length;j++){var attribute=xml.attributes.item(j);obj['attributes'][attribute.nodeName]=attribute.nodeValue.trim();}}}}else if(xml.nodeType==3){obj=xml.nodeValue.trim();}
if(xml.hasChildNodes()){for(var i=0;i<xml.childNodes.length;i++){var item=xml.childNodes.item(i);var nodeName=item.nodeName;if(typeof obj[nodeName]==='undefined'){var tmp=xmlToJson(item);if(tmp!=='')obj[nodeName]=tmp;}else{if(typeof obj[nodeName].push==='undefined'){var old=obj[nodeName];obj[nodeName]=[old];}
var tmp=xmlToJson(item);if(tmp!=='')obj[nodeName].push(tmp);}}}
return obj;}
function Base64toByteArray(b64){var Arr=typeof Uint8Array!=='undefined'?Uint8Array:Array;var i;var lookup=[];var revLookup=[];var code='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';var len=code.length;for(i=0;i<len;i++){lookup[i]=code[i];}
for(i=0;i<len;++i){revLookup[code.charCodeAt(i)]=i;}
revLookup['-'.charCodeAt(0)]=62;revLookup['_'.charCodeAt(0)]=63;var j,l,tmp,placeHolders,arr;var len=b64.length;if(len%4>0){throw new Error('Invalid string. Length must be a multiple of 4');}
placeHolders=b64[len-2]==='='?2:b64[len-1]==='='?1:0;arr=new Arr(len*3/4-placeHolders);l=placeHolders>0?len-4:len;var L=0;for(i=0,j=0;i<l;i+=4,j+=3){tmp=(revLookup[b64.charCodeAt(i)]<<18)|(revLookup[b64.charCodeAt(i+1)]<<12)|(revLookup[b64.charCodeAt(i+2)]<<6)|revLookup[b64.charCodeAt(i+3)];arr[L++]=(tmp&0xFF0000)>>16;arr[L++]=(tmp&0xFF00)>>8;arr[L++]=tmp&0xFF;}
if(placeHolders===2){tmp=(revLookup[b64.charCodeAt(i)]<<2)|(revLookup[b64.charCodeAt(i+1)]>>4);arr[L++]=tmp&0xFF;}else if(placeHolders===1){tmp=(revLookup[b64.charCodeAt(i)]<<10)|(revLookup[b64.charCodeAt(i+1)]<<4)|(revLookup[b64.charCodeAt(i+2)]>>2);arr[L++]=(tmp>>8)&0xFF;arr[L++]=tmp&0xFF;}
return arr;}
function parseDataArray(ele,compressed){var numBytes=0;if(json.attributes.header_type=='UInt64'){numBytes=8;}else if(json.attributes.header_type=='UInt32'){numBytes=4;}
if(ele.attributes.format=='binary'&&compressed){var rawData,content,byteData,blocks,cSizeStart,headerSize,padding,dataOffsets,currentOffset;if(ele.attributes.type=='Float32'){var txt=new Float32Array();}else if(ele.attributes.type==='Int64'){var txt=new Int32Array();}
rawData=ele['#text'];byteData=Base64toByteArray(rawData);blocks=byteData[0];for(var i=1;i<numBytes-1;i++){blocks=blocks|(byteData[i]<<(i*numBytes));}
headerSize=(blocks+3)*numBytes;padding=((headerSize%3)>0)?3-(headerSize%3):0;headerSize=headerSize+padding;dataOffsets=[];currentOffset=headerSize;dataOffsets.push(currentOffset);cSizeStart=3*numBytes;for(var i=0;i<blocks;i++){var currentBlockSize=byteData[i*numBytes+cSizeStart];for(var j=1;j<numBytes-1;j++){currentBlockSize=currentBlockSize|(byteData[i*numBytes+cSizeStart+j]<<(j*8));}
currentOffset=currentOffset+currentBlockSize;dataOffsets.push(currentOffset);}
for(var i=0;i<dataOffsets.length-1;i++){var inflate=new Zlib.Inflate(byteData.slice(dataOffsets[i],dataOffsets[i+1]),{resize:true,verify:true});content=inflate.decompress();content=content.buffer;if(ele.attributes.type=='Float32'){content=new Float32Array(content);txt=Float32Concat(txt,content);}else if(ele.attributes.type==='Int64'){content=new Int32Array(content);txt=Int32Concat(txt,content);}}
delete ele['#text'];if(ele.attributes.type=='Float32'){if(ele.attributes.format=='binary'){if(!compressed){txt=txt.filter(function(el,idx){if(idx!==0)return true;});}}}else if(ele.attributes.type==='Int64'){if(ele.attributes.format=='binary'){if(!compressed){txt=txt.filter(function(el,idx){if(idx!==0)return true;});}
txt=txt.filter(function(el,idx){if(idx%2!==1)return true;});}}}else{if(ele.attributes.format=='binary'&&!compressed){var content=Base64toByteArray(ele['#text']);content=content.slice(numBytes).buffer;}else{if(ele['#text']){var content=ele['#text'].split(/\s+/).filter(function(el){if(el!=='')return el;});}else{var content=new Int32Array(0).buffer;}}
delete ele['#text'];if(ele.attributes.type=='Float32'){var txt=new Float32Array(content);}else if(ele.attributes.type=='Int32'){var txt=new Int32Array(content);}else if(ele.attributes.type==='Int64'){var txt=new Int32Array(content);if(ele.attributes.format=='binary'){txt=txt.filter(function(el,idx){if(idx%2!==1)return true;});}}}
return txt;}
var dom=null;if(window.DOMParser){try{dom=(new DOMParser()).parseFromString(stringFile,'text/xml');}catch(e){dom=null;}}else if(window.ActiveXObject){try{dom=new ActiveXObject('Microsoft.XMLDOM');dom.async=false;if(!dom.loadXML()){throw new Error(dom.parseError.reason+dom.parseError.srcText);}}catch(e){dom=null;}}else{throw new Error('Cannot parse xml string!');}
var doc=dom.documentElement;var json=xmlToJson(doc);var points=[];var normals=[];var indices=[];if(json.PolyData){var piece=json.PolyData.Piece;var compressed=json.attributes.hasOwnProperty('compressor');var sections=['PointData','Points','Strips','Polys'];var sectionIndex=0,numberOfSections=sections.length;while(sectionIndex<numberOfSections){var section=piece[sections[sectionIndex]];if(section&&section.DataArray){if(Object.prototype.toString.call(section.DataArray)==='[object Array]'){var arr=section.DataArray;}else{var arr=[section.DataArray];}
var dataArrayIndex=0,numberOfDataArrays=arr.length;while(dataArrayIndex<numberOfDataArrays){if(('#text'in arr[dataArrayIndex])&&(arr[dataArrayIndex]['#text'].length>0)){arr[dataArrayIndex].text=parseDataArray(arr[dataArrayIndex],compressed);}
dataArrayIndex++;}
switch(sections[sectionIndex]){case'PointData':var numberOfPoints=parseInt(piece.attributes.NumberOfPoints);var normalsName=section.attributes.Normals;if(numberOfPoints>0){for(var i=0,len=arr.length;i<len;i++){if(normalsName==arr[i].attributes.Name){var components=arr[i].attributes.NumberOfComponents;normals=new Float32Array(numberOfPoints*components);normals.set(arr[i].text,0);}}}
break;case'Points':var numberOfPoints=parseInt(piece.attributes.NumberOfPoints);if(numberOfPoints>0){var components=section.DataArray.attributes.NumberOfComponents;points=new Float32Array(numberOfPoints*components);points.set(section.DataArray.text,0);}
break;case'Strips':var numberOfStrips=parseInt(piece.attributes.NumberOfStrips);if(numberOfStrips>0){var connectivity=new Int32Array(section.DataArray[0].text.length);var offset=new Int32Array(section.DataArray[1].text.length);connectivity.set(section.DataArray[0].text,0);offset.set(section.DataArray[1].text,0);var size=numberOfStrips+connectivity.length;indices=new Uint32Array(3*size-9*numberOfStrips);var indicesIndex=0;for(var i=0,len=numberOfStrips;i<len;i++){var strip=[];for(var s=0,len1=offset[i],len0=0;s<len1-len0;s++){strip.push(connectivity[s]);if(i>0)len0=offset[i-1];}
for(var j=0,len1=offset[i],len0=0;j<len1-len0-2;j++){if(j%2){indices[indicesIndex++]=strip[j];indices[indicesIndex++]=strip[j+2];indices[indicesIndex++]=strip[j+1];}else{indices[indicesIndex++]=strip[j];indices[indicesIndex++]=strip[j+1];indices[indicesIndex++]=strip[j+2];}
if(i>0)len0=offset[i-1];}}}
break;case'Polys':var numberOfPolys=parseInt(piece.attributes.NumberOfPolys);if(numberOfPolys>0){var connectivity=new Int32Array(section.DataArray[0].text.length);var offset=new Int32Array(section.DataArray[1].text.length);connectivity.set(section.DataArray[0].text,0);offset.set(section.DataArray[1].text,0);var size=numberOfPolys+connectivity.length;indices=new Uint32Array(3*size-9*numberOfPolys);var indicesIndex=0,connectivityIndex=0;var i=0,len=numberOfPolys,len0=0;while(i<len){var poly=[];var s=0,len1=offset[i];while(s<len1-len0){poly.push(connectivity[connectivityIndex++]);s++;}
var j=1;while(j<len1-len0-1){indices[indicesIndex++]=poly[0];indices[indicesIndex++]=poly[j];indices[indicesIndex++]=poly[j+1];j++;}
i++;len0=offset[i-1];}}
break;default:break;}}
sectionIndex++;}
var geometry=new THREE.BufferGeometry();geometry.setIndex(new THREE.BufferAttribute(indices,1));geometry.addAttribute('position',new THREE.BufferAttribute(points,3));if(normals.length==points.length){geometry.addAttribute('normal',new THREE.BufferAttribute(normals,3));}
return geometry;}else{}}
function getStringFile(data){var stringFile='';var charArray=new Uint8Array(data);var i=0;var len=charArray.length;while(len--){stringFile+=String.fromCharCode(charArray[i++]);}
return stringFile;}
var meta=String.fromCharCode.apply(null,new Uint8Array(data,0,250)).split('\n');if(meta[0].indexOf('xml')!==-1){return parseXML(getStringFile(data));}else if(meta[2].includes('ASCII')){return parseASCII(getStringFile(data));}else{return parseBinary(data);}}});var LZMA=LZMA||{};if(typeof module==='object'){module.exports=LZMA;}
LZMA.OutWindow=function(){this._windowSize=0;};LZMA.OutWindow.prototype.create=function(windowSize){if((!this._buffer)||(this._windowSize!==windowSize)){this._buffer=[];}
this._windowSize=windowSize;this._pos=0;this._streamPos=0;};LZMA.OutWindow.prototype.flush=function(){var size=this._pos-this._streamPos;if(size!==0){while(size--){this._stream.writeByte(this._buffer[this._streamPos++]);}
if(this._pos>=this._windowSize){this._pos=0;}
this._streamPos=this._pos;}};LZMA.OutWindow.prototype.releaseStream=function(){this.flush();this._stream=null;};LZMA.OutWindow.prototype.setStream=function(stream){this.releaseStream();this._stream=stream;};LZMA.OutWindow.prototype.init=function(solid){if(!solid){this._streamPos=0;this._pos=0;}};LZMA.OutWindow.prototype.copyBlock=function(distance,len){var pos=this._pos-distance-1;if(pos<0){pos+=this._windowSize;}
while(len--){if(pos>=this._windowSize){pos=0;}
this._buffer[this._pos++]=this._buffer[pos++];if(this._pos>=this._windowSize){this.flush();}}};LZMA.OutWindow.prototype.putByte=function(b){this._buffer[this._pos++]=b;if(this._pos>=this._windowSize){this.flush();}};LZMA.OutWindow.prototype.getByte=function(distance){var pos=this._pos-distance-1;if(pos<0){pos+=this._windowSize;}
return this._buffer[pos];};LZMA.RangeDecoder=function(){};LZMA.RangeDecoder.prototype.setStream=function(stream){this._stream=stream;};LZMA.RangeDecoder.prototype.releaseStream=function(){this._stream=null;};LZMA.RangeDecoder.prototype.init=function(){var i=5;this._code=0;this._range=-1;while(i--){this._code=(this._code<<8)|this._stream.readByte();}};LZMA.RangeDecoder.prototype.decodeDirectBits=function(numTotalBits){var result=0,i=numTotalBits,t;while(i--){this._range>>>=1;t=(this._code-this._range)>>>31;this._code-=this._range&(t-1);result=(result<<1)|(1-t);if((this._range&0xff000000)===0){this._code=(this._code<<8)|this._stream.readByte();this._range<<=8;}}
return result;};LZMA.RangeDecoder.prototype.decodeBit=function(probs,index){var prob=probs[index],newBound=(this._range>>>11)*prob;if((this._code^0x80000000)<(newBound^0x80000000)){this._range=newBound;probs[index]+=(2048-prob)>>>5;if((this._range&0xff000000)===0){this._code=(this._code<<8)|this._stream.readByte();this._range<<=8;}
return 0;}
this._range-=newBound;this._code-=newBound;probs[index]-=prob>>>5;if((this._range&0xff000000)===0){this._code=(this._code<<8)|this._stream.readByte();this._range<<=8;}
return 1;};LZMA.initBitModels=function(probs,len){while(len--){probs[len]=1024;}};LZMA.BitTreeDecoder=function(numBitLevels){this._models=[];this._numBitLevels=numBitLevels;};LZMA.BitTreeDecoder.prototype.init=function(){LZMA.initBitModels(this._models,1<<this._numBitLevels);};LZMA.BitTreeDecoder.prototype.decode=function(rangeDecoder){var m=1,i=this._numBitLevels;while(i--){m=(m<<1)|rangeDecoder.decodeBit(this._models,m);}
return m-(1<<this._numBitLevels);};LZMA.BitTreeDecoder.prototype.reverseDecode=function(rangeDecoder){var m=1,symbol=0,i=0,bit;for(;i<this._numBitLevels;++i){bit=rangeDecoder.decodeBit(this._models,m);m=(m<<1)|bit;symbol|=bit<<i;}
return symbol;};LZMA.reverseDecode2=function(models,startIndex,rangeDecoder,numBitLevels){var m=1,symbol=0,i=0,bit;for(;i<numBitLevels;++i){bit=rangeDecoder.decodeBit(models,startIndex+m);m=(m<<1)|bit;symbol|=bit<<i;}
return symbol;};LZMA.LenDecoder=function(){this._choice=[];this._lowCoder=[];this._midCoder=[];this._highCoder=new LZMA.BitTreeDecoder(8);this._numPosStates=0;};LZMA.LenDecoder.prototype.create=function(numPosStates){for(;this._numPosStates<numPosStates;++this._numPosStates){this._lowCoder[this._numPosStates]=new LZMA.BitTreeDecoder(3);this._midCoder[this._numPosStates]=new LZMA.BitTreeDecoder(3);}};LZMA.LenDecoder.prototype.init=function(){var i=this._numPosStates;LZMA.initBitModels(this._choice,2);while(i--){this._lowCoder[i].init();this._midCoder[i].init();}
this._highCoder.init();};LZMA.LenDecoder.prototype.decode=function(rangeDecoder,posState){if(rangeDecoder.decodeBit(this._choice,0)===0){return this._lowCoder[posState].decode(rangeDecoder);}
if(rangeDecoder.decodeBit(this._choice,1)===0){return 8+this._midCoder[posState].decode(rangeDecoder);}
return 16+this._highCoder.decode(rangeDecoder);};LZMA.Decoder2=function(){this._decoders=[];};LZMA.Decoder2.prototype.init=function(){LZMA.initBitModels(this._decoders,0x300);};LZMA.Decoder2.prototype.decodeNormal=function(rangeDecoder){var symbol=1;do{symbol=(symbol<<1)|rangeDecoder.decodeBit(this._decoders,symbol);}while(symbol<0x100);return symbol&0xff;};LZMA.Decoder2.prototype.decodeWithMatchByte=function(rangeDecoder,matchByte){var symbol=1,matchBit,bit;do{matchBit=(matchByte>>7)&1;matchByte<<=1;bit=rangeDecoder.decodeBit(this._decoders,((1+matchBit)<<8)+symbol);symbol=(symbol<<1)|bit;if(matchBit!==bit){while(symbol<0x100){symbol=(symbol<<1)|rangeDecoder.decodeBit(this._decoders,symbol);}
break;}}while(symbol<0x100);return symbol&0xff;};LZMA.LiteralDecoder=function(){};LZMA.LiteralDecoder.prototype.create=function(numPosBits,numPrevBits){var i;if(this._coders&&(this._numPrevBits===numPrevBits)&&(this._numPosBits===numPosBits)){return;}
this._numPosBits=numPosBits;this._posMask=(1<<numPosBits)-1;this._numPrevBits=numPrevBits;this._coders=[];i=1<<(this._numPrevBits+this._numPosBits);while(i--){this._coders[i]=new LZMA.Decoder2();}};LZMA.LiteralDecoder.prototype.init=function(){var i=1<<(this._numPrevBits+this._numPosBits);while(i--){this._coders[i].init();}};LZMA.LiteralDecoder.prototype.getDecoder=function(pos,prevByte){return this._coders[((pos&this._posMask)<<this._numPrevBits)
+((prevByte&0xff)>>>(8-this._numPrevBits))];};LZMA.Decoder=function(){this._outWindow=new LZMA.OutWindow();this._rangeDecoder=new LZMA.RangeDecoder();this._isMatchDecoders=[];this._isRepDecoders=[];this._isRepG0Decoders=[];this._isRepG1Decoders=[];this._isRepG2Decoders=[];this._isRep0LongDecoders=[];this._posSlotDecoder=[];this._posDecoders=[];this._posAlignDecoder=new LZMA.BitTreeDecoder(4);this._lenDecoder=new LZMA.LenDecoder();this._repLenDecoder=new LZMA.LenDecoder();this._literalDecoder=new LZMA.LiteralDecoder();this._dictionarySize=-1;this._dictionarySizeCheck=-1;this._posSlotDecoder[0]=new LZMA.BitTreeDecoder(6);this._posSlotDecoder[1]=new LZMA.BitTreeDecoder(6);this._posSlotDecoder[2]=new LZMA.BitTreeDecoder(6);this._posSlotDecoder[3]=new LZMA.BitTreeDecoder(6);};LZMA.Decoder.prototype.setDictionarySize=function(dictionarySize){if(dictionarySize<0){return false;}
if(this._dictionarySize!==dictionarySize){this._dictionarySize=dictionarySize;this._dictionarySizeCheck=Math.max(this._dictionarySize,1);this._outWindow.create(Math.max(this._dictionarySizeCheck,4096));}
return true;};LZMA.Decoder.prototype.setLcLpPb=function(lc,lp,pb){var numPosStates=1<<pb;if(lc>8||lp>4||pb>4){return false;}
this._literalDecoder.create(lp,lc);this._lenDecoder.create(numPosStates);this._repLenDecoder.create(numPosStates);this._posStateMask=numPosStates-1;return true;};LZMA.Decoder.prototype.init=function(){var i=4;this._outWindow.init(false);LZMA.initBitModels(this._isMatchDecoders,192);LZMA.initBitModels(this._isRep0LongDecoders,192);LZMA.initBitModels(this._isRepDecoders,12);LZMA.initBitModels(this._isRepG0Decoders,12);LZMA.initBitModels(this._isRepG1Decoders,12);LZMA.initBitModels(this._isRepG2Decoders,12);LZMA.initBitModels(this._posDecoders,114);this._literalDecoder.init();while(i--){this._posSlotDecoder[i].init();}
this._lenDecoder.init();this._repLenDecoder.init();this._posAlignDecoder.init();this._rangeDecoder.init();};LZMA.Decoder.prototype.decode=function(inStream,outStream,outSize){var state=0,rep0=0,rep1=0,rep2=0,rep3=0,nowPos64=0,prevByte=0,posState,decoder2,len,distance,posSlot,numDirectBits;this._rangeDecoder.setStream(inStream);this._outWindow.setStream(outStream);this.init();while(outSize<0||nowPos64<outSize){posState=nowPos64&this._posStateMask;if(this._rangeDecoder.decodeBit(this._isMatchDecoders,(state<<4)+posState)===0){decoder2=this._literalDecoder.getDecoder(nowPos64++,prevByte);if(state>=7){prevByte=decoder2.decodeWithMatchByte(this._rangeDecoder,this._outWindow.getByte(rep0));}else{prevByte=decoder2.decodeNormal(this._rangeDecoder);}
this._outWindow.putByte(prevByte);state=state<4?0:state-(state<10?3:6);}else{if(this._rangeDecoder.decodeBit(this._isRepDecoders,state)===1){len=0;if(this._rangeDecoder.decodeBit(this._isRepG0Decoders,state)===0){if(this._rangeDecoder.decodeBit(this._isRep0LongDecoders,(state<<4)+posState)===0){state=state<7?9:11;len=1;}}else{if(this._rangeDecoder.decodeBit(this._isRepG1Decoders,state)===0){distance=rep1;}else{if(this._rangeDecoder.decodeBit(this._isRepG2Decoders,state)===0){distance=rep2;}else{distance=rep3;rep3=rep2;}
rep2=rep1;}
rep1=rep0;rep0=distance;}
if(len===0){len=2+this._repLenDecoder.decode(this._rangeDecoder,posState);state=state<7?8:11;}}else{rep3=rep2;rep2=rep1;rep1=rep0;len=2+this._lenDecoder.decode(this._rangeDecoder,posState);state=state<7?7:10;posSlot=this._posSlotDecoder[len<=5?len-2:3].decode(this._rangeDecoder);if(posSlot>=4){numDirectBits=(posSlot>>1)-1;rep0=(2|(posSlot&1))<<numDirectBits;if(posSlot<14){rep0+=LZMA.reverseDecode2(this._posDecoders,rep0-posSlot-1,this._rangeDecoder,numDirectBits);}else{rep0+=this._rangeDecoder.decodeDirectBits(numDirectBits-4)<<4;rep0+=this._posAlignDecoder.reverseDecode(this._rangeDecoder);if(rep0<0){if(rep0===-1){break;}
return false;}}}else{rep0=posSlot;}}
if(rep0>=nowPos64||rep0>=this._dictionarySizeCheck){return false;}
this._outWindow.copyBlock(rep0,len);nowPos64+=len;prevByte=this._outWindow.getByte(0);}}
this._outWindow.flush();this._outWindow.releaseStream();this._rangeDecoder.releaseStream();return true;};LZMA.Decoder.prototype.setDecoderProperties=function(properties){var value,lc,lp,pb,dictionarySize;if(properties.size<5){return false;}
value=properties.readByte();lc=value%9;value=~~(value/9);lp=value%5;pb=~~(value/5);if(!this.setLcLpPb(lc,lp,pb)){return false;}
dictionarySize=properties.readByte();dictionarySize|=properties.readByte()<<8;dictionarySize|=properties.readByte()<<16;dictionarySize+=properties.readByte()*16777216;return this.setDictionarySize(dictionarySize);};LZMA.decompress=function(properties,inStream,outStream,outSize){var decoder=new LZMA.Decoder();if(!decoder.setDecoderProperties(properties)){throw"Incorrect stream properties";}
if(!decoder.decode(inStream,outStream,outSize)){throw"Error in data stream";}
return true;};var CTM=CTM||{};if(typeof module==='object'){module.exports=CTM;}
CTM.CompressionMethod={RAW:0x00574152,MG1:0x0031474d,MG2:0x0032474d};CTM.Flags={NORMALS:0x00000001};CTM.File=function(stream){this.load(stream);};CTM.File.prototype.load=function(stream){this.header=new CTM.FileHeader(stream);this.body=new CTM.FileBody(this.header);this.getReader().read(stream,this.body);};CTM.File.prototype.getReader=function(){var reader;switch(this.header.compressionMethod){case CTM.CompressionMethod.RAW:reader=new CTM.ReaderRAW();break;case CTM.CompressionMethod.MG1:reader=new CTM.ReaderMG1();break;case CTM.CompressionMethod.MG2:reader=new CTM.ReaderMG2();break;}
return reader;};CTM.FileHeader=function(stream){stream.readInt32();this.fileFormat=stream.readInt32();this.compressionMethod=stream.readInt32();this.vertexCount=stream.readInt32();this.triangleCount=stream.readInt32();this.uvMapCount=stream.readInt32();this.attrMapCount=stream.readInt32();this.flags=stream.readInt32();this.comment=stream.readString();};CTM.FileHeader.prototype.hasNormals=function(){return this.flags&CTM.Flags.NORMALS;};CTM.FileBody=function(header){var i=header.triangleCount*3,v=header.vertexCount*3,n=header.hasNormals()?header.vertexCount*3:0,u=header.vertexCount*2,a=header.vertexCount*4,j=0;var data=new ArrayBuffer((i+v+n+(u*header.uvMapCount)+(a*header.attrMapCount))*4);this.indices=new Uint32Array(data,0,i);this.vertices=new Float32Array(data,i*4,v);if(header.hasNormals()){this.normals=new Float32Array(data,(i+v)*4,n);}
if(header.uvMapCount){this.uvMaps=[];for(j=0;j<header.uvMapCount;++j){this.uvMaps[j]={uv:new Float32Array(data,(i+v+n+(j*u))*4,u)};}}
if(header.attrMapCount){this.attrMaps=[];for(j=0;j<header.attrMapCount;++j){this.attrMaps[j]={attr:new Float32Array(data,(i+v+n+(u*header.uvMapCount)+(j*a))*4,a)};}}};CTM.FileMG2Header=function(stream){stream.readInt32();this.vertexPrecision=stream.readFloat32();this.normalPrecision=stream.readFloat32();this.lowerBoundx=stream.readFloat32();this.lowerBoundy=stream.readFloat32();this.lowerBoundz=stream.readFloat32();this.higherBoundx=stream.readFloat32();this.higherBoundy=stream.readFloat32();this.higherBoundz=stream.readFloat32();this.divx=stream.readInt32();this.divy=stream.readInt32();this.divz=stream.readInt32();this.sizex=(this.higherBoundx-this.lowerBoundx)/this.divx;this.sizey=(this.higherBoundy-this.lowerBoundy)/this.divy;this.sizez=(this.higherBoundz-this.lowerBoundz)/this.divz;};CTM.ReaderRAW=function(){};CTM.ReaderRAW.prototype.read=function(stream,body){this.readIndices(stream,body.indices);this.readVertices(stream,body.vertices);if(body.normals){this.readNormals(stream,body.normals);}
if(body.uvMaps){this.readUVMaps(stream,body.uvMaps);}
if(body.attrMaps){this.readAttrMaps(stream,body.attrMaps);}};CTM.ReaderRAW.prototype.readIndices=function(stream,indices){stream.readInt32();stream.readArrayInt32(indices);};CTM.ReaderRAW.prototype.readVertices=function(stream,vertices){stream.readInt32();stream.readArrayFloat32(vertices);};CTM.ReaderRAW.prototype.readNormals=function(stream,normals){stream.readInt32();stream.readArrayFloat32(normals);};CTM.ReaderRAW.prototype.readUVMaps=function(stream,uvMaps){var i=0;for(;i<uvMaps.length;++i){stream.readInt32();uvMaps[i].name=stream.readString();uvMaps[i].filename=stream.readString();stream.readArrayFloat32(uvMaps[i].uv);}};CTM.ReaderRAW.prototype.readAttrMaps=function(stream,attrMaps){var i=0;for(;i<attrMaps.length;++i){stream.readInt32();attrMaps[i].name=stream.readString();stream.readArrayFloat32(attrMaps[i].attr);}};CTM.ReaderMG1=function(){};CTM.ReaderMG1.prototype.read=function(stream,body){this.readIndices(stream,body.indices);this.readVertices(stream,body.vertices);if(body.normals){this.readNormals(stream,body.normals);}
if(body.uvMaps){this.readUVMaps(stream,body.uvMaps);}
if(body.attrMaps){this.readAttrMaps(stream,body.attrMaps);}};CTM.ReaderMG1.prototype.readIndices=function(stream,indices){stream.readInt32();stream.readInt32();var interleaved=new CTM.InterleavedStream(indices,3);LZMA.decompress(stream,stream,interleaved,interleaved.data.length);CTM.restoreIndices(indices,indices.length);};CTM.ReaderMG1.prototype.readVertices=function(stream,vertices){stream.readInt32();stream.readInt32();var interleaved=new CTM.InterleavedStream(vertices,1);LZMA.decompress(stream,stream,interleaved,interleaved.data.length);};CTM.ReaderMG1.prototype.readNormals=function(stream,normals){stream.readInt32();stream.readInt32();var interleaved=new CTM.InterleavedStream(normals,3);LZMA.decompress(stream,stream,interleaved,interleaved.data.length);};CTM.ReaderMG1.prototype.readUVMaps=function(stream,uvMaps){var i=0;for(;i<uvMaps.length;++i){stream.readInt32();uvMaps[i].name=stream.readString();uvMaps[i].filename=stream.readString();stream.readInt32();var interleaved=new CTM.InterleavedStream(uvMaps[i].uv,2);LZMA.decompress(stream,stream,interleaved,interleaved.data.length);}};CTM.ReaderMG1.prototype.readAttrMaps=function(stream,attrMaps){var i=0;for(;i<attrMaps.length;++i){stream.readInt32();attrMaps[i].name=stream.readString();stream.readInt32();var interleaved=new CTM.InterleavedStream(attrMaps[i].attr,4);LZMA.decompress(stream,stream,interleaved,interleaved.data.length);}};CTM.ReaderMG2=function(){};CTM.ReaderMG2.prototype.read=function(stream,body){this.MG2Header=new CTM.FileMG2Header(stream);this.readVertices(stream,body.vertices);this.readIndices(stream,body.indices);if(body.normals){this.readNormals(stream,body);}
if(body.uvMaps){this.readUVMaps(stream,body.uvMaps);}
if(body.attrMaps){this.readAttrMaps(stream,body.attrMaps);}};CTM.ReaderMG2.prototype.readVertices=function(stream,vertices){stream.readInt32();stream.readInt32();var interleaved=new CTM.InterleavedStream(vertices,3);LZMA.decompress(stream,stream,interleaved,interleaved.data.length);var gridIndices=this.readGridIndices(stream,vertices);CTM.restoreVertices(vertices,this.MG2Header,gridIndices,this.MG2Header.vertexPrecision);};CTM.ReaderMG2.prototype.readGridIndices=function(stream,vertices){stream.readInt32();stream.readInt32();var gridIndices=new Uint32Array(vertices.length/3);var interleaved=new CTM.InterleavedStream(gridIndices,1);LZMA.decompress(stream,stream,interleaved,interleaved.data.length);CTM.restoreGridIndices(gridIndices,gridIndices.length);return gridIndices;};CTM.ReaderMG2.prototype.readIndices=function(stream,indices){stream.readInt32();stream.readInt32();var interleaved=new CTM.InterleavedStream(indices,3);LZMA.decompress(stream,stream,interleaved,interleaved.data.length);CTM.restoreIndices(indices,indices.length);};CTM.ReaderMG2.prototype.readNormals=function(stream,body){stream.readInt32();stream.readInt32();var interleaved=new CTM.InterleavedStream(body.normals,3);LZMA.decompress(stream,stream,interleaved,interleaved.data.length);var smooth=CTM.calcSmoothNormals(body.indices,body.vertices);CTM.restoreNormals(body.normals,smooth,this.MG2Header.normalPrecision);};CTM.ReaderMG2.prototype.readUVMaps=function(stream,uvMaps){var i=0;for(;i<uvMaps.length;++i){stream.readInt32();uvMaps[i].name=stream.readString();uvMaps[i].filename=stream.readString();var precision=stream.readFloat32();stream.readInt32();var interleaved=new CTM.InterleavedStream(uvMaps[i].uv,2);LZMA.decompress(stream,stream,interleaved,interleaved.data.length);CTM.restoreMap(uvMaps[i].uv,2,precision);}};CTM.ReaderMG2.prototype.readAttrMaps=function(stream,attrMaps){var i=0;for(;i<attrMaps.length;++i){stream.readInt32();attrMaps[i].name=stream.readString();var precision=stream.readFloat32();stream.readInt32();var interleaved=new CTM.InterleavedStream(attrMaps[i].attr,4);LZMA.decompress(stream,stream,interleaved,interleaved.data.length);CTM.restoreMap(attrMaps[i].attr,4,precision);}};CTM.restoreIndices=function(indices,len){var i=3;if(len>0){indices[2]+=indices[0];indices[1]+=indices[0];}
for(;i<len;i+=3){indices[i]+=indices[i-3];if(indices[i]===indices[i-3]){indices[i+1]+=indices[i-2];}else{indices[i+1]+=indices[i];}
indices[i+2]+=indices[i];}};CTM.restoreGridIndices=function(gridIndices,len){var i=1;for(;i<len;++i){gridIndices[i]+=gridIndices[i-1];}};CTM.restoreVertices=function(vertices,grid,gridIndices,precision){var gridIdx,delta,x,y,z,intVertices=new Uint32Array(vertices.buffer,vertices.byteOffset,vertices.length),ydiv=grid.divx,zdiv=ydiv*grid.divy,prevGridIdx=0x7fffffff,prevDelta=0,i=0,j=0,len=gridIndices.length;for(;i<len;j+=3){x=gridIdx=gridIndices[i++];z=~~(x/zdiv);x-=~~(z*zdiv);y=~~(x/ydiv);x-=~~(y*ydiv);delta=intVertices[j];if(gridIdx===prevGridIdx){delta+=prevDelta;}
vertices[j]=grid.lowerBoundx+
x*grid.sizex+precision*delta;vertices[j+1]=grid.lowerBoundy+
y*grid.sizey+precision*intVertices[j+1];vertices[j+2]=grid.lowerBoundz+
z*grid.sizez+precision*intVertices[j+2];prevGridIdx=gridIdx;prevDelta=delta;}};CTM.restoreNormals=function(normals,smooth,precision){var ro,phi,theta,sinPhi,nx,ny,nz,by,bz,len,intNormals=new Uint32Array(normals.buffer,normals.byteOffset,normals.length),i=0,k=normals.length,PI_DIV_2=3.141592653589793238462643*0.5;for(;i<k;i+=3){ro=intNormals[i]*precision;phi=intNormals[i+1];if(phi===0){normals[i]=smooth[i]*ro;normals[i+1]=smooth[i+1]*ro;normals[i+2]=smooth[i+2]*ro;}else{if(phi<=4){theta=(intNormals[i+2]-2)*PI_DIV_2;}else{theta=((intNormals[i+2]*4/phi)-2)*PI_DIV_2;}
phi*=precision*PI_DIV_2;sinPhi=ro*Math.sin(phi);nx=sinPhi*Math.cos(theta);ny=sinPhi*Math.sin(theta);nz=ro*Math.cos(phi);bz=smooth[i+1];by=smooth[i]-smooth[i+2];len=Math.sqrt(2*bz*bz+by*by);if(len>1e-20){by/=len;bz/=len;}
normals[i]=smooth[i]*nz+
(smooth[i+1]*bz-smooth[i+2]*by)*ny-bz*nx;normals[i+1]=smooth[i+1]*nz-
(smooth[i+2]+smooth[i])*bz*ny+by*nx;normals[i+2]=smooth[i+2]*nz+
(smooth[i]*by+smooth[i+1]*bz)*ny+bz*nx;}}};CTM.restoreMap=function(map,count,precision){var delta,value,intMap=new Uint32Array(map.buffer,map.byteOffset,map.length),i=0,j,len=map.length;for(;i<count;++i){delta=0;for(j=i;j<len;j+=count){value=intMap[j];delta+=value&1?-((value+1)>>1):value>>1;map[j]=delta*precision;}}};CTM.calcSmoothNormals=function(indices,vertices){var smooth=new Float32Array(vertices.length),indx,indy,indz,nx,ny,nz,v1x,v1y,v1z,v2x,v2y,v2z,len,i,k;for(i=0,k=indices.length;i<k;){indx=indices[i++]*3;indy=indices[i++]*3;indz=indices[i++]*3;v1x=vertices[indy]-vertices[indx];v2x=vertices[indz]-vertices[indx];v1y=vertices[indy+1]-vertices[indx+1];v2y=vertices[indz+1]-vertices[indx+1];v1z=vertices[indy+2]-vertices[indx+2];v2z=vertices[indz+2]-vertices[indx+2];nx=v1y*v2z-v1z*v2y;ny=v1z*v2x-v1x*v2z;nz=v1x*v2y-v1y*v2x;len=Math.sqrt(nx*nx+ny*ny+nz*nz);if(len>1e-10){nx/=len;ny/=len;nz/=len;}
smooth[indx]+=nx;smooth[indx+1]+=ny;smooth[indx+2]+=nz;smooth[indy]+=nx;smooth[indy+1]+=ny;smooth[indy+2]+=nz;smooth[indz]+=nx;smooth[indz+1]+=ny;smooth[indz+2]+=nz;}
for(i=0,k=smooth.length;i<k;i+=3){len=Math.sqrt(smooth[i]*smooth[i]+
smooth[i+1]*smooth[i+1]+
smooth[i+2]*smooth[i+2]);if(len>1e-10){smooth[i]/=len;smooth[i+1]/=len;smooth[i+2]/=len;}}
return smooth;};CTM.isLittleEndian=(function(){var buffer=new ArrayBuffer(2),bytes=new Uint8Array(buffer),ints=new Uint16Array(buffer);bytes[0]=1;return ints[0]===1;}());CTM.InterleavedStream=function(data,count){this.data=new Uint8Array(data.buffer,data.byteOffset,data.byteLength);this.offset=CTM.isLittleEndian?3:0;this.count=count*4;this.len=this.data.length;};CTM.InterleavedStream.prototype.writeByte=function(value){this.data[this.offset]=value;this.offset+=this.count;if(this.offset>=this.len){this.offset-=this.len-4;if(this.offset>=this.count){this.offset-=this.count+(CTM.isLittleEndian?1:-1);}}};CTM.Stream=function(data){this.data=data;this.offset=0;};CTM.Stream.prototype.TWO_POW_MINUS23=Math.pow(2,-23);CTM.Stream.prototype.TWO_POW_MINUS126=Math.pow(2,-126);CTM.Stream.prototype.readByte=function(){return this.data[this.offset++]&0xff;};CTM.Stream.prototype.readInt32=function(){var i=this.readByte();i|=this.readByte()<<8;i|=this.readByte()<<16;return i|(this.readByte()<<24);};CTM.Stream.prototype.readFloat32=function(){var m=this.readByte();m+=this.readByte()<<8;var b1=this.readByte();var b2=this.readByte();m+=(b1&0x7f)<<16;var e=((b2&0x7f)<<1)|((b1&0x80)>>>7);var s=b2&0x80?-1:1;if(e===255){return m!==0?NaN:s*Infinity;}
if(e>0){return s*(1+(m*this.TWO_POW_MINUS23))*Math.pow(2,e-127);}
if(m!==0){return s*m*this.TWO_POW_MINUS126;}
return s*0;};CTM.Stream.prototype.readString=function(){var len=this.readInt32();this.offset+=len;return String.fromCharCode.apply(null,this.data.subarray(this.offset-len,this.offset));};CTM.Stream.prototype.readArrayInt32=function(array){var i=0,len=array.length;while(i<len){array[i++]=this.readInt32();}
return array;};CTM.Stream.prototype.readArrayFloat32=function(array){var i=0,len=array.length;while(i<len){array[i++]=this.readFloat32();}
return array;};THREE.CTMLoader=function(){THREE.Loader.call(this);};THREE.CTMLoader.prototype=Object.create(THREE.Loader.prototype);THREE.CTMLoader.prototype.constructor=THREE.CTMLoader;THREE.CTMLoader.prototype.loadParts=function(url,callback,parameters){parameters=parameters||{};var scope=this;var xhr=new XMLHttpRequest();var basePath=parameters.basePath?parameters.basePath:this.extractUrlBase(url);xhr.onreadystatechange=function(){if(xhr.readyState===4){if(xhr.status===200||xhr.status===0){var jsonObject=JSON.parse(xhr.responseText);var materials=[],geometries=[],counter=0;function callbackFinal(geometry){counter+=1;geometries.push(geometry);if(counter===jsonObject.offsets.length){callback(geometries,materials);}}
for(var i=0;i<jsonObject.materials.length;i++){materials[i]=scope.createMaterial(jsonObject.materials[i],basePath);}
var partUrl=basePath+jsonObject.data;var parametersPart={useWorker:parameters.useWorker,worker:parameters.worker,offsets:jsonObject.offsets};scope.load(partUrl,callbackFinal,parametersPart);}}};xhr.open("GET",url,true);xhr.setRequestHeader("Content-Type","text/plain");xhr.send(null);};THREE.CTMLoader.prototype.load=function(url,callback,parameters){parameters=parameters||{};var scope=this;var offsets=parameters.offsets!==undefined?parameters.offsets:[0];var xhr=new XMLHttpRequest(),callbackProgress=null;var length=0;xhr.onreadystatechange=function(){if(xhr.readyState===4){if(xhr.status===200||xhr.status===0){var binaryData=new Uint8Array(xhr.response);var s=Date.now();if(parameters.useWorker){var worker=parameters.worker||new Worker('js/loaders/ctm/CTMWorker.js');worker.onmessage=function(event){var files=event.data;for(var i=0;i<files.length;i++){var ctmFile=files[i];var e1=Date.now();scope.createModel(ctmFile,callback);var e=Date.now();console.log("model load time [worker]: "+(e-e1)+" ms, total: "+(e-s));}};worker.postMessage({"data":binaryData,"offsets":offsets},[binaryData.buffer]);}else{for(var i=0;i<offsets.length;i++){var stream=new CTM.Stream(binaryData);stream.offset=offsets[i];var ctmFile=new CTM.File(stream);scope.createModel(ctmFile,callback);}}}else{console.error("Couldn't load ["+url+"] ["+xhr.status+"]");}}else if(xhr.readyState===3){if(callbackProgress){if(length===0){length=xhr.getResponseHeader("Content-Length");}
callbackProgress({total:length,loaded:xhr.responseText.length});}}else if(xhr.readyState===2){length=xhr.getResponseHeader("Content-Length");}};xhr.open("GET",url,true);xhr.responseType="arraybuffer";xhr.send(null);};THREE.CTMLoader.prototype.createModel=function(file,callback){var Model=function(){THREE.BufferGeometry.call(this);this.materials=[];var indices=file.body.indices;var positions=file.body.vertices;var normals=file.body.normals;var uvs,colors;var uvMaps=file.body.uvMaps;if(uvMaps!==undefined&&uvMaps.length>0){uvs=uvMaps[0].uv;}
var attrMaps=file.body.attrMaps;if(attrMaps!==undefined&&attrMaps.length>0&&attrMaps[0].name==='Color'){colors=attrMaps[0].attr;}
this.setIndex(new THREE.BufferAttribute(indices,1));this.addAttribute('position',new THREE.BufferAttribute(positions,3));if(normals!==undefined){this.addAttribute('normal',new THREE.BufferAttribute(normals,3));}
if(uvs!==undefined){this.addAttribute('uv',new THREE.BufferAttribute(uvs,2));}
if(colors!==undefined){this.addAttribute('color',new THREE.BufferAttribute(colors,4));}};Model.prototype=Object.create(THREE.BufferGeometry.prototype);Model.prototype.constructor=Model;var geometry=new Model();if(geometry.attributes.normal===undefined){geometry.computeVertexNormals();}
callback(geometry);};THREE.OBJExporter=function(){};THREE.OBJExporter.prototype={constructor:THREE.OBJExporter,parse:function(object){var output='';var indexVertex=0;var indexVertexUvs=0;var indexNormals=0;var vertex=new THREE.Vector3();var normal=new THREE.Vector3();var uv=new THREE.Vector2();var i,j,k,l,m,face=[];var parseMesh=function(mesh){var nbVertex=0;var nbNormals=0;var nbVertexUvs=0;var geometry=mesh.geometry;var normalMatrixWorld=new THREE.Matrix3();if(geometry instanceof THREE.Geometry){geometry=new THREE.BufferGeometry().setFromObject(mesh);}
if(geometry instanceof THREE.BufferGeometry){var vertices=geometry.getAttribute('position');var normals=geometry.getAttribute('normal');var uvs=geometry.getAttribute('uv');var indices=geometry.getIndex();output+='o '+mesh.name+'\n';if(mesh.material&&mesh.material.name){output+='usemtl '+mesh.material.name+'\n';}
if(vertices!==undefined){for(i=0,l=vertices.count;i<l;i++,nbVertex++){vertex.x=vertices.getX(i);vertex.y=vertices.getY(i);vertex.z=vertices.getZ(i);vertex.applyMatrix4(mesh.matrixWorld);output+='v '+vertex.x+' '+vertex.y+' '+vertex.z+'\n';}}
if(uvs!==undefined){for(i=0,l=uvs.count;i<l;i++,nbVertexUvs++){uv.x=uvs.getX(i);uv.y=uvs.getY(i);output+='vt '+uv.x+' '+uv.y+'\n';}}
if(normals!==undefined){normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);for(i=0,l=normals.count;i<l;i++,nbNormals++){normal.x=normals.getX(i);normal.y=normals.getY(i);normal.z=normals.getZ(i);normal.applyMatrix3(normalMatrixWorld);output+='vn '+normal.x+' '+normal.y+' '+normal.z+'\n';}}
if(indices!==null){for(i=0,l=indices.count;i<l;i+=3){for(m=0;m<3;m++){j=indices.getX(i+m)+1;face[m]=(indexVertex+j)+'/'+(uvs?(indexVertexUvs+j):'')+'/'+(indexNormals+j);}
output+='f '+face.join(' ')+"\n";}}else{for(i=0,l=vertices.count;i<l;i+=3){for(m=0;m<3;m++){j=i+m+1;face[m]=(indexVertex+j)+'/'+(uvs?(indexVertexUvs+j):'')+'/'+(indexNormals+j);}
output+='f '+face.join(' ')+"\n";}}}else{console.warn('THREE.OBJExporter.parseMesh(): geometry type unsupported',geometry);}
indexVertex+=nbVertex;indexVertexUvs+=nbVertexUvs;indexNormals+=nbNormals;};var parseLine=function(line){var nbVertex=0;var geometry=line.geometry;var type=line.type;if(geometry instanceof THREE.Geometry){geometry=new THREE.BufferGeometry().setFromObject(line);}
if(geometry instanceof THREE.BufferGeometry){var vertices=geometry.getAttribute('position');output+='o '+line.name+'\n';if(vertices!==undefined){for(i=0,l=vertices.count;i<l;i++,nbVertex++){vertex.x=vertices.getX(i);vertex.y=vertices.getY(i);vertex.z=vertices.getZ(i);vertex.applyMatrix4(line.matrixWorld);output+='v '+vertex.x+' '+vertex.y+' '+vertex.z+'\n';}}
if(type==='Line'){output+='l ';for(j=1,l=vertices.count;j<=l;j++){output+=(indexVertex+j)+' ';}
output+='\n';}
if(type==='LineSegments'){for(j=1,k=j+1,l=vertices.count;j<l;j+=2,k=j+1){output+='l '+(indexVertex+j)+' '+(indexVertex+k)+'\n';}}}else{console.warn('THREE.OBJExporter.parseLine(): geometry type unsupported',geometry);}
indexVertex+=nbVertex;};object.traverse(function(child){if(child instanceof THREE.Mesh){parseMesh(child);}
if(child instanceof THREE.Line){parseLine(child);}});return output;}};var WEBGL_CONSTANTS={POINTS:0x0000,LINES:0x0001,LINE_LOOP:0x0002,LINE_STRIP:0x0003,TRIANGLES:0x0004,TRIANGLE_STRIP:0x0005,TRIANGLE_FAN:0x0006,UNSIGNED_BYTE:0x1401,UNSIGNED_SHORT:0x1403,FLOAT:0x1406,UNSIGNED_INT:0x1405,ARRAY_BUFFER:0x8892,ELEMENT_ARRAY_BUFFER:0x8893,NEAREST:0x2600,LINEAR:0x2601,NEAREST_MIPMAP_NEAREST:0x2700,LINEAR_MIPMAP_NEAREST:0x2701,NEAREST_MIPMAP_LINEAR:0x2702,LINEAR_MIPMAP_LINEAR:0x2703};var THREE_TO_WEBGL={1003:WEBGL_CONSTANTS.NEAREST,1004:WEBGL_CONSTANTS.NEAREST_MIPMAP_NEAREST,1005:WEBGL_CONSTANTS.NEAREST_MIPMAP_LINEAR,1006:WEBGL_CONSTANTS.LINEAR,1007:WEBGL_CONSTANTS.LINEAR_MIPMAP_NEAREST,1008:WEBGL_CONSTANTS.LINEAR_MIPMAP_LINEAR};THREE.GLTFExporter=function(){};THREE.GLTFExporter.prototype={constructor:THREE.GLTFExporter,parse:function(input,onDone,options){var DEFAULT_OPTIONS={trs:false,onlyVisible:true,truncateDrawRange:true};options=Object.assign({},DEFAULT_OPTIONS,options);var outputJSON={asset:{version:"2.0",generator:"THREE.GLTFExporter"}};var byteOffset=0;var dataViews=[];var cachedData={images:{},materials:{}};function equalArray(array1,array2){return(array1.length===array2.length)&&array1.every(function(element,index){return element===array2[index];});}
function getMinMax(attribute){var output={min:new Array(attribute.itemSize).fill(Number.POSITIVE_INFINITY),max:new Array(attribute.itemSize).fill(Number.NEGATIVE_INFINITY)};for(var i=0;i<attribute.count;i++){for(var a=0;a<attribute.itemSize;a++){var value=attribute.array[i*attribute.itemSize+a];output.min[a]=Math.min(output.min[a],value);output.max[a]=Math.max(output.max[a],value);}}
return output;}
function processBuffer(attribute,componentType,start,count){if(!outputJSON.buffers){outputJSON.buffers=[{byteLength:0,uri:''}];}
var offset=0;var componentSize=componentType===WEBGL_CONSTANTS.UNSIGNED_SHORT?2:4;var byteLength=count*attribute.itemSize*componentSize;var dataView=new DataView(new ArrayBuffer(byteLength));for(var i=start;i<start+count;i++){for(var a=0;a<attribute.itemSize;a++){var value=attribute.array[i*attribute.itemSize+a];if(componentType===WEBGL_CONSTANTS.FLOAT){dataView.setFloat32(offset,value,true);}else if(componentType===WEBGL_CONSTANTS.UNSIGNED_INT){dataView.setUint8(offset,value,true);}else if(componentType===WEBGL_CONSTANTS.UNSIGNED_SHORT){dataView.setUint16(offset,value,true);}
offset+=componentSize;}}
dataViews.push(dataView);return 0;}
function processBufferView(data,componentType,start,count){var isVertexAttributes=componentType===WEBGL_CONSTANTS.FLOAT;if(!outputJSON.bufferViews){outputJSON.bufferViews=[];}
var componentSize=componentType===WEBGL_CONSTANTS.UNSIGNED_SHORT?2:4;var byteLength=count*data.itemSize*componentSize;var gltfBufferView={buffer:processBuffer(data,componentType,start,count),byteOffset:byteOffset,byteLength:byteLength,byteStride:data.itemSize*componentSize,target:isVertexAttributes?WEBGL_CONSTANTS.ARRAY_BUFFER:WEBGL_CONSTANTS.ELEMENT_ARRAY_BUFFER};byteOffset+=byteLength;outputJSON.bufferViews.push(gltfBufferView);var output={id:outputJSON.bufferViews.length-1,byteLength:0};return output;}
function processAccessor(attribute,geometry){if(!outputJSON.accessors){outputJSON.accessors=[];}
var types=['SCALAR','VEC2','VEC3','VEC4'];var componentType;if(attribute.array.constructor===Float32Array){componentType=WEBGL_CONSTANTS.FLOAT;}else if(attribute.array.constructor===Uint32Array){componentType=WEBGL_CONSTANTS.UNSIGNED_INT;}else if(attribute.array.constructor===Uint16Array){componentType=WEBGL_CONSTANTS.UNSIGNED_SHORT;}else{throw new Error('THREE.GLTFExporter: Unsupported bufferAttribute component type.');}
var minMax=getMinMax(attribute);var start=0;var count=attribute.count;if(options.truncateDrawRange&&geometry.index===null){start=geometry.drawRange.start;count=geometry.drawRange.count!==Infinity?geometry.drawRange.count:attribute.count;}
var bufferView=processBufferView(attribute,componentType,start,count);var gltfAccessor={bufferView:bufferView.id,byteOffset:bufferView.byteOffset,componentType:componentType,count:count,max:minMax.max,min:minMax.min,type:types[attribute.itemSize-1]};outputJSON.accessors.push(gltfAccessor);return outputJSON.accessors.length-1;}
function processImage(map){if(cachedData.images[map.uuid]){return cachedData.images[map.uuid];}
if(!outputJSON.images){outputJSON.images=[];}
var gltfImage={};if(options.embedImages){}else{gltfImage.uri=map.image.src;}
outputJSON.images.push(gltfImage);var index=outputJSON.images.length-1;cachedData.images[map.uuid]=index;return index;}
function processSampler(map){if(!outputJSON.samplers){outputJSON.samplers=[];}
var gltfSampler={magFilter:THREE_TO_WEBGL[map.magFilter],minFilter:THREE_TO_WEBGL[map.minFilter],wrapS:THREE_TO_WEBGL[map.wrapS],wrapT:THREE_TO_WEBGL[map.wrapT]};outputJSON.samplers.push(gltfSampler);return outputJSON.samplers.length-1;}
function processTexture(map){if(!outputJSON.textures){outputJSON.textures=[];}
var gltfTexture={sampler:processSampler(map),source:processImage(map)};outputJSON.textures.push(gltfTexture);return outputJSON.textures.length-1;}
function processMaterial(material){if(cachedData.materials[material.uuid]){return cachedData.materials[material.uuid];}
if(!outputJSON.materials){outputJSON.materials=[];}
if(material instanceof THREE.ShaderMaterial){console.warn('GLTFExporter: THREE.ShaderMaterial not supported.');return null;}
if(!(material instanceof THREE.MeshStandardMaterial)){console.warn('GLTFExporter: Currently just THREE.StandardMaterial is supported. Material conversion may lose information.');}
var gltfMaterial={pbrMetallicRoughness:{}};var color=material.color.toArray().concat([material.opacity]);if(!equalArray(color,[1,1,1,1])){gltfMaterial.pbrMetallicRoughness.baseColorFactor=color;}
if(material instanceof THREE.MeshStandardMaterial){gltfMaterial.pbrMetallicRoughness.metallicFactor=material.metalness;gltfMaterial.pbrMetallicRoughness.roughnessFactor=material.roughness;}else{gltfMaterial.pbrMetallicRoughness.metallicFactor=0.5;gltfMaterial.pbrMetallicRoughness.roughnessFactor=0.5;}
if(material.map){gltfMaterial.pbrMetallicRoughness.baseColorTexture={index:processTexture( material.map)};}
if(material instanceof THREE.MeshBasicMaterial||material instanceof THREE.LineBasicMaterial||material instanceof THREE.PointsMaterial){}else{var emissive=material.emissive.clone().multiplyScalar(material.emissiveIntensity).toArray();if(!equalArray(emissive,[0,0,0])){gltfMaterial.emissiveFactor=emissive;}
if(material.emissiveMap){gltfMaterial.emissiveTexture={index:processTexture( material.emissiveMap)};}}
if(material.normalMap){gltfMaterial.normalTexture={index:processTexture( material.normalMap)};if(material.normalScale.x!==-1){if(material.normalScale.x!==material.normalScale.y){console.warn('THREE.GLTFExporter: Normal scale components are different, ignoring Y and exporting X.');}
gltfMaterial.normalTexture.scale=material.normalScale.x;}}
if(material.aoMap){gltfMaterial.occlusionTexture={index:processTexture( material.aoMap)};if(material.aoMapIntensity!==1.0){gltfMaterial.occlusionTexture.strength=material.aoMapIntensity;}}
if(material.transparent){gltfMaterial.alphaMode='MASK';if(material.alphaTest!==0.5){gltfMaterial.alphaCutoff=material.alphaTest;}}
if(material.side===THREE.DoubleSide){gltfMaterial.doubleSided=true;}
if(material.name){gltfMaterial.name=material.name;}
outputJSON.materials.push(gltfMaterial);var index=outputJSON.materials.length-1;cachedData.materials[material.uuid]=index;return index;}
function processMesh(mesh){if(!outputJSON.meshes){outputJSON.meshes=[];}
var geometry=mesh.geometry;var mode;if(mesh instanceof THREE.LineSegments){mode=WEBGL_CONSTANTS.LINES;}else if(mesh instanceof THREE.LineLoop){mode=WEBGL_CONSTANTS.LINE_LOOP;}else if(mesh instanceof THREE.Line){mode=WEBGL_CONSTANTS.LINE_STRIP;}else if(mesh instanceof THREE.Points){mode=WEBGL_CONSTANTS.POINTS;}else{if(!geometry.isBufferGeometry){var geometryTemp=new THREE.BufferGeometry();geometryTemp.fromGeometry(geometry);geometry=geometryTemp;}
if(mesh.drawMode===THREE.TriangleFanDrawMode){console.warn('GLTFExporter: TriangleFanDrawMode and wireframe incompatible.');mode=WEBGL_CONSTANTS.TRIANGLE_FAN;}else if(mesh.drawMode===THREE.TriangleStripDrawMode){mode=mesh.material.wireframe?WEBGL_CONSTANTS.LINE_STRIP:WEBGL_CONSTANTS.TRIANGLE_STRIP;}else{mode=mesh.material.wireframe?WEBGL_CONSTANTS.LINES:WEBGL_CONSTANTS.TRIANGLES;}}
var gltfMesh={primitives:[{mode:mode,attributes:{},}]};var material=processMaterial(mesh.material);if(material!==null){gltfMesh.primitives[0].material=material;}
if(geometry.index){gltfMesh.primitives[0].indices=processAccessor(geometry.index,geometry);}
var gltfAttributes=gltfMesh.primitives[0].attributes;var nameConversion={uv:'TEXCOORD_0',uv2:'TEXCOORD_1',color:'COLOR_0',skinWeight:'WEIGHTS_0',skinIndex:'JOINTS_0'};for(var attributeName in geometry.attributes){var attribute=geometry.attributes[attributeName];attributeName=nameConversion[attributeName]||attributeName.toUpperCase();gltfAttributes[attributeName]=processAccessor(attribute,geometry);}
outputJSON.meshes.push(gltfMesh);return outputJSON.meshes.length-1;}
function processCamera(camera){if(!outputJSON.cameras){outputJSON.cameras=[];}
var isOrtho=camera instanceof THREE.OrthographicCamera;var gltfCamera={type:isOrtho?'orthographic':'perspective'};if(isOrtho){gltfCamera.orthographic={xmag:camera.right*2,ymag:camera.top*2,zfar:camera.far,znear:camera.near};}else{gltfCamera.perspective={aspectRatio:camera.aspect,yfov:THREE.Math.degToRad(camera.fov)/camera.aspect,zfar:camera.far,znear:camera.near};}
if(camera.name){gltfCamera.name=camera.type;}
outputJSON.cameras.push(gltfCamera);return outputJSON.cameras.length-1;}
function processNode(object){if(object instanceof THREE.Light){console.warn('GLTFExporter: Unsupported node type:',object.constructor.name);return null;}
if(!outputJSON.nodes){outputJSON.nodes=[];}
var gltfNode={};if(options.trs){var rotation=object.quaternion.toArray();var position=object.position.toArray();var scale=object.scale.toArray();if(!equalArray(rotation,[0,0,0,1])){gltfNode.rotation=rotation;}
if(!equalArray(position,[0,0,0])){gltfNode.position=position;}
if(!equalArray(scale,[1,1,1])){gltfNode.scale=scale;}}else{object.updateMatrix();if(!equalArray(object.matrix.elements,[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])){gltfNode.matrix=object.matrix.elements;}}
if(object.name){gltfNode.name=object.name;}
if(object.userData&&Object.keys(object.userData).length>0){try{gltfNode.extras=JSON.parse(JSON.stringify(object.userData));}catch(e){throw new Error('THREE.GLTFExporter: userData can\'t be serialized');}}
if(object instanceof THREE.Mesh||object instanceof THREE.Line||object instanceof THREE.Points){gltfNode.mesh=processMesh(object);}else if(object instanceof THREE.Camera){gltfNode.camera=processCamera(object);}
if(object.children.length>0){var children=[];for(var i=0,l=object.children.length;i<l;i++){var child=object.children[i];if(child.visible||options.onlyVisible===false){var node=processNode(child);if(node!==null){children.push(node);}}}
if(children.length>0){gltfNode.children=children;}}
outputJSON.nodes.push(gltfNode);return outputJSON.nodes.length-1;}
function processScene(scene){if(!outputJSON.scenes){outputJSON.scenes=[];outputJSON.scene=0;}
var gltfScene={nodes:[]};if(scene.name){gltfScene.name=scene.name;}
outputJSON.scenes.push(gltfScene);var nodes=[];for(var i=0,l=scene.children.length;i<l;i++){var child=scene.children[i];if(child.visible||options.onlyVisible===false){var node=processNode(child);if(node!==null){nodes.push(node);}}}
if(nodes.length>0){gltfScene.nodes=nodes;}}
function processObjects(objects){var scene=new THREE.Scene();scene.name='AuxScene';for(var i=0;i<objects.length;i++){scene.children.push(objects[i]);}
processScene(scene);}
function processInput(input){input=input instanceof Array?input:[input];var objectsWithoutScene=[];for(var i=0;i<input.length;i++){if(input[i]instanceof THREE.Scene){processScene(input[i]);}else{objectsWithoutScene.push(input[i]);}}
if(objectsWithoutScene.length>0){processObjects(objectsWithoutScene);}}
processInput(input);var blob=new Blob(dataViews,{type:'application/octet-stream'});if(outputJSON.buffers&&outputJSON.buffers.length>0){outputJSON.buffers[0].byteLength=blob.size;var objectURL=URL.createObjectURL(blob);var reader=new window.FileReader();reader.readAsDataURL(blob);reader.onloadend=function(){var base64data=reader.result;outputJSON.buffers[0].uri=base64data;onDone(outputJSON);};}else{onDone(outputJSON);}}};THREE.STLExporter=function(){};THREE.STLExporter.prototype={constructor:THREE.STLExporter,parse:(function(){var vector=new THREE.Vector3();var normalMatrixWorld=new THREE.Matrix3();return function parse(scene){var output='';output+='solid exported\n';scene.traverse(function(object){if(object instanceof THREE.Mesh){var geometry=object.geometry;var matrixWorld=object.matrixWorld;if(geometry instanceof THREE.BufferGeometry){geometry=new THREE.Geometry().fromBufferGeometry(geometry);}
if(geometry instanceof THREE.Geometry){var vertices=geometry.vertices;var faces=geometry.faces;normalMatrixWorld.getNormalMatrix(matrixWorld);for(var i=0,l=faces.length;i<l;i++){var face=faces[i];vector.copy(face.normal).applyMatrix3(normalMatrixWorld).normalize();output+='\tfacet normal '+vector.x+' '+vector.y+' '+vector.z+'\n';output+='\t\touter loop\n';var indices=[face.a,face.b,face.c];for(var j=0;j<3;j++){vector.copy(vertices[indices[j]]).applyMatrix4(matrixWorld);output+='\t\t\tvertex '+vector.x+' '+vector.y+' '+vector.z+'\n';}
output+='\t\tendloop\n';output+='\tendfacet\n';}}}});output+='endsolid exported\n';return output;};}())};THREE.TeapotBufferGeometry=function(size,segments,bottom,lid,body,fitLid,blinn){"use strict";var teapotPatches=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,3,16,17,18,7,19,20,21,11,22,23,24,15,25,26,27,18,28,29,30,21,31,32,33,24,34,35,36,27,37,38,39,30,40,41,0,33,42,43,4,36,44,45,8,39,46,47,12,12,13,14,15,48,49,50,51,52,53,54,55,56,57,58,59,15,25,26,27,51,60,61,62,55,63,64,65,59,66,67,68,27,37,38,39,62,69,70,71,65,72,73,74,68,75,76,77,39,46,47,12,71,78,79,48,74,80,81,52,77,82,83,56,56,57,58,59,84,85,86,87,88,89,90,91,92,93,94,95,59,66,67,68,87,96,97,98,91,99,100,101,95,102,103,104,68,75,76,77,98,105,106,107,101,108,109,110,104,111,112,113,77,82,83,56,107,114,115,84,110,116,117,88,113,118,119,92,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,123,136,137,120,127,138,139,124,131,140,141,128,135,142,143,132,132,133,134,135,144,145,146,147,148,149,150,151,68,152,153,154,135,142,143,132,147,155,156,144,151,157,158,148,154,159,160,68,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,164,177,178,161,168,179,180,165,172,181,182,169,176,183,184,173,173,174,175,176,185,186,187,188,189,190,191,192,193,194,195,196,176,183,184,173,188,197,198,185,192,199,200,189,196,201,202,193,203,203,203,203,204,205,206,207,208,208,208,208,209,210,211,212,203,203,203,203,207,213,214,215,208,208,208,208,212,216,217,218,203,203,203,203,215,219,220,221,208,208,208,208,218,222,223,224,203,203,203,203,221,225,226,204,208,208,208,208,224,227,228,209,209,210,211,212,229,230,231,232,233,234,235,236,237,238,239,240,212,216,217,218,232,241,242,243,236,244,245,246,240,247,248,249,218,222,223,224,243,250,251,252,246,253,254,255,249,256,257,258,224,227,228,209,252,259,260,229,255,261,262,233,258,263,264,237,265,265,265,265,266,267,268,269,270,271,272,273,92,119,118,113,265,265,265,265,269,274,275,276,273,277,278,279,113,112,111,104,265,265,265,265,276,280,281,282,279,283,284,285,104,103,102,95,265,265,265,265,282,286,287,266,285,288,289,270,95,94,93,92];var teapotVertices=[1.4,0,2.4,1.4,-0.784,2.4,0.784,-1.4,2.4,0,-1.4,2.4,1.3375,0,2.53125,1.3375,-0.749,2.53125,0.749,-1.3375,2.53125,0,-1.3375,2.53125,1.4375,0,2.53125,1.4375,-0.805,2.53125,0.805,-1.4375,2.53125,0,-1.4375,2.53125,1.5,0,2.4,1.5,-0.84,2.4,0.84,-1.5,2.4,0,-1.5,2.4,-0.784,-1.4,2.4,-1.4,-0.784,2.4,-1.4,0,2.4,-0.749,-1.3375,2.53125,-1.3375,-0.749,2.53125,-1.3375,0,2.53125,-0.805,-1.4375,2.53125,-1.4375,-0.805,2.53125,-1.4375,0,2.53125,-0.84,-1.5,2.4,-1.5,-0.84,2.4,-1.5,0,2.4,-1.4,0.784,2.4,-0.784,1.4,2.4,0,1.4,2.4,-1.3375,0.749,2.53125,-0.749,1.3375,2.53125,0,1.3375,2.53125,-1.4375,0.805,2.53125,-0.805,1.4375,2.53125,0,1.4375,2.53125,-1.5,0.84,2.4,-0.84,1.5,2.4,0,1.5,2.4,0.784,1.4,2.4,1.4,0.784,2.4,0.749,1.3375,2.53125,1.3375,0.749,2.53125,0.805,1.4375,2.53125,1.4375,0.805,2.53125,0.84,1.5,2.4,1.5,0.84,2.4,1.75,0,1.875,1.75,-0.98,1.875,0.98,-1.75,1.875,0,-1.75,1.875,2,0,1.35,2,-1.12,1.35,1.12,-2,1.35,0,-2,1.35,2,0,0.9,2,-1.12,0.9,1.12,-2,0.9,0,-2,0.9,-0.98,-1.75,1.875,-1.75,-0.98,1.875,-1.75,0,1.875,-1.12,-2,1.35,-2,-1.12,1.35,-2,0,1.35,-1.12,-2,0.9,-2,-1.12,0.9,-2,0,0.9,-1.75,0.98,1.875,-0.98,1.75,1.875,0,1.75,1.875,-2,1.12,1.35,-1.12,2,1.35,0,2,1.35,-2,1.12,0.9,-1.12,2,0.9,0,2,0.9,0.98,1.75,1.875,1.75,0.98,1.875,1.12,2,1.35,2,1.12,1.35,1.12,2,0.9,2,1.12,0.9,2,0,0.45,2,-1.12,0.45,1.12,-2,0.45,0,-2,0.45,1.5,0,0.225,1.5,-0.84,0.225,0.84,-1.5,0.225,0,-1.5,0.225,1.5,0,0.15,1.5,-0.84,0.15,0.84,-1.5,0.15,0,-1.5,0.15,-1.12,-2,0.45,-2,-1.12,0.45,-2,0,0.45,-0.84,-1.5,0.225,-1.5,-0.84,0.225,-1.5,0,0.225,-0.84,-1.5,0.15,-1.5,-0.84,0.15,-1.5,0,0.15,-2,1.12,0.45,-1.12,2,0.45,0,2,0.45,-1.5,0.84,0.225,-0.84,1.5,0.225,0,1.5,0.225,-1.5,0.84,0.15,-0.84,1.5,0.15,0,1.5,0.15,1.12,2,0.45,2,1.12,0.45,0.84,1.5,0.225,1.5,0.84,0.225,0.84,1.5,0.15,1.5,0.84,0.15,-1.6,0,2.025,-1.6,-0.3,2.025,-1.5,-0.3,2.25,-1.5,0,2.25,-2.3,0,2.025,-2.3,-0.3,2.025,-2.5,-0.3,2.25,-2.5,0,2.25,-2.7,0,2.025,-2.7,-0.3,2.025,-3,-0.3,2.25,-3,0,2.25,-2.7,0,1.8,-2.7,-0.3,1.8,-3,-0.3,1.8,-3,0,1.8,-1.5,0.3,2.25,-1.6,0.3,2.025,-2.5,0.3,2.25,-2.3,0.3,2.025,-3,0.3,2.25,-2.7,0.3,2.025,-3,0.3,1.8,-2.7,0.3,1.8,-2.7,0,1.575,-2.7,-0.3,1.575,-3,-0.3,1.35,-3,0,1.35,-2.5,0,1.125,-2.5,-0.3,1.125,-2.65,-0.3,0.9375,-2.65,0,0.9375,-2,-0.3,0.9,-1.9,-0.3,0.6,-1.9,0,0.6,-3,0.3,1.35,-2.7,0.3,1.575,-2.65,0.3,0.9375,-2.5,0.3,1.125,-1.9,0.3,0.6,-2,0.3,0.9,1.7,0,1.425,1.7,-0.66,1.425,1.7,-0.66,0.6,1.7,0,0.6,2.6,0,1.425,2.6,-0.66,1.425,3.1,-0.66,0.825,3.1,0,0.825,2.3,0,2.1,2.3,-0.25,2.1,2.4,-0.25,2.025,2.4,0,2.025,2.7,0,2.4,2.7,-0.25,2.4,3.3,-0.25,2.4,3.3,0,2.4,1.7,0.66,0.6,1.7,0.66,1.425,3.1,0.66,0.825,2.6,0.66,1.425,2.4,0.25,2.025,2.3,0.25,2.1,3.3,0.25,2.4,2.7,0.25,2.4,2.8,0,2.475,2.8,-0.25,2.475,3.525,-0.25,2.49375,3.525,0,2.49375,2.9,0,2.475,2.9,-0.15,2.475,3.45,-0.15,2.5125,3.45,0,2.5125,2.8,0,2.4,2.8,-0.15,2.4,3.2,-0.15,2.4,3.2,0,2.4,3.525,0.25,2.49375,2.8,0.25,2.475,3.45,0.15,2.5125,2.9,0.15,2.475,3.2,0.15,2.4,2.8,0.15,2.4,0,0,3.15,0.8,0,3.15,0.8,-0.45,3.15,0.45,-0.8,3.15,0,-0.8,3.15,0,0,2.85,0.2,0,2.7,0.2,-0.112,2.7,0.112,-0.2,2.7,0,-0.2,2.7,-0.45,-0.8,3.15,-0.8,-0.45,3.15,-0.8,0,3.15,-0.112,-0.2,2.7,-0.2,-0.112,2.7,-0.2,0,2.7,-0.8,0.45,3.15,-0.45,0.8,3.15,0,0.8,3.15,-0.2,0.112,2.7,-0.112,0.2,2.7,0,0.2,2.7,0.45,0.8,3.15,0.8,0.45,3.15,0.112,0.2,2.7,0.2,0.112,2.7,0.4,0,2.55,0.4,-0.224,2.55,0.224,-0.4,2.55,0,-0.4,2.55,1.3,0,2.55,1.3,-0.728,2.55,0.728,-1.3,2.55,0,-1.3,2.55,1.3,0,2.4,1.3,-0.728,2.4,0.728,-1.3,2.4,0,-1.3,2.4,-0.224,-0.4,2.55,-0.4,-0.224,2.55,-0.4,0,2.55,-0.728,-1.3,2.55,-1.3,-0.728,2.55,-1.3,0,2.55,-0.728,-1.3,2.4,-1.3,-0.728,2.4,-1.3,0,2.4,-0.4,0.224,2.55,-0.224,0.4,2.55,0,0.4,2.55,-1.3,0.728,2.55,-0.728,1.3,2.55,0,1.3,2.55,-1.3,0.728,2.4,-0.728,1.3,2.4,0,1.3,2.4,0.224,0.4,2.55,0.4,0.224,2.55,0.728,1.3,2.55,1.3,0.728,2.55,0.728,1.3,2.4,1.3,0.728,2.4,0,0,0,1.425,0,0,1.425,0.798,0,0.798,1.425,0,0,1.425,0,1.5,0,0.075,1.5,0.84,0.075,0.84,1.5,0.075,0,1.5,0.075,-0.798,1.425,0,-1.425,0.798,0,-1.425,0,0,-0.84,1.5,0.075,-1.5,0.84,0.075,-1.5,0,0.075,-1.425,-0.798,0,-0.798,-1.425,0,0,-1.425,0,-1.5,-0.84,0.075,-0.84,-1.5,0.075,0,-1.5,0.075,0.798,-1.425,0,1.425,-0.798,0,0.84,-1.5,0.075,1.5,-0.84,0.075];THREE.BufferGeometry.call(this);this.type='TeapotBufferGeometry';this.parameters={size:size,segments:segments,bottom:bottom,lid:lid,body:body,fitLid:fitLid,blinn:blinn};size=size||50;segments=segments!==undefined?Math.max(2,Math.floor(segments)||10):10;bottom=bottom===undefined?true:bottom;lid=lid===undefined?true:lid;body=body===undefined?true:body;fitLid=fitLid===undefined?true:fitLid;var blinnScale=1.3;blinn=blinn===undefined?true:blinn;var maxHeight=3.15*(blinn?1:blinnScale);var maxHeight2=maxHeight/2;var trueSize=size/maxHeight2;var numTriangles=bottom?(8*segments-4)*segments:0;numTriangles+=lid?(16*segments-4)*segments:0;numTriangles+=body?40*segments*segments:0;var indices=new Uint32Array(numTriangles*3);var numVertices=bottom?4:0;numVertices+=lid?8:0;numVertices+=body?20:0;numVertices*=(segments+1)*(segments+1);var vertices=new Float32Array(numVertices*3);var normals=new Float32Array(numVertices*3);var uvs=new Float32Array(numVertices*2);var ms=new THREE.Matrix4();ms.set(-1.0,3.0,-3.0,1.0,3.0,-6.0,3.0,0.0,-3.0,3.0,0.0,0.0,1.0,0.0,0.0,0.0);var g=[];var i,r,c;var sp=[];var tp=[];var dsp=[];var dtp=[];var mgm=[];var vert=[];var sdir=[];var tdir=[];var norm=new THREE.Vector3();var tcoord;var sstep,tstep;var vertPerRow;var s,t,sval,tval,p;var dsval=0;var dtval=0;var normOut=new THREE.Vector3();var v1,v2,v3,v4;var gmx=new THREE.Matrix4();var tmtx=new THREE.Matrix4();var vsp=new THREE.Vector4();var vtp=new THREE.Vector4();var vdsp=new THREE.Vector4();var vdtp=new THREE.Vector4();var vsdir=new THREE.Vector3();var vtdir=new THREE.Vector3();var mst=ms.clone();mst.transpose();var notDegenerate=function(vtx1,vtx2,vtx3){return!(((vertices[vtx1*3]===vertices[vtx2*3])&&(vertices[vtx1*3+1]===vertices[vtx2*3+1])&&(vertices[vtx1*3+2]===vertices[vtx2*3+2]))||((vertices[vtx1*3]===vertices[vtx3*3])&&(vertices[vtx1*3+1]===vertices[vtx3*3+1])&&(vertices[vtx1*3+2]===vertices[vtx3*3+2]))||((vertices[vtx2*3]===vertices[vtx3*3])&&(vertices[vtx2*3+1]===vertices[vtx3*3+1])&&(vertices[vtx2*3+2]===vertices[vtx3*3+2])));};for(i=0;i<3;i++)
{mgm[i]=new THREE.Matrix4();}
var minPatches=body?0:20;var maxPatches=bottom?32:28;vertPerRow=segments+1;var surfCount=0;var vertCount=0;var normCount=0;var uvCount=0;var indexCount=0;for(var surf=minPatches;surf<maxPatches;surf++){if(lid||(surf<20||surf>=28)){for(i=0;i<3;i++){for(r=0;r<4;r++){for(c=0;c<4;c++){g[c*4+r]=teapotVertices[teapotPatches[surf*16+r*4+c]*3+i];if(fitLid&&(surf>=20&&surf<28)&&(i!==2)){g[c*4+r]*=1.077;}
if(!blinn&&(i===2)){g[c*4+r]*=blinnScale;}}}
gmx.set(g[0],g[1],g[2],g[3],g[4],g[5],g[6],g[7],g[8],g[9],g[10],g[11],g[12],g[13],g[14],g[15]);tmtx.multiplyMatrices(gmx,ms);mgm[i].multiplyMatrices(mst,tmtx);}
for(sstep=0;sstep<=segments;sstep++){s=sstep/segments;for(tstep=0;tstep<=segments;tstep++){t=tstep/segments;for(p=4,sval=tval=1.0;p--;){sp[p]=sval;tp[p]=tval;sval*=s;tval*=t;if(p===3){dsp[p]=dtp[p]=0.0;dsval=dtval=1.0;}else{dsp[p]=dsval*(3-p);dtp[p]=dtval*(3-p);dsval*=s;dtval*=t;}}
vsp.fromArray(sp);vtp.fromArray(tp);vdsp.fromArray(dsp);vdtp.fromArray(dtp);for(i=0;i<3;i++){tcoord=vsp.clone();tcoord.applyMatrix4(mgm[i]);vert[i]=tcoord.dot(vtp);tcoord=vdsp.clone();tcoord.applyMatrix4(mgm[i]);sdir[i]=tcoord.dot(vtp);tcoord=vsp.clone();tcoord.applyMatrix4(mgm[i]);tdir[i]=tcoord.dot(vdtp);}
vsdir.fromArray(sdir);vtdir.fromArray(tdir);norm.crossVectors(vtdir,vsdir);norm.normalize();if(vert[0]===0&&vert[1]===0)
{normOut.set(0,vert[2]>maxHeight2?1:-1,0);}
else
{normOut.set(norm.x,norm.z,-norm.y);}
vertices[vertCount++]=trueSize*vert[0];vertices[vertCount++]=trueSize*(vert[2]-maxHeight2);vertices[vertCount++]=-trueSize*vert[1];normals[normCount++]=normOut.x;normals[normCount++]=normOut.y;normals[normCount++]=normOut.z;uvs[uvCount++]=1-t;uvs[uvCount++]=1-s;}}
for(sstep=0;sstep<segments;sstep++){for(tstep=0;tstep<segments;tstep++){v1=surfCount*vertPerRow*vertPerRow+sstep*vertPerRow+tstep;v2=v1+1;v3=v2+vertPerRow;v4=v1+vertPerRow;if(notDegenerate(v1,v2,v3)){indices[indexCount++]=v1;indices[indexCount++]=v2;indices[indexCount++]=v3;}
if(notDegenerate(v1,v3,v4)){indices[indexCount++]=v1;indices[indexCount++]=v3;indices[indexCount++]=v4;}}}
surfCount++;}}
this.setIndex(new THREE.BufferAttribute(indices,1));this.addAttribute('position',new THREE.BufferAttribute(vertices,3));this.addAttribute('normal',new THREE.BufferAttribute(normals,3));this.addAttribute('uv',new THREE.BufferAttribute(uvs,2));this.computeBoundingSphere();};THREE.TeapotBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.TeapotBufferGeometry.prototype.constructor=THREE.TeapotBufferGeometry;THREE.TeapotBufferGeometry.prototype.clone=function(){var bufferGeometry=new THREE.TeapotBufferGeometry(this.parameters.size,this.parameters.segments,this.parameters.bottom,this.parameters.lid,this.parameters.body,this.parameters.fitLid,this.parameters.blinn);return bufferGeometry;};